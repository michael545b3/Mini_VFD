
VFD_Mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca8  0800b230  0800b230  0000c230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ded8  0800ded8  0000f0d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ded8  0800ded8  0000eed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dee0  0800dee0  0000f0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dee0  0800dee0  0000eee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dee4  0800dee4  0000eee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0800dee8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f0d8  2**0
                  CONTENTS
 10 .bss          00004aa4  200000d8  200000d8  0000f0d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b7c  20004b7c  0000f0d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f0d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000195c7  00000000  00000000  0000f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dbe  00000000  00000000  000286cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0002c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116a  00000000  00000000  0002dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002647b  00000000  00000000  0002ec52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef38  00000000  00000000  000550cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df432  00000000  00000000  00074005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153437  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065f0  00000000  00000000  0015347c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00159a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b218 	.word	0x0800b218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800b218 	.word	0x0800b218

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b988 	b.w	8000ed4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	468e      	mov	lr, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	4688      	mov	r8, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d962      	bls.n	8000cb8 <__udivmoddi4+0xdc>
 8000bf2:	fab2 f682 	clz	r6, r2
 8000bf6:	b14e      	cbz	r6, 8000c0c <__udivmoddi4+0x30>
 8000bf8:	f1c6 0320 	rsb	r3, r6, #32
 8000bfc:	fa01 f806 	lsl.w	r8, r1, r6
 8000c00:	fa20 f303 	lsr.w	r3, r0, r3
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	ea43 0808 	orr.w	r8, r3, r8
 8000c0a:	40b4      	lsls	r4, r6
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	fa1f fc87 	uxth.w	ip, r7
 8000c14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fb01 f20c 	mul.w	r2, r1, ip
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c30:	f080 80ea 	bcs.w	8000e08 <__udivmoddi4+0x22c>
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f240 80e7 	bls.w	8000e08 <__udivmoddi4+0x22c>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	443b      	add	r3, r7
 8000c3e:	1a9a      	subs	r2, r3, r2
 8000c40:	b2a3      	uxth	r3, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c52:	459c      	cmp	ip, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x8e>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	f080 80d6 	bcs.w	8000e0c <__udivmoddi4+0x230>
 8000c60:	459c      	cmp	ip, r3
 8000c62:	f240 80d3 	bls.w	8000e0c <__udivmoddi4+0x230>
 8000c66:	443b      	add	r3, r7
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6e:	eba3 030c 	sub.w	r3, r3, ip
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40f3      	lsrs	r3, r6
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xb6>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb0>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x14c>
 8000c9a:	4573      	cmp	r3, lr
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xc8>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 8105 	bhi.w	8000eae <__udivmoddi4+0x2d2>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4690      	mov	r8, r2
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e5      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb6:	e7e2      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f000 8090 	beq.w	8000dde <__udivmoddi4+0x202>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f040 80a4 	bne.w	8000e10 <__udivmoddi4+0x234>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ce2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x11e>
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x11c>
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	f200 80e0 	bhi.w	8000eb8 <__udivmoddi4+0x2dc>
 8000cf8:	46c4      	mov	ip, r8
 8000cfa:	1a9b      	subs	r3, r3, r2
 8000cfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d08:	fb02 f404 	mul.w	r4, r2, r4
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x144>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x142>
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	f200 80ca 	bhi.w	8000eb2 <__udivmoddi4+0x2d6>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa0e f401 	lsl.w	r4, lr, r1
 8000d38:	fa20 f306 	lsr.w	r3, r0, r6
 8000d3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d44:	4323      	orrs	r3, r4
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	fa1f fc87 	uxth.w	ip, r7
 8000d4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x1a0>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6e:	f080 809c 	bcs.w	8000eaa <__udivmoddi4+0x2ce>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f240 8099 	bls.w	8000eaa <__udivmoddi4+0x2ce>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	443c      	add	r4, r7
 8000d7c:	eba4 040e 	sub.w	r4, r4, lr
 8000d80:	fa1f fe83 	uxth.w	lr, r3
 8000d84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d88:	fb09 4413 	mls	r4, r9, r3, r4
 8000d8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d94:	45a4      	cmp	ip, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1ce>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9e:	f080 8082 	bcs.w	8000ea6 <__udivmoddi4+0x2ca>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d97f      	bls.n	8000ea6 <__udivmoddi4+0x2ca>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db6:	4564      	cmp	r4, ip
 8000db8:	4673      	mov	r3, lr
 8000dba:	46e1      	mov	r9, ip
 8000dbc:	d362      	bcc.n	8000e84 <__udivmoddi4+0x2a8>
 8000dbe:	d05f      	beq.n	8000e80 <__udivmoddi4+0x2a4>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x1fe>
 8000dc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	fa22 f301 	lsr.w	r3, r2, r1
 8000dd2:	431e      	orrs	r6, r3
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dda:	2100      	movs	r1, #0
 8000ddc:	e74f      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000dde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000de2:	0c01      	lsrs	r1, r0, #16
 8000de4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de8:	b280      	uxth	r0, r0
 8000dea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dee:	463b      	mov	r3, r7
 8000df0:	4638      	mov	r0, r7
 8000df2:	463c      	mov	r4, r7
 8000df4:	46b8      	mov	r8, r7
 8000df6:	46be      	mov	lr, r7
 8000df8:	2620      	movs	r6, #32
 8000dfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfe:	eba2 0208 	sub.w	r2, r2, r8
 8000e02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e06:	e766      	b.n	8000cd6 <__udivmoddi4+0xfa>
 8000e08:	4601      	mov	r1, r0
 8000e0a:	e718      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e72c      	b.n	8000c6a <__udivmoddi4+0x8e>
 8000e10:	f1c6 0220 	rsb	r2, r6, #32
 8000e14:	fa2e f302 	lsr.w	r3, lr, r2
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	40b1      	lsls	r1, r6
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	430a      	orrs	r2, r1
 8000e26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e30:	0c11      	lsrs	r1, r2, #16
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb08 f904 	mul.w	r9, r8, r4
 8000e3a:	40b0      	lsls	r0, r6
 8000e3c:	4589      	cmp	r9, r1
 8000e3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e42:	b280      	uxth	r0, r0
 8000e44:	d93e      	bls.n	8000ec4 <__udivmoddi4+0x2e8>
 8000e46:	1879      	adds	r1, r7, r1
 8000e48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e4c:	d201      	bcs.n	8000e52 <__udivmoddi4+0x276>
 8000e4e:	4589      	cmp	r9, r1
 8000e50:	d81f      	bhi.n	8000e92 <__udivmoddi4+0x2b6>
 8000e52:	eba1 0109 	sub.w	r1, r1, r9
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fb09 f804 	mul.w	r8, r9, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	b292      	uxth	r2, r2
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	4542      	cmp	r2, r8
 8000e6a:	d229      	bcs.n	8000ec0 <__udivmoddi4+0x2e4>
 8000e6c:	18ba      	adds	r2, r7, r2
 8000e6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e72:	d2c4      	bcs.n	8000dfe <__udivmoddi4+0x222>
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d2c2      	bcs.n	8000dfe <__udivmoddi4+0x222>
 8000e78:	f1a9 0102 	sub.w	r1, r9, #2
 8000e7c:	443a      	add	r2, r7
 8000e7e:	e7be      	b.n	8000dfe <__udivmoddi4+0x222>
 8000e80:	45f0      	cmp	r8, lr
 8000e82:	d29d      	bcs.n	8000dc0 <__udivmoddi4+0x1e4>
 8000e84:	ebbe 0302 	subs.w	r3, lr, r2
 8000e88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	46e1      	mov	r9, ip
 8000e90:	e796      	b.n	8000dc0 <__udivmoddi4+0x1e4>
 8000e92:	eba7 0909 	sub.w	r9, r7, r9
 8000e96:	4449      	add	r1, r9
 8000e98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea0:	fb09 f804 	mul.w	r8, r9, r4
 8000ea4:	e7db      	b.n	8000e5e <__udivmoddi4+0x282>
 8000ea6:	4673      	mov	r3, lr
 8000ea8:	e77f      	b.n	8000daa <__udivmoddi4+0x1ce>
 8000eaa:	4650      	mov	r0, sl
 8000eac:	e766      	b.n	8000d7c <__udivmoddi4+0x1a0>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e6fd      	b.n	8000cae <__udivmoddi4+0xd2>
 8000eb2:	443b      	add	r3, r7
 8000eb4:	3a02      	subs	r2, #2
 8000eb6:	e733      	b.n	8000d20 <__udivmoddi4+0x144>
 8000eb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ebc:	443b      	add	r3, r7
 8000ebe:	e71c      	b.n	8000cfa <__udivmoddi4+0x11e>
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x222>
 8000ec4:	eba1 0109 	sub.w	r1, r1, r9
 8000ec8:	46c4      	mov	ip, r8
 8000eca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ece:	fb09 f804 	mul.w	r8, r9, r4
 8000ed2:	e7c4      	b.n	8000e5e <__udivmoddi4+0x282>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <ADC_Init>:
{
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
}

uint8_t ADC_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	// Start ADC DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000edc:	2204      	movs	r2, #4
 8000ede:	490d      	ldr	r1, [pc, #52]	@ (8000f14 <ADC_Init+0x3c>)
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <ADC_Init+0x40>)
 8000ee2:	f003 f9a3 	bl	800422c <HAL_ADC_Start_DMA>

	// Start ADC conversion timer
	HAL_TIM_Base_Start(&htim2);
 8000ee6:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <ADC_Init+0x44>)
 8000ee8:	f006 fdc4 	bl	8007a74 <HAL_TIM_Base_Start>

	// Wait until the ADC finishes
	HAL_Delay(5);
 8000eec:	2005      	movs	r0, #5
 8000eee:	f003 f825 	bl	8003f3c <HAL_Delay>

	// Check if the external reference is working
	if (Diag_Check_Reference() != SUCCESS)
 8000ef2:	f000 f861 	bl	8000fb8 <Diag_Check_Reference>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <ADC_Init+0x34>
	{
		HAL_TIM_Base_Stop(&htim2);
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <ADC_Init+0x44>)
 8000efe:	f006 fe21 	bl	8007b44 <HAL_TIM_Base_Stop>
		HAL_ADC_Stop_DMA(&hadc1);
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <ADC_Init+0x40>)
 8000f04:	f003 faa2 	bl	800444c <HAL_ADC_Stop_DMA>
		return ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <ADC_Init+0x36>
	}

	return SUCCESS;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000f4 	.word	0x200000f4
 8000f18:	20000104 	.word	0x20000104
 8000f1c:	200002ac 	.word	0x200002ac

08000f20 <ADC_Get_VREF>:
{
	return adc_val_i_in;
}

uint16_t ADC_Get_VREF(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	return adc_val_vref;
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <ADC_Get_VREF+0x14>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000100 	.word	0x20000100

08000f38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	// Save ADC values
	adc_val_v_in = adc_buf[V_IN_ADC]; 	// Analog_IN
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0x64>)
 8000f48:	801a      	strh	r2, [r3, #0]
	adc_val_i_in = adc_buf[I_IN_ADC]; 	// 4-20mA IN
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f4c:	885b      	ldrh	r3, [r3, #2]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000f52:	801a      	strh	r2, [r3, #0]
	adc_val_vref = adc_buf[VREF_ADC]; 	// VREF INT
 8000f54:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f5c:	801a      	strh	r2, [r3, #0]
	adc_val_v_bus = adc_buf[V_BUS_ADC];	// V_Bus Measure
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f60:	88db      	ldrh	r3, [r3, #6]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f66:	801a      	strh	r2, [r3, #0]

	// Calculate vbus voltage
	bus_voltage_meas = (float) adc_val_v_bus*(VREF_EXT/ADC_MAX_VAL) * VBUS_CALC_FACTOR;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f74:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000fac <HAL_ADC_ConvCpltCallback+0x74>
 8000f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000fb0 <HAL_ADC_ConvCpltCallback+0x78>
 8000f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f84:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f86:	edc3 7a00 	vstr	s15, [r3]

	Motor_LUT_Stepper();
 8000f8a:	f002 fe09 	bl	8003ba0 <Motor_LUT_Stepper>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000f4 	.word	0x200000f4
 8000f9c:	200000fc 	.word	0x200000fc
 8000fa0:	200000fe 	.word	0x200000fe
 8000fa4:	20000100 	.word	0x20000100
 8000fa8:	20000102 	.word	0x20000102
 8000fac:	3a200a01 	.word	0x3a200a01
 8000fb0:	43a19796 	.word	0x43a19796
 8000fb4:	2000083c 	.word	0x2000083c

08000fb8 <Diag_Check_Reference>:
#define VREF_INT_MIN		1700 // Min VREFINT value following datasheet: 1.18V

// Functions
// Check if the external reference is working, by checking the internal reference
uint8_t Diag_Check_Reference(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	uint16_t vref_int = ADC_Get_VREF();
 8000fbe:	f7ff ffaf 	bl	8000f20 <ADC_Get_VREF>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]

	if ((vref_int > VREF_INT_MAX) || (vref_int < VREF_INT_MIN))
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	f640 0298 	movw	r2, #2200	@ 0x898
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d804      	bhi.n	8000fda <Diag_Check_Reference+0x22>
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d801      	bhi.n	8000fde <Diag_Check_Reference+0x26>
	{
		return ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <Diag_Check_Reference+0x28>
	}
	return SUCCESS;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <DOGL128_Init>:

// Functions

// Display Initialization
void DOGL128_Init(void)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
	const uint8_t Initialization[] =
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <DOGL128_Init+0x44>)
 8000ff0:	463c      	mov	r4, r7
 8000ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff4:	c407      	stmia	r4!, {r0, r1, r2}
 8000ff6:	8023      	strh	r3, [r4, #0]
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, RESET);		// RES_DISPLAY
	HAL_Delay(20);
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, SET);			// RES_DISPLAY
#endif //RST_PIN_EN

	HAL_Delay(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f002 ff9f 	bl	8003f3c <HAL_Delay>

	for (uint8_t z = 0; z < 14; z++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e00a      	b.n	800101a <DOGL128_Init+0x32>
	{
		DOGL128_Write_CMD(Initialization[z]);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3310      	adds	r3, #16
 8001008:	443b      	add	r3, r7
 800100a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f862 	bl	80010d8 <DOGL128_Write_CMD>
	for (uint8_t z = 0; z < 14; z++)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b0d      	cmp	r3, #13
 800101e:	d9f1      	bls.n	8001004 <DOGL128_Init+0x1c>
	}
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	bf00      	nop
 800102c:	0800b230 	.word	0x0800b230

08001030 <DOGL128_Write_Data>:

// DOGL128 Write Data
void DOGL128_Write_Data(uint8_t *data)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	static uint8_t buffer[3] =
	{ 0, CMD_SET_COLUMN_UPPER, CMD_SET_COLUMN_LOWER };

	for (uint8_t p = 0; p < 8; p++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e03b      	b.n	80010b6 <DOGL128_Write_Data+0x86>
	{
		// Transmit Commands
		HAL_GPIO_WritePin(A0_PORT, A0_PIN, RESET);		// A0
 800103e:	2200      	movs	r2, #0
 8001040:	2104      	movs	r1, #4
 8001042:	4821      	ldr	r0, [pc, #132]	@ (80010c8 <DOGL128_Write_Data+0x98>)
 8001044:	f004 fbca 	bl	80057dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, RESET);		// CS
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800104e:	481f      	ldr	r0, [pc, #124]	@ (80010cc <DOGL128_Write_Data+0x9c>)
 8001050:	f004 fbc4 	bl	80057dc <HAL_GPIO_WritePin>
		buffer[0] = CMD_SET_PAGE + p;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	3b50      	subs	r3, #80	@ 0x50
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <DOGL128_Write_Data+0xa0>)
 800105c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&HSPI_DISP, buffer, 3, HAL_MAX_DELAY);
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	2203      	movs	r2, #3
 8001064:	491a      	ldr	r1, [pc, #104]	@ (80010d0 <DOGL128_Write_Data+0xa0>)
 8001066:	481b      	ldr	r0, [pc, #108]	@ (80010d4 <DOGL128_Write_Data+0xa4>)
 8001068:	f006 fa85 	bl	8007576 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, SET);		// CS
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001072:	4816      	ldr	r0, [pc, #88]	@ (80010cc <DOGL128_Write_Data+0x9c>)
 8001074:	f004 fbb2 	bl	80057dc <HAL_GPIO_WritePin>

		// Transmit Data
		HAL_GPIO_WritePin(A0_PORT, A0_PIN, SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2104      	movs	r1, #4
 800107c:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <DOGL128_Write_Data+0x98>)
 800107e:	f004 fbad 	bl	80057dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, RESET);		// CS
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001088:	4810      	ldr	r0, [pc, #64]	@ (80010cc <DOGL128_Write_Data+0x9c>)
 800108a:	f004 fba7 	bl	80057dc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&HSPI_DISP, &data[DISPLAY_WIDTH * p], 128, 10000);
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	01db      	lsls	r3, r3, #7
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	1899      	adds	r1, r3, r2
 8001098:	f242 7310 	movw	r3, #10000	@ 0x2710
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <DOGL128_Write_Data+0xa4>)
 80010a0:	f006 fa69 	bl	8007576 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, SET);			// CS
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <DOGL128_Write_Data+0x9c>)
 80010ac:	f004 fb96 	bl	80057dc <HAL_GPIO_WritePin>
	for (uint8_t p = 0; p < 8; p++)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3301      	adds	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d9c0      	bls.n	800103e <DOGL128_Write_Data+0xe>
	}
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	20000000 	.word	0x20000000
 80010d4:	2000020c 	.word	0x2000020c

080010d8 <DOGL128_Write_CMD>:
	DOGL128_Write_CMD(0xAE);			// LCD Display OFF Command
}

// DOGL128 Write Command
void DOGL128_Write_CMD(uint8_t cmd)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(A0_PORT, A0_PIN, RESET);		// A0
 80010e2:	2200      	movs	r2, #0
 80010e4:	2104      	movs	r1, #4
 80010e6:	4810      	ldr	r0, [pc, #64]	@ (8001128 <DOGL128_Write_CMD+0x50>)
 80010e8:	f004 fb78 	bl	80057dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, RESET);		// CS
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f2:	480e      	ldr	r0, [pc, #56]	@ (800112c <DOGL128_Write_CMD+0x54>)
 80010f4:	f004 fb72 	bl	80057dc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&HSPI_DISP, &cmd, 1, HAL_MAX_DELAY);
 80010f8:	1df9      	adds	r1, r7, #7
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	2201      	movs	r2, #1
 8001100:	480b      	ldr	r0, [pc, #44]	@ (8001130 <DOGL128_Write_CMD+0x58>)
 8001102:	f006 fa38 	bl	8007576 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&HSPI_DISP) != HAL_SPI_STATE_READY);
 8001106:	bf00      	nop
 8001108:	4809      	ldr	r0, [pc, #36]	@ (8001130 <DOGL128_Write_CMD+0x58>)
 800110a:	f006 fb78 	bl	80077fe <HAL_SPI_GetState>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d1f9      	bne.n	8001108 <DOGL128_Write_CMD+0x30>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, SET);			// CS
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800111a:	4804      	ldr	r0, [pc, #16]	@ (800112c <DOGL128_Write_CMD+0x54>)
 800111c:	f004 fb5e 	bl	80057dc <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020800 	.word	0x40020800
 800112c:	40020000 	.word	0x40020000
 8001130:	2000020c 	.word	0x2000020c

08001134 <M24C0X_Init>:

	memcpy(p_bytes, thing.bytes, 4);
}

ErrorStatus M24C0X_Init(uint8_t device_addr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_IsDeviceReady(&EEPROM_I2C_HANDLER, device_addr, 5, EEPROM_COM_MAX_DELAY) != HAL_OK)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	b299      	uxth	r1, r3
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	2205      	movs	r2, #5
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <M24C0X_Init+0x2c>)
 8001148:	f004 fff0 	bl	800612c <HAL_I2C_IsDeviceReady>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <M24C0X_Init+0x22>
	{
		/* Return false */
		return ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <M24C0X_Init+0x24>
	}

	return SUCCESS;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001ac 	.word	0x200001ac

08001164 <M24C0X_Write_Byte>:

	return SUCCESS;
}

ErrorStatus M24C0X_Write_Byte(uint8_t device_addr, uint8_t addr, uint8_t data)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
	uint8_t buf[2];
	buf[0] = addr;
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 800117a:	797b      	ldrb	r3, [r7, #5]
 800117c:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(&EEPROM_I2C_HANDLER, device_addr, buf, 2, EEPROM_COM_MAX_DELAY) != HAL_OK)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	b299      	uxth	r1, r3
 8001182:	f107 020c 	add.w	r2, r7, #12
 8001186:	2364      	movs	r3, #100	@ 0x64
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2302      	movs	r3, #2
 800118c:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <M24C0X_Write_Byte+0x44>)
 800118e:	f004 fc9d 	bl	8005acc <HAL_I2C_Master_Transmit>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <M24C0X_Write_Byte+0x38>
		return ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <M24C0X_Write_Byte+0x3a>
	///while (HAL_I2C_IsDeviceReady(&EEPROM_I2C_HANDLER, device_addr << 1, 10, EEPROM_COM_MAX_DELAY) != HAL_OK);


	return SUCCESS;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001ac 	.word	0x200001ac

080011ac <M24C0X_Read_Byte>:

uint8_t M24C0X_Read_Byte(uint8_t device_addr, uint8_t addr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	4603      	mov	r3, r0
 80011b4:	460a      	mov	r2, r1
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[1];
	uint8_t rxbuf[1];

	buf[0] = addr;
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&EEPROM_I2C_HANDLER, device_addr, buf, 1, EEPROM_COM_MAX_DELAY);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	b299      	uxth	r1, r3
 80011c4:	f107 020c 	add.w	r2, r7, #12
 80011c8:	2364      	movs	r3, #100	@ 0x64
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <M24C0X_Read_Byte+0x48>)
 80011d0:	f004 fc7c 	bl	8005acc <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&EEPROM_I2C_HANDLER, device_addr, rxbuf, 1, EEPROM_COM_MAX_DELAY);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	b299      	uxth	r1, r3
 80011d8:	f107 0208 	add.w	r2, r7, #8
 80011dc:	2364      	movs	r3, #100	@ 0x64
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <M24C0X_Read_Byte+0x48>)
 80011e4:	f004 fd70 	bl	8005cc8 <HAL_I2C_Master_Receive>

	return rxbuf[0];
 80011e8:	7a3b      	ldrb	r3, [r7, #8]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001ac 	.word	0x200001ac

080011f8 <M24C0X_Read_Word>:

uint16_t M24C0X_Read_Word(uint8_t device_addr, uint8_t addr) // Processing time 500us
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	4613      	mov	r3, r2
 8001206:	71bb      	strb	r3, [r7, #6]
	uint16_t word;
	uint8_t rx_buf[2];
	uint8_t tx_buf[2];

	tx_buf[0] = addr;
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	723b      	strb	r3, [r7, #8]

	HAL_I2C_Master_Transmit(&EEPROM_I2C_HANDLER, device_addr, tx_buf, 1, EEPROM_COM_MAX_DELAY);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	b299      	uxth	r1, r3
 8001210:	f107 0208 	add.w	r2, r7, #8
 8001214:	2364      	movs	r3, #100	@ 0x64
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <M24C0X_Read_Word+0x58>)
 800121c:	f004 fc56 	bl	8005acc <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&EEPROM_I2C_HANDLER, device_addr, rx_buf, 2, EEPROM_COM_MAX_DELAY);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	b299      	uxth	r1, r3
 8001224:	f107 020c 	add.w	r2, r7, #12
 8001228:	2364      	movs	r3, #100	@ 0x64
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2302      	movs	r3, #2
 800122e:	4808      	ldr	r0, [pc, #32]	@ (8001250 <M24C0X_Read_Word+0x58>)
 8001230:	f004 fd4a 	bl	8005cc8 <HAL_I2C_Master_Receive>

	word = ((uint16_t) rx_buf[0] << 8) | rx_buf[1];
 8001234:	7b3b      	ldrb	r3, [r7, #12]
 8001236:	b21b      	sxth	r3, r3
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	7b7b      	ldrb	r3, [r7, #13]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	81fb      	strh	r3, [r7, #14]

	return word;
 8001246:	89fb      	ldrh	r3, [r7, #14]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001ac 	.word	0x200001ac

08001254 <M24C0X_Write_Word>:

ErrorStatus M24C0X_Write_Word(uint8_t device_addr, uint8_t addr, uint16_t data)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af02      	add	r7, sp, #8
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	460b      	mov	r3, r1
 8001260:	71bb      	strb	r3, [r7, #6]
 8001262:	4613      	mov	r3, r2
 8001264:	80bb      	strh	r3, [r7, #4]
	uint8_t buf[3];
	buf[0] = addr;
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	733b      	strb	r3, [r7, #12]
	buf[1] = data >> 8;
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b29b      	uxth	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	737b      	strb	r3, [r7, #13]
	buf[2] = data & 0xFF;
 8001274:	88bb      	ldrh	r3, [r7, #4]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	73bb      	strb	r3, [r7, #14]

	if (HAL_I2C_Master_Transmit(&EEPROM_I2C_HANDLER, device_addr, buf, 3, EEPROM_COM_MAX_DELAY) != HAL_OK)
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	b299      	uxth	r1, r3
 800127e:	f107 020c 	add.w	r2, r7, #12
 8001282:	2364      	movs	r3, #100	@ 0x64
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2303      	movs	r3, #3
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <M24C0X_Write_Word+0x68>)
 800128a:	f004 fc1f 	bl	8005acc <HAL_I2C_Master_Transmit>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <M24C0X_Write_Word+0x44>
		return ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e00d      	b.n	80012b4 <M24C0X_Write_Word+0x60>
	// Wait until EEPROM is ready (ACK polling)
	while (HAL_I2C_IsDeviceReady(&EEPROM_I2C_HANDLER, device_addr << 1, 10, EEPROM_COM_MAX_DELAY) != HAL_OK);
 8001298:	bf00      	nop
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	b29b      	uxth	r3, r3
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	b299      	uxth	r1, r3
 80012a2:	2364      	movs	r3, #100	@ 0x64
 80012a4:	220a      	movs	r2, #10
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <M24C0X_Write_Word+0x68>)
 80012a8:	f004 ff40 	bl	800612c <HAL_I2C_IsDeviceReady>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f3      	bne.n	800129a <M24C0X_Write_Word+0x46>

	return SUCCESS;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001ac 	.word	0x200001ac

080012c0 <GPIO_Init>:
#include "main.h"
#include "values.h"
#include "gpio.h"

void GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2140      	movs	r1, #64	@ 0x40
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <GPIO_Init+0x14>)
 80012ca:	f004 fa87 	bl	80057dc <HAL_GPIO_WritePin>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020800 	.word	0x40020800

080012d8 <GPIO_Relay_Handler>:

void GPIO_Relay_Handler(uint8_t mode)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d015      	beq.n	8001314 <GPIO_Relay_Handler+0x3c>
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	dc19      	bgt.n	8001320 <GPIO_Relay_Handler+0x48>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d01d      	beq.n	800132c <GPIO_Relay_Handler+0x54>
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d115      	bne.n	8001320 <GPIO_Relay_Handler+0x48>
	{
	case RELAY_MODE_ERROR:

		break;
	case RELAY_MODE_RUN:
		if (actual_frequency_display > 0)
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <GPIO_Relay_Handler+0x60>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <GPIO_Relay_Handler+0x30>
		{
			HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2140      	movs	r1, #64	@ 0x40
 8001300:	480e      	ldr	r0, [pc, #56]	@ (800133c <GPIO_Relay_Handler+0x64>)
 8001302:	f004 fa6b 	bl	80057dc <HAL_GPIO_WritePin>
		}
		else
		{
			HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, RESET);
		}
		break;
 8001306:	e012      	b.n	800132e <GPIO_Relay_Handler+0x56>
			HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2140      	movs	r1, #64	@ 0x40
 800130c:	480b      	ldr	r0, [pc, #44]	@ (800133c <GPIO_Relay_Handler+0x64>)
 800130e:	f004 fa65 	bl	80057dc <HAL_GPIO_WritePin>
		break;
 8001312:	e00c      	b.n	800132e <GPIO_Relay_Handler+0x56>
	case RELAY_MODE_OFF:
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2140      	movs	r1, #64	@ 0x40
 8001318:	4808      	ldr	r0, [pc, #32]	@ (800133c <GPIO_Relay_Handler+0x64>)
 800131a:	f004 fa5f 	bl	80057dc <HAL_GPIO_WritePin>
		break;
 800131e:	e006      	b.n	800132e <GPIO_Relay_Handler+0x56>
	default:
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2140      	movs	r1, #64	@ 0x40
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <GPIO_Relay_Handler+0x64>)
 8001326:	f004 fa59 	bl	80057dc <HAL_GPIO_WritePin>
		break;
 800132a:	e000      	b.n	800132e <GPIO_Relay_Handler+0x56>
		break;
 800132c:	bf00      	nop
	}
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000a08 	.word	0x20000a08
 800133c:	40020800 	.word	0x40020800

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001344:	f002 fd88 	bl	8003e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f81e 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 fb8e 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001350:	f000 fb6c 	bl	8001a2c <MX_DMA_Init>
  MX_ADC1_Init();
 8001354:	f000 f884 	bl	8001460 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001358:	f000 f97c 	bl	8001654 <MX_TIM1_Init>
  MX_I2C3_Init();
 800135c:	f000 f8fc 	bl	8001558 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001360:	f000 fa30 	bl	80017c4 <MX_TIM2_Init>
  MX_SPI3_Init();
 8001364:	f000 f940 	bl	80015e8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001368:	f000 fb36 	bl	80019d8 <MX_USART2_UART_Init>
  MX_TIM12_Init();
 800136c:	f000 facc 	bl	8001908 <MX_TIM12_Init>
  MX_IWDG_Init();
 8001370:	f000 f920 	bl	80015b4 <MX_IWDG_Init>
  MX_TIM14_Init();
 8001374:	f000 fb0c 	bl	8001990 <MX_TIM14_Init>
  MX_TIM4_Init();
 8001378:	f000 fa70 	bl	800185c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	Init();
 800137c:	f000 fc4c 	bl	8001c18 <Init>

	Loop();
 8001380:	f000 fcda 	bl	8001d38 <Loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <main+0x44>

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	@ 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	@ 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f008 fa86 	bl	80098a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <SystemClock_Config+0xd0>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a28      	ldr	r2, [pc, #160]	@ (8001458 <SystemClock_Config+0xd0>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <SystemClock_Config+0xd0>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <SystemClock_Config+0xd4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a22      	ldr	r2, [pc, #136]	@ (800145c <SystemClock_Config+0xd4>)
 80013d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <SystemClock_Config+0xd4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013e4:	2309      	movs	r3, #9
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ee:	2301      	movs	r3, #1
 80013f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013fc:	2308      	movs	r3, #8
 80013fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001400:	23a8      	movs	r3, #168	@ 0xa8
 8001402:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001408:	2304      	movs	r3, #4
 800140a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f005 fb91 	bl	8006b38 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800141c:	f000 fbf6 	bl	8001c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	230f      	movs	r3, #15
 8001422:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2302      	movs	r3, #2
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800142c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001430:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001436:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2105      	movs	r1, #5
 800143e:	4618      	mov	r0, r3
 8001440:	f005 fdf2 	bl	8007028 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800144a:	f000 fbdf 	bl	8001c0c <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3750      	adds	r7, #80	@ 0x50
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001472:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <MX_ADC1_Init+0xf0>)
 8001474:	4a37      	ldr	r2, [pc, #220]	@ (8001554 <MX_ADC1_Init+0xf4>)
 8001476:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001478:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <MX_ADC1_Init+0xf0>)
 800147a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800147e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001480:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <MX_ADC1_Init+0xf0>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001486:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <MX_ADC1_Init+0xf0>)
 8001488:	2201      	movs	r2, #1
 800148a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800148c:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <MX_ADC1_Init+0xf0>)
 800148e:	2200      	movs	r2, #0
 8001490:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001492:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <MX_ADC1_Init+0xf0>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_ADC1_Init+0xf0>)
 800149c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80014a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <MX_ADC1_Init+0xf0>)
 80014a4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <MX_ADC1_Init+0xf0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80014b0:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <MX_ADC1_Init+0xf0>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <MX_ADC1_Init+0xf0>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <MX_ADC1_Init+0xf0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c4:	4822      	ldr	r0, [pc, #136]	@ (8001550 <MX_ADC1_Init+0xf0>)
 80014c6:	f002 fd5d 	bl	8003f84 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80014d0:	f000 fb9c 	bl	8001c0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	481a      	ldr	r0, [pc, #104]	@ (8001550 <MX_ADC1_Init+0xf0>)
 80014e6:	f003 f829 	bl	800453c <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80014f0:	f000 fb8c 	bl	8001c0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4813      	ldr	r0, [pc, #76]	@ (8001550 <MX_ADC1_Init+0xf0>)
 8001502:	f003 f81b 	bl	800453c <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800150c:	f000 fb7e 	bl	8001c0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001510:	2311      	movs	r3, #17
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <MX_ADC1_Init+0xf0>)
 800151e:	f003 f80d 	bl	800453c <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001528:	f000 fb70 	bl	8001c0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800152c:	2304      	movs	r3, #4
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_ADC1_Init+0xf0>)
 800153a:	f002 ffff 	bl	800453c <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001544:	f000 fb62 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000104 	.word	0x20000104
 8001554:	40012000 	.word	0x40012000

08001558 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <MX_I2C3_Init+0x50>)
 800155e:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <MX_I2C3_Init+0x54>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_I2C3_Init+0x50>)
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_I2C3_Init+0x58>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <MX_I2C3_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_I2C3_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_I2C3_Init+0x50>)
 8001576:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <MX_I2C3_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_I2C3_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <MX_I2C3_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_I2C3_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <MX_I2C3_Init+0x50>)
 8001596:	f004 f955 	bl	8005844 <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 fb34 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200001ac 	.word	0x200001ac
 80015ac:	40005c00 	.word	0x40005c00
 80015b0:	00061a80 	.word	0x00061a80

080015b4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <MX_IWDG_Init+0x2c>)
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <MX_IWDG_Init+0x30>)
 80015bc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <MX_IWDG_Init+0x2c>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 499;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MX_IWDG_Init+0x2c>)
 80015c6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80015ca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <MX_IWDG_Init+0x2c>)
 80015ce:	f005 fa61 	bl	8006a94 <HAL_IWDG_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80015d8:	f000 fb18 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000200 	.word	0x20000200
 80015e4:	40003000 	.word	0x40003000

080015e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <MX_SPI3_Init+0x64>)
 80015ee:	4a18      	ldr	r2, [pc, #96]	@ (8001650 <MX_SPI3_Init+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <MX_SPI3_Init+0x64>)
 80015f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_SPI3_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_SPI3_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_SPI3_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_SPI3_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_SPI3_Init+0x64>)
 8001614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001618:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_SPI3_Init+0x64>)
 800161c:	2210      	movs	r2, #16
 800161e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <MX_SPI3_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_SPI3_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <MX_SPI3_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_SPI3_Init+0x64>)
 8001634:	220a      	movs	r2, #10
 8001636:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	@ (800164c <MX_SPI3_Init+0x64>)
 800163a:	f005 ff13 	bl	8007464 <HAL_SPI_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001644:	f000 fae2 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000020c 	.word	0x2000020c
 8001650:	40003c00 	.word	0x40003c00

08001654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b096      	sub	sp, #88	@ 0x58
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2220      	movs	r2, #32
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f008 f90b 	bl	80098a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001692:	4b4a      	ldr	r3, [pc, #296]	@ (80017bc <MX_TIM1_Init+0x168>)
 8001694:	4a4a      	ldr	r2, [pc, #296]	@ (80017c0 <MX_TIM1_Init+0x16c>)
 8001696:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8001698:	4b48      	ldr	r3, [pc, #288]	@ (80017bc <MX_TIM1_Init+0x168>)
 800169a:	2201      	movs	r2, #1
 800169c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b47      	ldr	r3, [pc, #284]	@ (80017bc <MX_TIM1_Init+0x168>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 42000-1;
 80016a4:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <MX_TIM1_Init+0x168>)
 80016a6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80016aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b43      	ldr	r3, [pc, #268]	@ (80017bc <MX_TIM1_Init+0x168>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b2:	4b42      	ldr	r3, [pc, #264]	@ (80017bc <MX_TIM1_Init+0x168>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b8:	4b40      	ldr	r3, [pc, #256]	@ (80017bc <MX_TIM1_Init+0x168>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016be:	483f      	ldr	r0, [pc, #252]	@ (80017bc <MX_TIM1_Init+0x168>)
 80016c0:	f006 f988 	bl	80079d4 <HAL_TIM_Base_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016ca:	f000 fa9f 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016d8:	4619      	mov	r1, r3
 80016da:	4838      	ldr	r0, [pc, #224]	@ (80017bc <MX_TIM1_Init+0x168>)
 80016dc:	f006 ff9c 	bl	8008618 <HAL_TIM_ConfigClockSource>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016e6:	f000 fa91 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ea:	4834      	ldr	r0, [pc, #208]	@ (80017bc <MX_TIM1_Init+0x168>)
 80016ec:	f006 fac2 	bl	8007c74 <HAL_TIM_PWM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016f6:	f000 fa89 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001702:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001706:	4619      	mov	r1, r3
 8001708:	482c      	ldr	r0, [pc, #176]	@ (80017bc <MX_TIM1_Init+0x168>)
 800170a:	f007 fca9 	bl	8009060 <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001714:	f000 fa7a 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001718:	2360      	movs	r3, #96	@ 0x60
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001724:	2308      	movs	r3, #8
 8001726:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001738:	2200      	movs	r2, #0
 800173a:	4619      	mov	r1, r3
 800173c:	481f      	ldr	r0, [pc, #124]	@ (80017bc <MX_TIM1_Init+0x168>)
 800173e:	f006 fea9 	bl	8008494 <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001748:	f000 fa60 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001750:	2204      	movs	r2, #4
 8001752:	4619      	mov	r1, r3
 8001754:	4819      	ldr	r0, [pc, #100]	@ (80017bc <MX_TIM1_Init+0x168>)
 8001756:	f006 fe9d 	bl	8008494 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001760:	f000 fa54 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001768:	2208      	movs	r2, #8
 800176a:	4619      	mov	r1, r3
 800176c:	4813      	ldr	r0, [pc, #76]	@ (80017bc <MX_TIM1_Init+0x168>)
 800176e:	f006 fe91 	bl	8008494 <HAL_TIM_PWM_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001778:	f000 fa48 	bl	8001c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 232;
 8001788:	23e8      	movs	r3, #232	@ 0xe8
 800178a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001794:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4807      	ldr	r0, [pc, #28]	@ (80017bc <MX_TIM1_Init+0x168>)
 80017a0:	f007 fcda 	bl	8009158 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80017aa:	f000 fa2f 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017ae:	4803      	ldr	r0, [pc, #12]	@ (80017bc <MX_TIM1_Init+0x168>)
 80017b0:	f001 fbd0 	bl	8002f54 <HAL_TIM_MspPostInit>

}
 80017b4:	bf00      	nop
 80017b6:	3758      	adds	r7, #88	@ 0x58
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000264 	.word	0x20000264
 80017c0:	40010000 	.word	0x40010000

080017c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017ea:	22a7      	movs	r2, #167	@ 0xa7
 80017ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017f6:	2263      	movs	r2, #99	@ 0x63
 80017f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_TIM2_Init+0x94>)
 8001802:	2280      	movs	r2, #128	@ 0x80
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001806:	4814      	ldr	r0, [pc, #80]	@ (8001858 <MX_TIM2_Init+0x94>)
 8001808:	f006 f8e4 	bl	80079d4 <HAL_TIM_Base_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001812:	f000 f9fb 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4619      	mov	r1, r3
 8001822:	480d      	ldr	r0, [pc, #52]	@ (8001858 <MX_TIM2_Init+0x94>)
 8001824:	f006 fef8 	bl	8008618 <HAL_TIM_ConfigClockSource>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800182e:	f000 f9ed 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001832:	2320      	movs	r3, #32
 8001834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	@ (8001858 <MX_TIM2_Init+0x94>)
 8001840:	f007 fc0e 	bl	8009060 <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800184a:	f000 f9df 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200002ac 	.word	0x200002ac

0800185c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	@ 0x30
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2224      	movs	r2, #36	@ 0x24
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f008 f81c 	bl	80098a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001878:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <MX_TIM4_Init+0xa4>)
 800187a:	4a22      	ldr	r2, [pc, #136]	@ (8001904 <MX_TIM4_Init+0xa8>)
 800187c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <MX_TIM4_Init+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <MX_TIM4_Init+0xa4>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <MX_TIM4_Init+0xa4>)
 800188c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001890:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MX_TIM4_Init+0xa4>)
 8001894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001898:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <MX_TIM4_Init+0xa4>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018b8:	2301      	movs	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	@ (8001900 <MX_TIM4_Init+0xa4>)
 80018cc:	f006 fbbe 	bl	800804c <HAL_TIM_Encoder_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80018d6:	f000 f999 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	@ (8001900 <MX_TIM4_Init+0xa4>)
 80018e8:	f007 fbba 	bl	8009060 <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018f2:	f000 f98b 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3730      	adds	r7, #48	@ 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002f4 	.word	0x200002f4
 8001904:	40000800 	.word	0x40000800

08001908 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800191a:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <MX_TIM12_Init+0x80>)
 800191c:	4a1b      	ldr	r2, [pc, #108]	@ (800198c <MX_TIM12_Init+0x84>)
 800191e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 42000-1;
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <MX_TIM12_Init+0x80>)
 8001922:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8001926:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_TIM12_Init+0x80>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 50;
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <MX_TIM12_Init+0x80>)
 8001930:	2232      	movs	r2, #50	@ 0x32
 8001932:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001934:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_TIM12_Init+0x80>)
 8001936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_TIM12_Init+0x80>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001942:	4811      	ldr	r0, [pc, #68]	@ (8001988 <MX_TIM12_Init+0x80>)
 8001944:	f006 f846 	bl	80079d4 <HAL_TIM_Base_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800194e:	f000 f95d 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001956:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	480a      	ldr	r0, [pc, #40]	@ (8001988 <MX_TIM12_Init+0x80>)
 800195e:	f006 fe5b 	bl	8008618 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8001968:	f000 f950 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim12, TIM_OPMODE_SINGLE) != HAL_OK)
 800196c:	2108      	movs	r1, #8
 800196e:	4806      	ldr	r0, [pc, #24]	@ (8001988 <MX_TIM12_Init+0x80>)
 8001970:	f006 fb12 	bl	8007f98 <HAL_TIM_OnePulse_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 800197a:	f000 f947 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000033c 	.word	0x2000033c
 800198c:	40001800 	.word	0x40001800

08001990 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <MX_TIM14_Init+0x40>)
 8001996:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <MX_TIM14_Init+0x44>)
 8001998:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168-1;
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <MX_TIM14_Init+0x40>)
 800199c:	22a7      	movs	r2, #167	@ 0xa7
 800199e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <MX_TIM14_Init+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <MX_TIM14_Init+0x40>)
 80019a8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80019ac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <MX_TIM14_Init+0x40>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <MX_TIM14_Init+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <MX_TIM14_Init+0x40>)
 80019bc:	f006 f80a 	bl	80079d4 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80019c6:	f000 f921 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000384 	.word	0x20000384
 80019d4:	40002000 	.word	0x40002000

080019d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	@ (8001a28 <MX_USART2_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a10:	f007 fc2d 	bl	800926e <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f8f7 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200003cc 	.word	0x200003cc
 8001a28:	40004400 	.word	0x40004400

08001a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_DMA_Init+0x3c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <MX_DMA_Init+0x3c>)
 8001a3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_DMA_Init+0x3c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2038      	movs	r0, #56	@ 0x38
 8001a54:	f003 f8f7 	bl	8004c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a58:	2038      	movs	r0, #56	@ 0x38
 8001a5a:	f003 f910 	bl	8004c7e <HAL_NVIC_EnableIRQ>

}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	@ 0x30
 8001a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b59      	ldr	r3, [pc, #356]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b55      	ldr	r3, [pc, #340]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a54      	ldr	r2, [pc, #336]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b52      	ldr	r3, [pc, #328]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b47      	ldr	r3, [pc, #284]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a46      	ldr	r2, [pc, #280]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b44      	ldr	r3, [pc, #272]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a38      	ldr	r2, [pc, #224]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <MX_GPIO_Init+0x18c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_RS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2144      	movs	r1, #68	@ 0x44
 8001b2e:	4833      	ldr	r0, [pc, #204]	@ (8001bfc <MX_GPIO_Init+0x190>)
 8001b30:	f003 fe54 	bl	80057dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_RANGE_Pin|DEBUG_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f248 0148 	movw	r1, #32840	@ 0x8048
 8001b3a:	4831      	ldr	r0, [pc, #196]	@ (8001c00 <MX_GPIO_Init+0x194>)
 8001b3c:	f003 fe4e 	bl	80057dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OE_Pin|OC_BOOST_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001b46:	482f      	ldr	r0, [pc, #188]	@ (8001c04 <MX_GPIO_Init+0x198>)
 8001b48:	f003 fe48 	bl	80057dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISP_RS_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = DISP_RS_Pin|RELAY_Pin;
 8001b4c:	2344      	movs	r3, #68	@ 0x44
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4826      	ldr	r0, [pc, #152]	@ (8001bfc <MX_GPIO_Init+0x190>)
 8001b64:	f003 fc86 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_RANGE_Pin DEBUG_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = IN_RANGE_Pin|DEBUG_Pin|SPI_CS_Pin;
 8001b68:	f248 0348 	movw	r3, #32840	@ 0x8048
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481f      	ldr	r0, [pc, #124]	@ (8001c00 <MX_GPIO_Init+0x194>)
 8001b82:	f003 fc77 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMERGENCY_Pin ENCODER_PB_Pin INT_N_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_Pin|ENCODER_PB_Pin|INT_N_Pin;
 8001b86:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	481a      	ldr	r0, [pc, #104]	@ (8001c04 <MX_GPIO_Init+0x198>)
 8001b9c:	f003 fc6a 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : OE_Pin OC_BOOST_Pin */
  GPIO_InitStruct.Pin = OE_Pin|OC_BOOST_Pin;
 8001ba0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4812      	ldr	r0, [pc, #72]	@ (8001c04 <MX_GPIO_Init+0x198>)
 8001bba:	f003 fc5b 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_B_BUF_Pin */
  GPIO_InitStruct.Pin = INPUT_B_BUF_Pin;
 8001bbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INPUT_B_BUF_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480a      	ldr	r0, [pc, #40]	@ (8001bfc <MX_GPIO_Init+0x190>)
 8001bd4:	f003 fc4e 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_C_BUF_Pin INPUT_D_BUF_Pin INPUT_E_BUF_Pin INPUT_A_BUF_Pin */
  GPIO_InitStruct.Pin = INPUT_C_BUF_Pin|INPUT_D_BUF_Pin|INPUT_E_BUF_Pin|INPUT_A_BUF_Pin;
 8001bd8:	230f      	movs	r3, #15
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <MX_GPIO_Init+0x19c>)
 8001bec:	f003 fc42 	bl	8005474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf0:	bf00      	nop
 8001bf2:	3730      	adds	r7, #48	@ 0x30
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020c00 	.word	0x40020c00

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <Error_Handler+0x8>

08001c18 <Init>:
uint32_t main_clk_freq;

// Functions
// Init
void Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
	uint32_t init_delay_counter = HAL_GetTick() + STARTUP_DELAY;
 8001c1e:	f002 f981 	bl	8003f24 <HAL_GetTick>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001c28:	607b      	str	r3, [r7, #4]
	uint32_t display_delay_counter = HAL_GetTick() + 500;
 8001c2a:	f002 f97b 	bl	8003f24 <HAL_GetTick>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001c34:	603b      	str	r3, [r7, #0]
	main_clk_freq = HAL_RCC_GetSysClockFreq();
 8001c36:	f005 fadd 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a37      	ldr	r2, [pc, #220]	@ (8001d1c <Init+0x104>)
 8001c3e:	6013      	str	r3, [r2, #0]

	GPIO_Init();
 8001c40:	f7ff fb3e 	bl	80012c0 <GPIO_Init>

	VFD_Init();
 8001c44:	f001 feba 	bl	80039bc <VFD_Init>

	if (Values_Init() != SUCCESS)
 8001c48:	f001 fc1e 	bl	8003488 <Values_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <Init+0x52>
	{
		Display_Fill(Display_COLOR_BLACK);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 fce8 	bl	8002628 <Display_Fill>
		Display_GotoXY(2, 2);
 8001c58:	2102      	movs	r1, #2
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f000 fd5c 	bl	8002718 <Display_GotoXY>
		Display_Puts("EEPROM ERROR", &Font_7x10, Display_COLOR_WHITE);
 8001c60:	2201      	movs	r2, #1
 8001c62:	492f      	ldr	r1, [pc, #188]	@ (8001d20 <Init+0x108>)
 8001c64:	482f      	ldr	r0, [pc, #188]	@ (8001d24 <Init+0x10c>)
 8001c66:	f000 fdeb 	bl	8002840 <Display_Puts>
	}

	if (TCA9534_Init(TCA9534_ADDR_0, IO_EXPANDER_DIRECTION) != SUCCESS)
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	2040      	movs	r0, #64	@ 0x40
 8001c6e:	f001 fac9 	bl	8003204 <TCA9534_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00e      	beq.n	8001c96 <Init+0x7e>
	{
		Display_Fill(Display_COLOR_BLACK);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f000 fcd5 	bl	8002628 <Display_Fill>
		Display_GotoXY(2, 14);
 8001c7e:	210e      	movs	r1, #14
 8001c80:	2002      	movs	r0, #2
 8001c82:	f000 fd49 	bl	8002718 <Display_GotoXY>
		Display_Puts("IO_EXPANDER ERROR", &Font_7x10, Display_COLOR_WHITE);
 8001c86:	2201      	movs	r2, #1
 8001c88:	4925      	ldr	r1, [pc, #148]	@ (8001d20 <Init+0x108>)
 8001c8a:	4827      	ldr	r0, [pc, #156]	@ (8001d28 <Init+0x110>)
 8001c8c:	f000 fdd8 	bl	8002840 <Display_Puts>
		tca9534_ready = 0;
 8001c90:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <Init+0x114>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
	}

	if (ADC_Init() != SUCCESS)
 8001c96:	f7ff f91f 	bl	8000ed8 <ADC_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <Init+0xa0>
	{
		Display_Fill(Display_COLOR_BLACK);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 fcc1 	bl	8002628 <Display_Fill>
		Display_GotoXY(2, 26);
 8001ca6:	211a      	movs	r1, #26
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f000 fd35 	bl	8002718 <Display_GotoXY>
		Display_Puts("ADC_REF ERROR", &Font_7x10, Display_COLOR_WHITE);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	491b      	ldr	r1, [pc, #108]	@ (8001d20 <Init+0x108>)
 8001cb2:	481f      	ldr	r0, [pc, #124]	@ (8001d30 <Init+0x118>)
 8001cb4:	f000 fdc4 	bl	8002840 <Display_Puts>
	}

	do
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001cb8:	481e      	ldr	r0, [pc, #120]	@ (8001d34 <Init+0x11c>)
 8001cba:	f004 ff2d 	bl	8006b18 <HAL_IWDG_Refresh>
		if (display_delay_counter < HAL_GetTick())
 8001cbe:	f002 f931 	bl	8003f24 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d201      	bcs.n	8001cce <Init+0xb6>
		{
			display_delay_counter = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
		}
	} while (display_delay_counter);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f1      	bne.n	8001cb8 <Init+0xa0>

	Display_Init();
 8001cd4:	f000 fc74 	bl	80025c0 <Display_Init>
	Menu_Init();
 8001cd8:	f000 f8f6 	bl	8001ec8 <Menu_Init>
	Display_UpdateScreen();
 8001cdc:	f000 fc9a 	bl	8002614 <Display_UpdateScreen>

	do
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001ce0:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <Init+0x11c>)
 8001ce2:	f004 ff19 	bl	8006b18 <HAL_IWDG_Refresh>
		if (init_delay_counter < HAL_GetTick())
 8001ce6:	f002 f91d 	bl	8003f24 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d201      	bcs.n	8001cf6 <Init+0xde>
		{
			init_delay_counter = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
		}
	} while (init_delay_counter);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f1      	bne.n	8001ce0 <Init+0xc8>

	// Clear display
	Display_Clear();
 8001cfc:	f000 ff16 	bl	8002b2c <Display_Clear>

	if (tca9534_ready)
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <Init+0x114>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <Init+0xfc>
	{
		Write_4LED(0,0,1,0);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f001 fb68 	bl	80033e4 <Write_4LED>
	}
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000414 	.word	0x20000414
 8001d20:	20000004 	.word	0x20000004
 8001d24:	0800b240 	.word	0x0800b240
 8001d28:	0800b250 	.word	0x0800b250
 8001d2c:	2000001c 	.word	0x2000001c
 8001d30:	0800b264 	.word	0x0800b264
 8001d34:	20000200 	.word	0x20000200

08001d38 <Loop>:

// Main Loop
void Loop(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
	// Values
	uint8_t menu_mode_enabled = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
	uint8_t pb_pressed_menu_old = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73bb      	strb	r3, [r7, #14]
	uint8_t set_direction = SET_STOP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	737b      	strb	r3, [r7, #13]
	uint16_t pb_menu_counter = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	817b      	strh	r3, [r7, #10]
	uint32_t tick_counter = HAL_GetTick() + 100;
 8001d4e:	f002 f8e9 	bl	8003f24 <HAL_GetTick>
 8001d52:	4603      	mov	r3, r0
 8001d54:	3364      	adds	r3, #100	@ 0x64
 8001d56:	607b      	str	r3, [r7, #4]

	// Main While Loop
	while (1)
	{
		// Refresh IWDG Timer
		HAL_IWDG_Refresh(&hiwdg);
 8001d58:	484a      	ldr	r0, [pc, #296]	@ (8001e84 <Loop+0x14c>)
 8001d5a:	f004 fedd 	bl	8006b18 <HAL_IWDG_Refresh>

		// VFD Handler
		VFD_Handler(set_frequency, set_direction);
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <Loop+0x150>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	7b7a      	ldrb	r2, [r7, #13]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 fe3e 	bl	80039e8 <VFD_Handler>

		// IO Expander Routine
		if (tca9534_ready)
 8001d6c:	4b47      	ldr	r3, [pc, #284]	@ (8001e8c <Loop+0x154>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05e      	beq.n	8001e32 <Loop+0xfa>
		{
			Read_PB_All();
 8001d74:	f001 fad8 	bl	8003328 <Read_PB_All>

			if(pb_pressed_stop || emergency_off)
 8001d78:	4b45      	ldr	r3, [pc, #276]	@ (8001e90 <Loop+0x158>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d103      	bne.n	8001d88 <Loop+0x50>
 8001d80:	4b44      	ldr	r3, [pc, #272]	@ (8001e94 <Loop+0x15c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <Loop+0x68>
			{
				Write_4LED(0, 0, 1, menu_mode_enabled);
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f001 fb28 	bl	80033e4 <Write_4LED>
				motor_status = MOTOR_STATE_STOP;
 8001d94:	4b40      	ldr	r3, [pc, #256]	@ (8001e98 <Loop+0x160>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
				set_direction = SET_STOP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	737b      	strb	r3, [r7, #13]
 8001d9e:	e01d      	b.n	8001ddc <Loop+0xa4>
			}
			else
			{
				if (pb_pressed_fwd)
 8001da0:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <Loop+0x164>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <Loop+0x86>
				{
					Write_4LED(1, 0, 0, menu_mode_enabled);
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	2001      	movs	r0, #1
 8001db0:	f001 fb18 	bl	80033e4 <Write_4LED>
					motor_status = MOTOR_STATE_FWD;
 8001db4:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <Loop+0x160>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
					set_direction = SET_DIR_FWD;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	737b      	strb	r3, [r7, #13]
				}
				if (pb_pressed_rev)
 8001dbe:	4b38      	ldr	r3, [pc, #224]	@ (8001ea0 <Loop+0x168>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <Loop+0xa4>
				{
					Write_4LED(0, 1, 0, menu_mode_enabled);
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f001 fb09 	bl	80033e4 <Write_4LED>
					motor_status = MOTOR_STATE_REV;
 8001dd2:	4b31      	ldr	r3, [pc, #196]	@ (8001e98 <Loop+0x160>)
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	701a      	strb	r2, [r3, #0]
					set_direction = SET_DIR_REV;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	737b      	strb	r3, [r7, #13]
				}
			}

			if(pb_pressed_menu)
 8001ddc:	4b31      	ldr	r3, [pc, #196]	@ (8001ea4 <Loop+0x16c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d014      	beq.n	8001e0e <Loop+0xd6>
			{
				if(pb_pressed_menu != pb_pressed_menu_old)
 8001de4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea4 <Loop+0x16c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	7bba      	ldrb	r2, [r7, #14]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d011      	beq.n	8001e12 <Loop+0xda>
				{
					menu_mode_enabled = !menu_mode_enabled;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	73fb      	strb	r3, [r7, #15]
					Write_LED(menu_mode_enabled, LED_MENU);
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2107      	movs	r1, #7
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 fad1 	bl	80033a8 <Write_LED>
					pb_menu_counter++;
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	817b      	strh	r3, [r7, #10]
 8001e0c:	e001      	b.n	8001e12 <Loop+0xda>
					}
				}
			}
			else
			{
				pb_menu_counter = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	817b      	strh	r3, [r7, #10]
			}

			pb_pressed_menu_old = pb_pressed_menu;
 8001e12:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <Loop+0x16c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	73bb      	strb	r3, [r7, #14]

			pb_pressed_fwd = 0;
 8001e18:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <Loop+0x164>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
			pb_pressed_rev = 0;
 8001e1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <Loop+0x168>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
			pb_pressed_stop = 0;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <Loop+0x158>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
			pb_pressed_menu = 0;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <Loop+0x16c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e008      	b.n	8001e44 <Loop+0x10c>

		}
		else
		{
			if (emergency_off)
 8001e32:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <Loop+0x15c>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <Loop+0x10c>
			{
				motor_status = MOTOR_STATE_STOP;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <Loop+0x160>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
				set_direction = SET_STOP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	737b      	strb	r3, [r7, #13]
			}
		}

		GPIO_Relay_Handler(RELAY_MODE_OFF);
 8001e44:	2002      	movs	r0, #2
 8001e46:	f7ff fa47 	bl	80012d8 <GPIO_Relay_Handler>

		Menu_Encoder_Handler(menu_mode_enabled);
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 f867 	bl	8001f20 <Menu_Encoder_Handler>

		Menu_Handler(menu_mode_enabled);
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f903 	bl	8002060 <Menu_Handler>

		Display_UpdateScreen();
 8001e5a:	f000 fbdb 	bl	8002614 <Display_UpdateScreen>

		Diag_Check_Reference();
 8001e5e:	f7ff f8ab 	bl	8000fb8 <Diag_Check_Reference>

		do
		{
			if (tick_counter < HAL_GetTick())
 8001e62:	f002 f85f 	bl	8003f24 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d201      	bcs.n	8001e72 <Loop+0x13a>
			{
				tick_counter = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
			}
		} while (tick_counter);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f4      	bne.n	8001e62 <Loop+0x12a>

		tick_counter = HAL_GetTick() + 100;
 8001e78:	f002 f854 	bl	8003f24 <HAL_GetTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	3364      	adds	r3, #100	@ 0x64
 8001e80:	607b      	str	r3, [r7, #4]
		HAL_IWDG_Refresh(&hiwdg);
 8001e82:	e769      	b.n	8001d58 <Loop+0x20>
 8001e84:	20000200 	.word	0x20000200
 8001e88:	20000a10 	.word	0x20000a10
 8001e8c:	2000001c 	.word	0x2000001c
 8001e90:	20000a0d 	.word	0x20000a0d
 8001e94:	20000a0a 	.word	0x20000a0a
 8001e98:	20000838 	.word	0x20000838
 8001e9c:	20000a0b 	.word	0x20000a0b
 8001ea0:	20000a0c 	.word	0x20000a0c
 8001ea4:	20000a0e 	.word	0x20000a0e

08001ea8 <Encoder_Init>:

// Local function prototypes

// Functions
void Encoder_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	// IMPORTANT: Use Encoder Mode TI1 in CubeMX!
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001eac:	213c      	movs	r1, #60	@ 0x3c
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <Encoder_Init+0x1c>)
 8001eb0:	f006 f972 	bl	8008198 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim4, ENCODER_INIT_COUNTER_VAL);
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <Encoder_Init+0x1c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200002f4 	.word	0x200002f4

08001ec8 <Menu_Init>:

void Menu_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	Encoder_Init();
 8001ecc:	f7ff ffec 	bl	8001ea8 <Encoder_Init>
	Display_GotoXY(2, 2);
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f000 fc20 	bl	8002718 <Display_GotoXY>
	Display_Puts("Mini VFD", &Font_7x10, Display_COLOR_WHITE);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <Menu_Init+0x44>)
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <Menu_Init+0x48>)
 8001ede:	f000 fcaf 	bl	8002840 <Display_Puts>
	Display_GotoXY(2, 14);
 8001ee2:	210e      	movs	r1, #14
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	f000 fc17 	bl	8002718 <Display_GotoXY>
	Display_Puts("FW Ver: 1.0.0", &Font_7x10, Display_COLOR_WHITE);
 8001eea:	2201      	movs	r2, #1
 8001eec:	4907      	ldr	r1, [pc, #28]	@ (8001f0c <Menu_Init+0x44>)
 8001eee:	4809      	ldr	r0, [pc, #36]	@ (8001f14 <Menu_Init+0x4c>)
 8001ef0:	f000 fca6 	bl	8002840 <Display_Puts>
	Display_GotoXY(2, 32);
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	f000 fc0e 	bl	8002718 <Display_GotoXY>
	Display_Puts("ADAM+", &Font_16x26, Display_COLOR_WHITE);
 8001efc:	2201      	movs	r2, #1
 8001efe:	4906      	ldr	r1, [pc, #24]	@ (8001f18 <Menu_Init+0x50>)
 8001f00:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <Menu_Init+0x54>)
 8001f02:	f000 fc9d 	bl	8002840 <Display_Puts>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000004 	.word	0x20000004
 8001f10:	0800b274 	.word	0x0800b274
 8001f14:	0800b280 	.word	0x0800b280
 8001f18:	20000014 	.word	0x20000014
 8001f1c:	0800b290 	.word	0x0800b290

08001f20 <Menu_Encoder_Handler>:

void Menu_Encoder_Handler(uint8_t encoder_mode)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	static int32_t encoder_set_freq = 0;
	static uint32_t encoder_counter = ENCODER_INIT_COUNTER_VAL;
	static uint32_t encoder_counter_old = ENCODER_INIT_COUNTER_VAL;

	// Poll encoder value
	encoder_counter = __HAL_TIM_GET_COUNTER(&htim4);
 8001f2a:	4b44      	ldr	r3, [pc, #272]	@ (800203c <Menu_Encoder_Handler+0x11c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	4a43      	ldr	r2, [pc, #268]	@ (8002040 <Menu_Encoder_Handler+0x120>)
 8001f32:	6013      	str	r3, [r2, #0]

	// Calculate difference from the old value
	int32_t difference = encoder_counter - encoder_counter_old;
 8001f34:	4b42      	ldr	r3, [pc, #264]	@ (8002040 <Menu_Encoder_Handler+0x120>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b42      	ldr	r3, [pc, #264]	@ (8002044 <Menu_Encoder_Handler+0x124>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	60fb      	str	r3, [r7, #12]

	// Accumulate difference
	encoder_accumulator += difference;
 8001f40:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <Menu_Encoder_Handler+0x128>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a3f      	ldr	r2, [pc, #252]	@ (8002048 <Menu_Encoder_Handler+0x128>)
 8001f4a:	6013      	str	r3, [r2, #0]

	// Incremental accumulator
    while (encoder_accumulator >= 2) {
 8001f4c:	e016      	b.n	8001f7c <Menu_Encoder_Handler+0x5c>
    	switch (encoder_mode)
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <Menu_Encoder_Handler+0x3a>
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d006      	beq.n	8001f66 <Menu_Encoder_Handler+0x46>
 8001f58:	e00b      	b.n	8001f72 <Menu_Encoder_Handler+0x52>
    	{
    	case 0: // encoder_set_freq
    		encoder_set_freq++;
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a3a      	ldr	r2, [pc, #232]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8001f62:	6013      	str	r3, [r2, #0]
    		break;
 8001f64:	e005      	b.n	8001f72 <Menu_Encoder_Handler+0x52>
    	case 1: // encoder_setup
    		encoder_setup++;
 8001f66:	4b3a      	ldr	r3, [pc, #232]	@ (8002050 <Menu_Encoder_Handler+0x130>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4a38      	ldr	r2, [pc, #224]	@ (8002050 <Menu_Encoder_Handler+0x130>)
 8001f6e:	6013      	str	r3, [r2, #0]
    		break;
 8001f70:	bf00      	nop
    	}
        encoder_accumulator -= 2;
 8001f72:	4b35      	ldr	r3, [pc, #212]	@ (8002048 <Menu_Encoder_Handler+0x128>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3b02      	subs	r3, #2
 8001f78:	4a33      	ldr	r2, [pc, #204]	@ (8002048 <Menu_Encoder_Handler+0x128>)
 8001f7a:	6013      	str	r3, [r2, #0]
    while (encoder_accumulator >= 2) {
 8001f7c:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <Menu_Encoder_Handler+0x128>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	dce4      	bgt.n	8001f4e <Menu_Encoder_Handler+0x2e>
    }

    // Decremental accumulator
    while (encoder_accumulator <= -2) {
 8001f84:	e016      	b.n	8001fb4 <Menu_Encoder_Handler+0x94>
    	switch (encoder_mode)
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <Menu_Encoder_Handler+0x72>
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d006      	beq.n	8001f9e <Menu_Encoder_Handler+0x7e>
 8001f90:	e00b      	b.n	8001faa <Menu_Encoder_Handler+0x8a>
    	{
    	case 0: // encoder_set_freq
    		encoder_set_freq--;
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	4a2c      	ldr	r2, [pc, #176]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8001f9a:	6013      	str	r3, [r2, #0]
    		break;
 8001f9c:	e005      	b.n	8001faa <Menu_Encoder_Handler+0x8a>
    	case 1: // encoder_setup
    		encoder_setup--;
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002050 <Menu_Encoder_Handler+0x130>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8002050 <Menu_Encoder_Handler+0x130>)
 8001fa6:	6013      	str	r3, [r2, #0]
    		break;
 8001fa8:	bf00      	nop
    	}
        encoder_accumulator += 2;
 8001faa:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <Menu_Encoder_Handler+0x128>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	4a25      	ldr	r2, [pc, #148]	@ (8002048 <Menu_Encoder_Handler+0x128>)
 8001fb2:	6013      	str	r3, [r2, #0]
    while (encoder_accumulator <= -2) {
 8001fb4:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <Menu_Encoder_Handler+0x128>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	dbe3      	blt.n	8001f86 <Menu_Encoder_Handler+0x66>
    }
    encoder_counter_old = encoder_counter;
 8001fbe:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <Menu_Encoder_Handler+0x120>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a20      	ldr	r2, [pc, #128]	@ (8002044 <Menu_Encoder_Handler+0x124>)
 8001fc4:	6013      	str	r3, [r2, #0]

    // Check min/ max values on encoder_set_freq
	if(encoder_set_freq > param[MENU_P03].parameter_val)
 8001fc6:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <Menu_Encoder_Handler+0x134>)
 8001fc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	da05      	bge.n	8001fe2 <Menu_Encoder_Handler+0xc2>
	{
		encoder_set_freq = param[MENU_P03].parameter_val;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <Menu_Encoder_Handler+0x134>)
 8001fd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8001fe0:	601a      	str	r2, [r3, #0]
	}
	if(encoder_set_freq < (param[MENU_P02].parameter_val)) // min freq
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <Menu_Encoder_Handler+0x134>)
 8001fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b18      	ldr	r3, [pc, #96]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dd05      	ble.n	8001ffe <Menu_Encoder_Handler+0xde>
	{
		encoder_set_freq = param[MENU_P02].parameter_val;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <Menu_Encoder_Handler+0x134>)
 8001ff4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8001ffc:	601a      	str	r2, [r3, #0]
	}
	set_frequency = encoder_set_freq;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	@ (800204c <Menu_Encoder_Handler+0x12c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <Menu_Encoder_Handler+0x138>)
 8002006:	801a      	strh	r2, [r3, #0]

	// Check min/ max values on encoder_setup
	if (encoder_setup > maximal_encoder_value)
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <Menu_Encoder_Handler+0x13c>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <Menu_Encoder_Handler+0x130>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	da04      	bge.n	8002020 <Menu_Encoder_Handler+0x100>
	{
		encoder_setup = maximal_encoder_value;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <Menu_Encoder_Handler+0x13c>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <Menu_Encoder_Handler+0x130>)
 800201e:	601a      	str	r2, [r3, #0]
	}
	if (encoder_setup < 1)
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <Menu_Encoder_Handler+0x130>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dc02      	bgt.n	800202e <Menu_Encoder_Handler+0x10e>
	{
		encoder_setup = 0;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <Menu_Encoder_Handler+0x130>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
	}
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	200002f4 	.word	0x200002f4
 8002040:	20000020 	.word	0x20000020
 8002044:	20000024 	.word	0x20000024
 8002048:	20000420 	.word	0x20000420
 800204c:	20000424 	.word	0x20000424
 8002050:	2000041c 	.word	0x2000041c
 8002054:	20000858 	.word	0x20000858
 8002058:	20000a10 	.word	0x20000a10
 800205c:	20000418 	.word	0x20000418

08002060 <Menu_Handler>:


// This function is the main menu handler function of the display, Input parameter is the menu pushbutton
void Menu_Handler(uint8_t menu_mode_enabled)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	@ 0x30
 8002064:	af02      	add	r7, sp, #8
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
	static uint8_t pb_ok_value;
	static uint8_t pb_ok_value_old;
	static uint8_t mode = MENU_MODE_RUN;
	static uint8_t selected_parameter = 0;

	pb_ok_value = HAL_GPIO_ReadPin(ENCODER_PB_GPIO_Port, ENCODER_PB_Pin);
 800206a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800206e:	4859      	ldr	r0, [pc, #356]	@ (80021d4 <Menu_Handler+0x174>)
 8002070:	f003 fb9c 	bl	80057ac <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	4b57      	ldr	r3, [pc, #348]	@ (80021d8 <Menu_Handler+0x178>)
 800207a:	701a      	strb	r2, [r3, #0]

	if(menu_mode_enabled == MENU_MODE_RUN)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <Menu_Handler+0x2a>
	{
		mode = MENU_MODE_RUN;
 8002082:	4b56      	ldr	r3, [pc, #344]	@ (80021dc <Menu_Handler+0x17c>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e006      	b.n	8002098 <Menu_Handler+0x38>
	}
	else
	{
		if(previous_mode == MENU_MODE_RUN)
 800208a:	4b55      	ldr	r3, [pc, #340]	@ (80021e0 <Menu_Handler+0x180>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <Menu_Handler+0x38>
		{
			mode = MENU_MODE_MENU;
 8002092:	4b52      	ldr	r3, [pc, #328]	@ (80021dc <Menu_Handler+0x17c>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
		}
	}

	switch (mode)
 8002098:	4b50      	ldr	r3, [pc, #320]	@ (80021dc <Menu_Handler+0x17c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b03      	cmp	r3, #3
 800209e:	f200 8279 	bhi.w	8002594 <Menu_Handler+0x534>
 80020a2:	a201      	add	r2, pc, #4	@ (adr r2, 80020a8 <Menu_Handler+0x48>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	08002221 	.word	0x08002221
 80020b0:	080023bd 	.word	0x080023bd
 80020b4:	0800255f 	.word	0x0800255f
	{
	case MENU_MODE_RUN:
		if (previous_mode != MENU_MODE_RUN)
 80020b8:	4b49      	ldr	r3, [pc, #292]	@ (80021e0 <Menu_Handler+0x180>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d033      	beq.n	8002128 <Menu_Handler+0xc8>
		{
			encoder_setup = 0;
 80020c0:	4b48      	ldr	r3, [pc, #288]	@ (80021e4 <Menu_Handler+0x184>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
			previous_mode = MENU_MODE_RUN;
 80020c6:	4b46      	ldr	r3, [pc, #280]	@ (80021e0 <Menu_Handler+0x180>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
			Display_Clear();
 80020cc:	f000 fd2e 	bl	8002b2c <Display_Clear>
			Display_GotoXY(1, 1);
 80020d0:	2101      	movs	r1, #1
 80020d2:	2001      	movs	r0, #1
 80020d4:	f000 fb20 	bl	8002718 <Display_GotoXY>
			Display_Puts("Freq:", &Font_11x18, Display_COLOR_WHITE);
 80020d8:	2201      	movs	r2, #1
 80020da:	4943      	ldr	r1, [pc, #268]	@ (80021e8 <Menu_Handler+0x188>)
 80020dc:	4843      	ldr	r0, [pc, #268]	@ (80021ec <Menu_Handler+0x18c>)
 80020de:	f000 fbaf 	bl	8002840 <Display_Puts>
			Display_GotoXY(1, 25);
 80020e2:	2119      	movs	r1, #25
 80020e4:	2001      	movs	r0, #1
 80020e6:	f000 fb17 	bl	8002718 <Display_GotoXY>
			Display_Puts("Set.Fq:", &Font_7x10, Display_COLOR_WHITE);
 80020ea:	2201      	movs	r2, #1
 80020ec:	4940      	ldr	r1, [pc, #256]	@ (80021f0 <Menu_Handler+0x190>)
 80020ee:	4841      	ldr	r0, [pc, #260]	@ (80021f4 <Menu_Handler+0x194>)
 80020f0:	f000 fba6 	bl	8002840 <Display_Puts>
			Display_GotoXY(1, 37);
 80020f4:	2125      	movs	r1, #37	@ 0x25
 80020f6:	2001      	movs	r0, #1
 80020f8:	f000 fb0e 	bl	8002718 <Display_GotoXY>
			Display_Puts("Status:", &Font_7x10, Display_COLOR_WHITE);
 80020fc:	2201      	movs	r2, #1
 80020fe:	493c      	ldr	r1, [pc, #240]	@ (80021f0 <Menu_Handler+0x190>)
 8002100:	483d      	ldr	r0, [pc, #244]	@ (80021f8 <Menu_Handler+0x198>)
 8002102:	f000 fb9d 	bl	8002840 <Display_Puts>
			Display_GotoXY(1, 49);
 8002106:	2131      	movs	r1, #49	@ 0x31
 8002108:	2001      	movs	r0, #1
 800210a:	f000 fb05 	bl	8002718 <Display_GotoXY>
			Display_Puts("V Bus:", &Font_7x10, Display_COLOR_WHITE);
 800210e:	2201      	movs	r2, #1
 8002110:	4937      	ldr	r1, [pc, #220]	@ (80021f0 <Menu_Handler+0x190>)
 8002112:	483a      	ldr	r0, [pc, #232]	@ (80021fc <Menu_Handler+0x19c>)
 8002114:	f000 fb94 	bl	8002840 <Display_Puts>
			Display_DrawLine(0, 21, 127, 21, Display_COLOR_WHITE);
 8002118:	2301      	movs	r3, #1
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2315      	movs	r3, #21
 800211e:	227f      	movs	r2, #127	@ 0x7f
 8002120:	2115      	movs	r1, #21
 8002122:	2000      	movs	r0, #0
 8002124:	f000 fbb1 	bl	800288a <Display_DrawLine>
		}

		Print_Float(actual_frequency_display, &Font_11x18, 60, 1);
 8002128:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <Menu_Handler+0x1a0>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002134:	2201      	movs	r2, #1
 8002136:	213c      	movs	r1, #60	@ 0x3c
 8002138:	482b      	ldr	r0, [pc, #172]	@ (80021e8 <Menu_Handler+0x188>)
 800213a:	eeb0 0a67 	vmov.f32	s0, s15
 800213e:	f000 fc9f 	bl	8002a80 <Print_Float>

		Print_Float(set_frequency, &Font_7x10, 52, 25);
 8002142:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <Menu_Handler+0x1a4>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214e:	2219      	movs	r2, #25
 8002150:	2134      	movs	r1, #52	@ 0x34
 8002152:	4827      	ldr	r0, [pc, #156]	@ (80021f0 <Menu_Handler+0x190>)
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	f000 fc92 	bl	8002a80 <Print_Float>

		//Print_Float(bus_voltage_meas, &Font_7x10, 95, 50);

		Display_GotoXY(52, 37);
 800215c:	2125      	movs	r1, #37	@ 0x25
 800215e:	2034      	movs	r0, #52	@ 0x34
 8002160:	f000 fada 	bl	8002718 <Display_GotoXY>
		switch (motor_status)
 8002164:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <Menu_Handler+0x1a8>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d823      	bhi.n	80021b4 <Menu_Handler+0x154>
 800216c:	a201      	add	r2, pc, #4	@ (adr r2, 8002174 <Menu_Handler+0x114>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002185 	.word	0x08002185
 8002178:	08002191 	.word	0x08002191
 800217c:	0800219d 	.word	0x0800219d
 8002180:	080021a9 	.word	0x080021a9
		{
		case MOTOR_STATE_STOP:
			Display_Puts("Stop   ", &Font_7x10, Display_COLOR_WHITE);
 8002184:	2201      	movs	r2, #1
 8002186:	491a      	ldr	r1, [pc, #104]	@ (80021f0 <Menu_Handler+0x190>)
 8002188:	4820      	ldr	r0, [pc, #128]	@ (800220c <Menu_Handler+0x1ac>)
 800218a:	f000 fb59 	bl	8002840 <Display_Puts>
			break;
 800218e:	e011      	b.n	80021b4 <Menu_Handler+0x154>
		case MOTOR_STATE_FWD:
			Display_Puts("Forward", &Font_7x10, Display_COLOR_WHITE);
 8002190:	2201      	movs	r2, #1
 8002192:	4917      	ldr	r1, [pc, #92]	@ (80021f0 <Menu_Handler+0x190>)
 8002194:	481e      	ldr	r0, [pc, #120]	@ (8002210 <Menu_Handler+0x1b0>)
 8002196:	f000 fb53 	bl	8002840 <Display_Puts>
			break;
 800219a:	e00b      	b.n	80021b4 <Menu_Handler+0x154>
		case MOTOR_STATE_REV:
			Display_Puts("Reverse", &Font_7x10, Display_COLOR_WHITE);
 800219c:	2201      	movs	r2, #1
 800219e:	4914      	ldr	r1, [pc, #80]	@ (80021f0 <Menu_Handler+0x190>)
 80021a0:	481c      	ldr	r0, [pc, #112]	@ (8002214 <Menu_Handler+0x1b4>)
 80021a2:	f000 fb4d 	bl	8002840 <Display_Puts>
			break;
 80021a6:	e005      	b.n	80021b4 <Menu_Handler+0x154>
		case MOTOR_STATE_ERROR:
			Display_Puts("Error  ", &Font_7x10, Display_COLOR_WHITE);
 80021a8:	2201      	movs	r2, #1
 80021aa:	4911      	ldr	r1, [pc, #68]	@ (80021f0 <Menu_Handler+0x190>)
 80021ac:	481a      	ldr	r0, [pc, #104]	@ (8002218 <Menu_Handler+0x1b8>)
 80021ae:	f000 fb47 	bl	8002840 <Display_Puts>
			break;
 80021b2:	bf00      	nop
		}

		Print_Float(bus_voltage_meas, &Font_7x10, 52, 49);
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <Menu_Handler+0x1bc>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	2231      	movs	r2, #49	@ 0x31
 80021bc:	2134      	movs	r1, #52	@ 0x34
 80021be:	480c      	ldr	r0, [pc, #48]	@ (80021f0 <Menu_Handler+0x190>)
 80021c0:	eeb0 0a67 	vmov.f32	s0, s15
 80021c4:	f000 fc5c 	bl	8002a80 <Print_Float>
		Display_Putc('V', &Font_7x10, Display_COLOR_WHITE);
 80021c8:	2201      	movs	r2, #1
 80021ca:	4909      	ldr	r1, [pc, #36]	@ (80021f0 <Menu_Handler+0x190>)
 80021cc:	2056      	movs	r0, #86	@ 0x56
 80021ce:	f000 fab9 	bl	8002744 <Display_Putc>
		break;
 80021d2:	e1e6      	b.n	80025a2 <Menu_Handler+0x542>
 80021d4:	40020400 	.word	0x40020400
 80021d8:	20000428 	.word	0x20000428
 80021dc:	20000429 	.word	0x20000429
 80021e0:	20000028 	.word	0x20000028
 80021e4:	2000041c 	.word	0x2000041c
 80021e8:	2000000c 	.word	0x2000000c
 80021ec:	0800b298 	.word	0x0800b298
 80021f0:	20000004 	.word	0x20000004
 80021f4:	0800b2a0 	.word	0x0800b2a0
 80021f8:	0800b2a8 	.word	0x0800b2a8
 80021fc:	0800b2b0 	.word	0x0800b2b0
 8002200:	20000a08 	.word	0x20000a08
 8002204:	20000a10 	.word	0x20000a10
 8002208:	20000838 	.word	0x20000838
 800220c:	0800b2b8 	.word	0x0800b2b8
 8002210:	0800b2c0 	.word	0x0800b2c0
 8002214:	0800b2c8 	.word	0x0800b2c8
 8002218:	0800b2d0 	.word	0x0800b2d0
 800221c:	2000083c 	.word	0x2000083c

	case MENU_MODE_MENU:
		char buf[30];

		if (previous_mode != MENU_MODE_MENU)
 8002220:	4baf      	ldr	r3, [pc, #700]	@ (80024e0 <Menu_Handler+0x480>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d04e      	beq.n	80022c6 <Menu_Handler+0x266>
		{
			previous_mode = MENU_MODE_MENU;
 8002228:	4bad      	ldr	r3, [pc, #692]	@ (80024e0 <Menu_Handler+0x480>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
			previous_encoder = 0xFFFF;
 800222e:	4bad      	ldr	r3, [pc, #692]	@ (80024e4 <Menu_Handler+0x484>)
 8002230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002234:	801a      	strh	r2, [r3, #0]
			maximal_encoder_value = 17;
 8002236:	4bac      	ldr	r3, [pc, #688]	@ (80024e8 <Menu_Handler+0x488>)
 8002238:	2211      	movs	r2, #17
 800223a:	801a      	strh	r2, [r3, #0]

			// Graphics + text
			Display_Clear();
 800223c:	f000 fc76 	bl	8002b2c <Display_Clear>
			Display_DrawLine(0, 0, 127, 0, Display_COLOR_WHITE);
 8002240:	2301      	movs	r3, #1
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2300      	movs	r3, #0
 8002246:	227f      	movs	r2, #127	@ 0x7f
 8002248:	2100      	movs	r1, #0
 800224a:	2000      	movs	r0, #0
 800224c:	f000 fb1d 	bl	800288a <Display_DrawLine>
			Display_DrawLine(0, 14, 128, 14, Display_COLOR_WHITE);
 8002250:	2301      	movs	r3, #1
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	230e      	movs	r3, #14
 8002256:	2280      	movs	r2, #128	@ 0x80
 8002258:	210e      	movs	r1, #14
 800225a:	2000      	movs	r0, #0
 800225c:	f000 fb15 	bl	800288a <Display_DrawLine>
			Display_DrawLine(32, 0, 32, 14, Display_COLOR_WHITE);
 8002260:	2301      	movs	r3, #1
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	230e      	movs	r3, #14
 8002266:	2220      	movs	r2, #32
 8002268:	2100      	movs	r1, #0
 800226a:	2020      	movs	r0, #32
 800226c:	f000 fb0d 	bl	800288a <Display_DrawLine>
			Display_DrawLine(0, 0, 0, 14, Display_COLOR_WHITE);
 8002270:	2301      	movs	r3, #1
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	230e      	movs	r3, #14
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2000      	movs	r0, #0
 800227c:	f000 fb05 	bl	800288a <Display_DrawLine>
			Display_DrawLine(127, 0, 127, 14, Display_COLOR_WHITE);
 8002280:	2301      	movs	r3, #1
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	230e      	movs	r3, #14
 8002286:	227f      	movs	r2, #127	@ 0x7f
 8002288:	2100      	movs	r1, #0
 800228a:	207f      	movs	r0, #127	@ 0x7f
 800228c:	f000 fafd 	bl	800288a <Display_DrawLine>
			Display_GotoXY(9, 20);
 8002290:	2114      	movs	r1, #20
 8002292:	2009      	movs	r0, #9
 8002294:	f000 fa40 	bl	8002718 <Display_GotoXY>
			Display_Puts("actual:", &Font_7x10, Display_COLOR_WHITE);
 8002298:	2201      	movs	r2, #1
 800229a:	4994      	ldr	r1, [pc, #592]	@ (80024ec <Menu_Handler+0x48c>)
 800229c:	4894      	ldr	r0, [pc, #592]	@ (80024f0 <Menu_Handler+0x490>)
 800229e:	f000 facf 	bl	8002840 <Display_Puts>

			Display_GotoXY(30, 32);
 80022a2:	2120      	movs	r1, #32
 80022a4:	201e      	movs	r0, #30
 80022a6:	f000 fa37 	bl	8002718 <Display_GotoXY>
			Display_Puts("new:", &Font_7x10, Display_COLOR_WHITE);
 80022aa:	2201      	movs	r2, #1
 80022ac:	498f      	ldr	r1, [pc, #572]	@ (80024ec <Menu_Handler+0x48c>)
 80022ae:	4891      	ldr	r0, [pc, #580]	@ (80024f4 <Menu_Handler+0x494>)
 80022b0:	f000 fac6 	bl	8002840 <Display_Puts>
			Display_GotoXY(2, 50);
 80022b4:	2132      	movs	r1, #50	@ 0x32
 80022b6:	2002      	movs	r0, #2
 80022b8:	f000 fa2e 	bl	8002718 <Display_GotoXY>
			Display_Puts("default:", &Font_7x10, Display_COLOR_WHITE);
 80022bc:	2201      	movs	r2, #1
 80022be:	498b      	ldr	r1, [pc, #556]	@ (80024ec <Menu_Handler+0x48c>)
 80022c0:	488d      	ldr	r0, [pc, #564]	@ (80024f8 <Menu_Handler+0x498>)
 80022c2:	f000 fabd 	bl	8002840 <Display_Puts>
		}

		if (previous_encoder != encoder_setup)
 80022c6:	4b87      	ldr	r3, [pc, #540]	@ (80024e4 <Menu_Handler+0x484>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b8b      	ldr	r3, [pc, #556]	@ (80024fc <Menu_Handler+0x49c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d05a      	beq.n	800238a <Menu_Handler+0x32a>
		{
			previous_encoder = encoder_setup;
 80022d4:	4b89      	ldr	r3, [pc, #548]	@ (80024fc <Menu_Handler+0x49c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	4b82      	ldr	r3, [pc, #520]	@ (80024e4 <Menu_Handler+0x484>)
 80022dc:	801a      	strh	r2, [r3, #0]

			Display_GotoXY(2, 3);
 80022de:	2103      	movs	r1, #3
 80022e0:	2002      	movs	r0, #2
 80022e2:	f000 fa19 	bl	8002718 <Display_GotoXY>
			sprintf(buf, "P%d ", encoder_setup);
 80022e6:	4b85      	ldr	r3, [pc, #532]	@ (80024fc <Menu_Handler+0x49c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4984      	ldr	r1, [pc, #528]	@ (8002500 <Menu_Handler+0x4a0>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f007 fab7 	bl	8009864 <siprintf>
			Display_Puts(buf, &Font_7x10, Display_COLOR_WHITE);
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	2201      	movs	r2, #1
 80022fc:	497b      	ldr	r1, [pc, #492]	@ (80024ec <Menu_Handler+0x48c>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fa9e 	bl	8002840 <Display_Puts>
			sprintf(buf, "%s", param[encoder_setup].parameter_string);
 8002304:	4b7d      	ldr	r3, [pc, #500]	@ (80024fc <Menu_Handler+0x49c>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4a7c      	ldr	r2, [pc, #496]	@ (8002504 <Menu_Handler+0x4a4>)
 8002312:	441a      	add	r2, r3
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	497b      	ldr	r1, [pc, #492]	@ (8002508 <Menu_Handler+0x4a8>)
 800231a:	4618      	mov	r0, r3
 800231c:	f007 faa2 	bl	8009864 <siprintf>
			Display_GotoXY(34, 3);
 8002320:	2103      	movs	r1, #3
 8002322:	2022      	movs	r0, #34	@ 0x22
 8002324:	f000 f9f8 	bl	8002718 <Display_GotoXY>
			Display_Puts(buf, &Font_7x10, Display_COLOR_WHITE);
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	2201      	movs	r2, #1
 800232e:	496f      	ldr	r1, [pc, #444]	@ (80024ec <Menu_Handler+0x48c>)
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fa85 	bl	8002840 <Display_Puts>

			// Print default and actual parameters
			Print_Float(param[encoder_setup].parameter_val, &Font_7x10, 60, 20);
 8002336:	4b71      	ldr	r3, [pc, #452]	@ (80024fc <Menu_Handler+0x49c>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4972      	ldr	r1, [pc, #456]	@ (8002504 <Menu_Handler+0x4a4>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3310      	adds	r3, #16
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002352:	2214      	movs	r2, #20
 8002354:	213c      	movs	r1, #60	@ 0x3c
 8002356:	4865      	ldr	r0, [pc, #404]	@ (80024ec <Menu_Handler+0x48c>)
 8002358:	eeb0 0a67 	vmov.f32	s0, s15
 800235c:	f000 fb90 	bl	8002a80 <Print_Float>
			Print_Float(param[encoder_setup].default_val, &Font_7x10, 60, 50);
 8002360:	4b66      	ldr	r3, [pc, #408]	@ (80024fc <Menu_Handler+0x49c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4967      	ldr	r1, [pc, #412]	@ (8002504 <Menu_Handler+0x4a4>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3312      	adds	r3, #18
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237c:	2232      	movs	r2, #50	@ 0x32
 800237e:	213c      	movs	r1, #60	@ 0x3c
 8002380:	485a      	ldr	r0, [pc, #360]	@ (80024ec <Menu_Handler+0x48c>)
 8002382:	eeb0 0a67 	vmov.f32	s0, s15
 8002386:	f000 fb7b 	bl	8002a80 <Print_Float>
		}

		if(pb_ok_value_old != pb_ok_value)
 800238a:	4b60      	ldr	r3, [pc, #384]	@ (800250c <Menu_Handler+0x4ac>)
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	4b60      	ldr	r3, [pc, #384]	@ (8002510 <Menu_Handler+0x4b0>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	f000 8100 	beq.w	8002598 <Menu_Handler+0x538>
		{
			pb_ok_value_old = pb_ok_value;
 8002398:	4b5d      	ldr	r3, [pc, #372]	@ (8002510 <Menu_Handler+0x4b0>)
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <Menu_Handler+0x4ac>)
 800239e:	701a      	strb	r2, [r3, #0]

			if(pb_ok_value == PB_OK_PRESSED)
 80023a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002510 <Menu_Handler+0x4b0>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	f040 80f7 	bne.w	8002598 <Menu_Handler+0x538>
			{
				mode = MENU_MODE_PARAM;
 80023aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002514 <Menu_Handler+0x4b4>)
 80023ac:	2202      	movs	r2, #2
 80023ae:	701a      	strb	r2, [r3, #0]
				selected_parameter = encoder_setup;
 80023b0:	4b52      	ldr	r3, [pc, #328]	@ (80024fc <Menu_Handler+0x49c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b58      	ldr	r3, [pc, #352]	@ (8002518 <Menu_Handler+0x4b8>)
 80023b8:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 80023ba:	e0ed      	b.n	8002598 <Menu_Handler+0x538>

	case MENU_MODE_PARAM:
		if(previous_mode != MENU_MODE_PARAM)
 80023bc:	4b48      	ldr	r3, [pc, #288]	@ (80024e0 <Menu_Handler+0x480>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d021      	beq.n	8002408 <Menu_Handler+0x3a8>
		{
			previous_mode = MENU_MODE_PARAM;
 80023c4:	4b46      	ldr	r3, [pc, #280]	@ (80024e0 <Menu_Handler+0x480>)
 80023c6:	2202      	movs	r2, #2
 80023c8:	701a      	strb	r2, [r3, #0]
			encoder_setup = param[selected_parameter].parameter_val;
 80023ca:	4b53      	ldr	r3, [pc, #332]	@ (8002518 <Menu_Handler+0x4b8>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <Menu_Handler+0x4a4>)
 80023d2:	460b      	mov	r3, r1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	440b      	add	r3, r1
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	3310      	adds	r3, #16
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b46      	ldr	r3, [pc, #280]	@ (80024fc <Menu_Handler+0x49c>)
 80023e4:	601a      	str	r2, [r3, #0]
			previous_encoder = 0xFFFF;
 80023e6:	4b3f      	ldr	r3, [pc, #252]	@ (80024e4 <Menu_Handler+0x484>)
 80023e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023ec:	801a      	strh	r2, [r3, #0]
			maximal_encoder_value = param[selected_parameter].max_val;
 80023ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002518 <Menu_Handler+0x4b8>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	4a43      	ldr	r2, [pc, #268]	@ (8002504 <Menu_Handler+0x4a4>)
 80023f6:	460b      	mov	r3, r1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	440b      	add	r3, r1
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	3314      	adds	r3, #20
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <Menu_Handler+0x488>)
 8002406:	801a      	strh	r2, [r3, #0]
		}

		if(previous_encoder != encoder_setup)
 8002408:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <Menu_Handler+0x484>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <Menu_Handler+0x49c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d011      	beq.n	800243a <Menu_Handler+0x3da>
		{
			previous_encoder = encoder_setup;
 8002416:	4b39      	ldr	r3, [pc, #228]	@ (80024fc <Menu_Handler+0x49c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b29a      	uxth	r2, r3
 800241c:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <Menu_Handler+0x484>)
 800241e:	801a      	strh	r2, [r3, #0]

			Print_Float(encoder_setup, &Font_7x10, 60, 32);
 8002420:	4b36      	ldr	r3, [pc, #216]	@ (80024fc <Menu_Handler+0x49c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242c:	2220      	movs	r2, #32
 800242e:	213c      	movs	r1, #60	@ 0x3c
 8002430:	482e      	ldr	r0, [pc, #184]	@ (80024ec <Menu_Handler+0x48c>)
 8002432:	eeb0 0a67 	vmov.f32	s0, s15
 8002436:	f000 fb23 	bl	8002a80 <Print_Float>
		}

		if(pb_ok_value_old != pb_ok_value)
 800243a:	4b34      	ldr	r3, [pc, #208]	@ (800250c <Menu_Handler+0x4ac>)
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	4b34      	ldr	r3, [pc, #208]	@ (8002510 <Menu_Handler+0x4b0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	f000 80aa 	beq.w	800259c <Menu_Handler+0x53c>
		{
			pb_ok_value_old = pb_ok_value;
 8002448:	4b31      	ldr	r3, [pc, #196]	@ (8002510 <Menu_Handler+0x4b0>)
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <Menu_Handler+0x4ac>)
 800244e:	701a      	strb	r2, [r3, #0]

			if(pb_ok_value == PB_OK_PRESSED)
 8002450:	4b2f      	ldr	r3, [pc, #188]	@ (8002510 <Menu_Handler+0x4b0>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 80a1 	bne.w	800259c <Menu_Handler+0x53c>
			{
				mode = MENU_MODE_MENU;
 800245a:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <Menu_Handler+0x4b4>)
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
				param[selected_parameter].parameter_val = encoder_setup;
 8002460:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <Menu_Handler+0x49c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b2c      	ldr	r3, [pc, #176]	@ (8002518 <Menu_Handler+0x4b8>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	b290      	uxth	r0, r2
 800246c:	4a25      	ldr	r2, [pc, #148]	@ (8002504 <Menu_Handler+0x4a4>)
 800246e:	460b      	mov	r3, r1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	440b      	add	r3, r1
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	3310      	adds	r3, #16
 800247a:	4602      	mov	r2, r0
 800247c:	801a      	strh	r2, [r3, #0]
				parameter_changed_flag = 1;
 800247e:	4b27      	ldr	r3, [pc, #156]	@ (800251c <Menu_Handler+0x4bc>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
				encoder_setup = selected_parameter; // try to optimize away
 8002484:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <Menu_Handler+0x4b8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b1c      	ldr	r3, [pc, #112]	@ (80024fc <Menu_Handler+0x49c>)
 800248c:	601a      	str	r2, [r3, #0]

				if(param[selected_parameter].max_val > 0XFF)
 800248e:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <Menu_Handler+0x4b8>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <Menu_Handler+0x4a4>)
 8002496:	460b      	mov	r3, r1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	440b      	add	r3, r1
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	3314      	adds	r3, #20
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	2bff      	cmp	r3, #255	@ 0xff
 80024a6:	d93b      	bls.n	8002520 <Menu_Handler+0x4c0>
				{
					M24C0X_Write_Word(EEPROM_DEV_ADDR, param[selected_parameter].eeprom_addr, param[selected_parameter].parameter_val);
 80024a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <Menu_Handler+0x4b8>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <Menu_Handler+0x4a4>)
 80024b0:	460b      	mov	r3, r1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	440b      	add	r3, r1
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	3316      	adds	r3, #22
 80024bc:	7819      	ldrb	r1, [r3, #0]
 80024be:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <Menu_Handler+0x4b8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <Menu_Handler+0x4a4>)
 80024c6:	4603      	mov	r3, r0
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4403      	add	r3, r0
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	3310      	adds	r3, #16
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	20a0      	movs	r0, #160	@ 0xa0
 80024d8:	f7fe febc 	bl	8001254 <M24C0X_Write_Word>
					M24C0X_Write_Byte(EEPROM_DEV_ADDR, param[selected_parameter].eeprom_addr, byte_to_write);
				}
			}
		}

		break;
 80024dc:	e05e      	b.n	800259c <Menu_Handler+0x53c>
 80024de:	bf00      	nop
 80024e0:	20000028 	.word	0x20000028
 80024e4:	2000002a 	.word	0x2000002a
 80024e8:	20000418 	.word	0x20000418
 80024ec:	20000004 	.word	0x20000004
 80024f0:	0800b2d8 	.word	0x0800b2d8
 80024f4:	0800b2e0 	.word	0x0800b2e0
 80024f8:	0800b2e8 	.word	0x0800b2e8
 80024fc:	2000041c 	.word	0x2000041c
 8002500:	0800b2f4 	.word	0x0800b2f4
 8002504:	20000858 	.word	0x20000858
 8002508:	0800b2fc 	.word	0x0800b2fc
 800250c:	2000042a 	.word	0x2000042a
 8002510:	20000428 	.word	0x20000428
 8002514:	20000429 	.word	0x20000429
 8002518:	2000042b 	.word	0x2000042b
 800251c:	20000839 	.word	0x20000839
					uint8_t byte_to_write = param[selected_parameter].parameter_val;
 8002520:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <Menu_Handler+0x54c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	4a22      	ldr	r2, [pc, #136]	@ (80025b0 <Menu_Handler+0x550>)
 8002528:	460b      	mov	r3, r1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	440b      	add	r3, r1
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	3310      	adds	r3, #16
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					M24C0X_Write_Byte(EEPROM_DEV_ADDR, param[selected_parameter].eeprom_addr, byte_to_write);
 800253a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <Menu_Handler+0x54c>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4a1b      	ldr	r2, [pc, #108]	@ (80025b0 <Menu_Handler+0x550>)
 8002542:	460b      	mov	r3, r1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	440b      	add	r3, r1
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	3316      	adds	r3, #22
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002554:	4619      	mov	r1, r3
 8002556:	20a0      	movs	r0, #160	@ 0xa0
 8002558:	f7fe fe04 	bl	8001164 <M24C0X_Write_Byte>
		break;
 800255c:	e01e      	b.n	800259c <Menu_Handler+0x53c>

	case MENU_MODE_DEBUG:
		if(previous_mode != MENU_MODE_DEBUG)
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <Menu_Handler+0x554>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d01c      	beq.n	80025a0 <Menu_Handler+0x540>
		{
			previous_mode = MENU_MODE_DEBUG;
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <Menu_Handler+0x554>)
 8002568:	2203      	movs	r2, #3
 800256a:	701a      	strb	r2, [r3, #0]
			Display_Clear();
 800256c:	f000 fade 	bl	8002b2c <Display_Clear>
			Display_GotoXY(1, 1);
 8002570:	2101      	movs	r1, #1
 8002572:	2001      	movs	r0, #1
 8002574:	f000 f8d0 	bl	8002718 <Display_GotoXY>
			sprintf(buf, "Debug_Mode");
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	490e      	ldr	r1, [pc, #56]	@ (80025b8 <Menu_Handler+0x558>)
 800257e:	4618      	mov	r0, r3
 8002580:	f007 f970 	bl	8009864 <siprintf>
			Display_Puts(buf, &Font_7x10, Display_COLOR_WHITE);
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	2201      	movs	r2, #1
 800258a:	490c      	ldr	r1, [pc, #48]	@ (80025bc <Menu_Handler+0x55c>)
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f957 	bl	8002840 <Display_Puts>
		}
		break;
 8002592:	e005      	b.n	80025a0 <Menu_Handler+0x540>

	default:
		break;
 8002594:	bf00      	nop
 8002596:	e004      	b.n	80025a2 <Menu_Handler+0x542>
		break;
 8002598:	bf00      	nop
 800259a:	e002      	b.n	80025a2 <Menu_Handler+0x542>
		break;
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <Menu_Handler+0x542>
		break;
 80025a0:	bf00      	nop
	}
}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	@ 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000042b 	.word	0x2000042b
 80025b0:	20000858 	.word	0x20000858
 80025b4:	20000028 	.word	0x20000028
 80025b8:	0800b300 	.word	0x0800b300
 80025bc:	20000004 	.word	0x20000004

080025c0 <Display_Init>:
		}
	}
}

uint8_t Display_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
	// Flush Buffer
	for (uint16_t z = 0; z < ((DISPLAY_WIDTH * DISPLAY_HEIGHT) / 8); z++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	80fb      	strh	r3, [r7, #6]
 80025ca:	e006      	b.n	80025da <Display_Init+0x1a>
	{
		Frame_Buffer[z] = 0x00;
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	4a0f      	ldr	r2, [pc, #60]	@ (800260c <Display_Init+0x4c>)
 80025d0:	2100      	movs	r1, #0
 80025d2:	54d1      	strb	r1, [r2, r3]
	for (uint16_t z = 0; z < ((DISPLAY_WIDTH * DISPLAY_HEIGHT) / 8); z++)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	3301      	adds	r3, #1
 80025d8:	80fb      	strh	r3, [r7, #6]
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e0:	d3f4      	bcc.n	80025cc <Display_Init+0xc>
	}

	// Put Display Initialization Function HERE:
	DOGL128_Init();
 80025e2:	f7fe fd01 	bl	8000fe8 <DOGL128_Init>

	// Clear Screen
	Display_Fill(Display_COLOR_BLACK);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f81e 	bl	8002628 <Display_Fill>

	// Update screen
	Display_UpdateScreen();
 80025ec:	f000 f812 	bl	8002614 <Display_UpdateScreen>

	// Set default values
	Display.CurrentX = 0;
 80025f0:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <Display_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	801a      	strh	r2, [r3, #0]
	Display.CurrentY = 0;
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <Display_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	805a      	strh	r2, [r3, #2]

	// Initialized OK
	Display.Initialized = 1;
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <Display_Init+0x50>)
 80025fe:	2201      	movs	r2, #1
 8002600:	715a      	strb	r2, [r3, #5]

	// Return OK
	return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000042c 	.word	0x2000042c
 8002610:	2000082c 	.word	0x2000082c

08002614 <Display_UpdateScreen>:

void Display_UpdateScreen(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	DOGL128_Write_Data(Frame_Buffer);
 8002618:	4802      	ldr	r0, [pc, #8]	@ (8002624 <Display_UpdateScreen+0x10>)
 800261a:	f7fe fd09 	bl	8001030 <DOGL128_Write_Data>
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000042c 	.word	0x2000042c

08002628 <Display_Fill>:
		Frame_Buffer[i] = ~Frame_Buffer[i];
	}
}

void Display_Fill(Display_COLOR_t color)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(Frame_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(Frame_Buffer));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <Display_Fill+0x14>
 8002638:	2300      	movs	r3, #0
 800263a:	e000      	b.n	800263e <Display_Fill+0x16>
 800263c:	23ff      	movs	r3, #255	@ 0xff
 800263e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002642:	4619      	mov	r1, r3
 8002644:	4803      	ldr	r0, [pc, #12]	@ (8002654 <Display_Fill+0x2c>)
 8002646:	f007 f92f 	bl	80098a8 <memset>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000042c 	.word	0x2000042c

08002658 <Display_DrawPixel>:

void Display_DrawPixel(uint16_t x, uint16_t y, Display_COLOR_t color)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
 8002662:	460b      	mov	r3, r1
 8002664:	80bb      	strh	r3, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	70fb      	strb	r3, [r7, #3]
	if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT)
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	2b7f      	cmp	r3, #127	@ 0x7f
 800266e:	d848      	bhi.n	8002702 <Display_DrawPixel+0xaa>
 8002670:	88bb      	ldrh	r3, [r7, #4]
 8002672:	2b3f      	cmp	r3, #63	@ 0x3f
 8002674:	d845      	bhi.n	8002702 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (Display.Inverted)
 8002676:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <Display_DrawPixel+0xb8>)
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <Display_DrawPixel+0x34>
	{
		color = (Display_COLOR_t) !color;
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == Display_COLOR_WHITE)
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d11a      	bne.n	80026c8 <Display_DrawPixel+0x70>
	{
		Frame_Buffer[x + (y / 8) * DISPLAY_WIDTH] |= 1 << (y % 8);
 8002692:	88fa      	ldrh	r2, [r7, #6]
 8002694:	88bb      	ldrh	r3, [r7, #4]
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	b298      	uxth	r0, r3
 800269a:	4603      	mov	r3, r0
 800269c:	01db      	lsls	r3, r3, #7
 800269e:	4413      	add	r3, r2
 80026a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002714 <Display_DrawPixel+0xbc>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	b25a      	sxtb	r2, r3
 80026a6:	88bb      	ldrh	r3, [r7, #4]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	2101      	movs	r1, #1
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	b25b      	sxtb	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b259      	sxtb	r1, r3
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	4603      	mov	r3, r0
 80026bc:	01db      	lsls	r3, r3, #7
 80026be:	4413      	add	r3, r2
 80026c0:	b2c9      	uxtb	r1, r1
 80026c2:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <Display_DrawPixel+0xbc>)
 80026c4:	54d1      	strb	r1, [r2, r3]
 80026c6:	e01d      	b.n	8002704 <Display_DrawPixel+0xac>
	}
	else
	{
		Frame_Buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y % 8));
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	88bb      	ldrh	r3, [r7, #4]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	b298      	uxth	r0, r3
 80026d0:	4603      	mov	r3, r0
 80026d2:	01db      	lsls	r3, r3, #7
 80026d4:	4413      	add	r3, r2
 80026d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002714 <Display_DrawPixel+0xbc>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	b25a      	sxtb	r2, r3
 80026dc:	88bb      	ldrh	r3, [r7, #4]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	4013      	ands	r3, r2
 80026f0:	b259      	sxtb	r1, r3
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	4603      	mov	r3, r0
 80026f6:	01db      	lsls	r3, r3, #7
 80026f8:	4413      	add	r3, r2
 80026fa:	b2c9      	uxtb	r1, r1
 80026fc:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <Display_DrawPixel+0xbc>)
 80026fe:	54d1      	strb	r1, [r2, r3]
 8002700:	e000      	b.n	8002704 <Display_DrawPixel+0xac>
		return;
 8002702:	bf00      	nop
	}
}
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000082c 	.word	0x2000082c
 8002714:	2000042c 	.word	0x2000042c

08002718 <Display_GotoXY>:

void Display_GotoXY(uint16_t x, uint16_t y)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	460a      	mov	r2, r1
 8002722:	80fb      	strh	r3, [r7, #6]
 8002724:	4613      	mov	r3, r2
 8002726:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	Display.CurrentX = x;
 8002728:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <Display_GotoXY+0x28>)
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	8013      	strh	r3, [r2, #0]
	Display.CurrentY = y;
 800272e:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <Display_GotoXY+0x28>)
 8002730:	88bb      	ldrh	r3, [r7, #4]
 8002732:	8053      	strh	r3, [r2, #2]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	2000082c 	.word	0x2000082c

08002744 <Display_Putc>:

char Display_Putc(char ch, FontDef_t *Font, Display_COLOR_t color)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	4613      	mov	r3, r2
 8002752:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
	DISPLAY_WIDTH <= (Display.CurrentX + Font->FontWidth) ||
 8002754:	4b39      	ldr	r3, [pc, #228]	@ (800283c <Display_Putc+0xf8>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4413      	add	r3, r2
	if (
 8002760:	2b7f      	cmp	r3, #127	@ 0x7f
 8002762:	dc07      	bgt.n	8002774 <Display_Putc+0x30>
	DISPLAY_HEIGHT <= (Display.CurrentY + Font->FontHeight))
 8002764:	4b35      	ldr	r3, [pc, #212]	@ (800283c <Display_Putc+0xf8>)
 8002766:	885b      	ldrh	r3, [r3, #2]
 8002768:	461a      	mov	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	4413      	add	r3, r2
	DISPLAY_WIDTH <= (Display.CurrentX + Font->FontWidth) ||
 8002770:	2b3f      	cmp	r3, #63	@ 0x3f
 8002772:	dd01      	ble.n	8002778 <Display_Putc+0x34>
	{
		/* Error */
		return 0;
 8002774:	2300      	movs	r3, #0
 8002776:	e05d      	b.n	8002834 <Display_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e04b      	b.n	8002816 <Display_Putc+0xd2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	3b20      	subs	r3, #32
 8002786:	6839      	ldr	r1, [r7, #0]
 8002788:	7849      	ldrb	r1, [r1, #1]
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4619      	mov	r1, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	440b      	add	r3, r1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	e030      	b.n	8002804 <Display_Putc+0xc0>
		{
			if ((b << j) & 0x8000)
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <Display_Putc+0x90>
			{
				Display_DrawPixel(Display.CurrentX + j, (Display.CurrentY + i), (Display_COLOR_t) color);
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <Display_Putc+0xf8>)
 80027b4:	881a      	ldrh	r2, [r3, #0]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	b298      	uxth	r0, r3
 80027be:	4b1f      	ldr	r3, [pc, #124]	@ (800283c <Display_Putc+0xf8>)
 80027c0:	885a      	ldrh	r2, [r3, #2]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	79ba      	ldrb	r2, [r7, #6]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7ff ff43 	bl	8002658 <Display_DrawPixel>
 80027d2:	e014      	b.n	80027fe <Display_Putc+0xba>
			}
			else
			{
				Display_DrawPixel(Display.CurrentX + j, (Display.CurrentY + i), (Display_COLOR_t) !color);
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <Display_Putc+0xf8>)
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4413      	add	r3, r2
 80027de:	b298      	uxth	r0, r3
 80027e0:	4b16      	ldr	r3, [pc, #88]	@ (800283c <Display_Putc+0xf8>)
 80027e2:	885a      	ldrh	r2, [r3, #2]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	b299      	uxth	r1, r3
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	f7ff ff2d 	bl	8002658 <Display_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	3301      	adds	r3, #1
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4293      	cmp	r3, r2
 800280e:	d3c8      	bcc.n	80027a2 <Display_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	785b      	ldrb	r3, [r3, #1]
 800281a:	461a      	mov	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4293      	cmp	r3, r2
 8002820:	d3ad      	bcc.n	800277e <Display_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	Display.CurrentX += Font->FontWidth;
 8002822:	4b06      	ldr	r3, [pc, #24]	@ (800283c <Display_Putc+0xf8>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	4413      	add	r3, r2
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b03      	ldr	r3, [pc, #12]	@ (800283c <Display_Putc+0xf8>)
 8002830:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002832:	79fb      	ldrb	r3, [r7, #7]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2000082c 	.word	0x2000082c

08002840 <Display_Puts>:

char Display_Puts(char *str, FontDef_t *Font, Display_COLOR_t color)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 800284e:	e012      	b.n	8002876 <Display_Puts+0x36>
	{
		/* Write character by character */
		if (Display_Putc(*str, Font, color) != *str)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	79fa      	ldrb	r2, [r7, #7]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff73 	bl	8002744 <Display_Putc>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d002      	beq.n	8002870 <Display_Puts+0x30>
		{
			/* Return error */
			return *str;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	e008      	b.n	8002882 <Display_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3301      	adds	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
	while (*str)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e8      	bne.n	8002850 <Display_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	781b      	ldrb	r3, [r3, #0]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, Display_COLOR_t c)
{
 800288a:	b590      	push	{r4, r7, lr}
 800288c:	b087      	sub	sp, #28
 800288e:	af00      	add	r7, sp, #0
 8002890:	4604      	mov	r4, r0
 8002892:	4608      	mov	r0, r1
 8002894:	4611      	mov	r1, r2
 8002896:	461a      	mov	r2, r3
 8002898:	4623      	mov	r3, r4
 800289a:	80fb      	strh	r3, [r7, #6]
 800289c:	4603      	mov	r3, r0
 800289e:	80bb      	strh	r3, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= DISPLAY_WIDTH)
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80028ac:	d901      	bls.n	80028b2 <Display_DrawLine+0x28>
	{
		x0 = DISPLAY_WIDTH - 1;
 80028ae:	237f      	movs	r3, #127	@ 0x7f
 80028b0:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= DISPLAY_WIDTH)
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80028b6:	d901      	bls.n	80028bc <Display_DrawLine+0x32>
	{
		x1 = DISPLAY_WIDTH - 1;
 80028b8:	237f      	movs	r3, #127	@ 0x7f
 80028ba:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= DISPLAY_HEIGHT)
 80028bc:	88bb      	ldrh	r3, [r7, #4]
 80028be:	2b3f      	cmp	r3, #63	@ 0x3f
 80028c0:	d901      	bls.n	80028c6 <Display_DrawLine+0x3c>
	{
		y0 = DISPLAY_HEIGHT - 1;
 80028c2:	233f      	movs	r3, #63	@ 0x3f
 80028c4:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= DISPLAY_HEIGHT)
 80028c6:	883b      	ldrh	r3, [r7, #0]
 80028c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ca:	d901      	bls.n	80028d0 <Display_DrawLine+0x46>
	{
		y1 = DISPLAY_HEIGHT - 1;
 80028cc:	233f      	movs	r3, #63	@ 0x3f
 80028ce:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d205      	bcs.n	80028e4 <Display_DrawLine+0x5a>
 80028d8:	887a      	ldrh	r2, [r7, #2]
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	e004      	b.n	80028ee <Display_DrawLine+0x64>
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 80028f0:	88ba      	ldrh	r2, [r7, #4]
 80028f2:	883b      	ldrh	r3, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d205      	bcs.n	8002904 <Display_DrawLine+0x7a>
 80028f8:	883a      	ldrh	r2, [r7, #0]
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	b29b      	uxth	r3, r3
 8002900:	b21b      	sxth	r3, r3
 8002902:	e004      	b.n	800290e <Display_DrawLine+0x84>
 8002904:	88ba      	ldrh	r2, [r7, #4]
 8002906:	883b      	ldrh	r3, [r7, #0]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	b29b      	uxth	r3, r3
 800290c:	b21b      	sxth	r3, r3
 800290e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	429a      	cmp	r2, r3
 8002916:	d201      	bcs.n	800291c <Display_DrawLine+0x92>
 8002918:	2301      	movs	r3, #1
 800291a:	e001      	b.n	8002920 <Display_DrawLine+0x96>
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8002922:	88ba      	ldrh	r2, [r7, #4]
 8002924:	883b      	ldrh	r3, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d201      	bcs.n	800292e <Display_DrawLine+0xa4>
 800292a:	2301      	movs	r3, #1
 800292c:	e001      	b.n	8002932 <Display_DrawLine+0xa8>
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8002934:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002938:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	dd06      	ble.n	800294e <Display_DrawLine+0xc4>
 8002940:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002944:	0fda      	lsrs	r2, r3, #31
 8002946:	4413      	add	r3, r2
 8002948:	105b      	asrs	r3, r3, #1
 800294a:	b21b      	sxth	r3, r3
 800294c:	e006      	b.n	800295c <Display_DrawLine+0xd2>
 800294e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002952:	0fda      	lsrs	r2, r3, #31
 8002954:	4413      	add	r3, r2
 8002956:	105b      	asrs	r3, r3, #1
 8002958:	425b      	negs	r3, r3
 800295a:	b21b      	sxth	r3, r3
 800295c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0)
 800295e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d129      	bne.n	80029ba <Display_DrawLine+0x130>
	{
		if (y1 < y0)
 8002966:	883a      	ldrh	r2, [r7, #0]
 8002968:	88bb      	ldrh	r3, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d205      	bcs.n	800297a <Display_DrawLine+0xf0>
		{
			tmp = y1;
 800296e:	883b      	ldrh	r3, [r7, #0]
 8002970:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002972:	88bb      	ldrh	r3, [r7, #4]
 8002974:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002976:	893b      	ldrh	r3, [r7, #8]
 8002978:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0)
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	429a      	cmp	r2, r3
 8002980:	d205      	bcs.n	800298e <Display_DrawLine+0x104>
		{
			tmp = x1;
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800298a:	893b      	ldrh	r3, [r7, #8]
 800298c:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++)
 800298e:	88bb      	ldrh	r3, [r7, #4]
 8002990:	82bb      	strh	r3, [r7, #20]
 8002992:	e00c      	b.n	80029ae <Display_DrawLine+0x124>
		{
			Display_DrawPixel(x0, i, c);
 8002994:	8ab9      	ldrh	r1, [r7, #20]
 8002996:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fe5b 	bl	8002658 <Display_DrawPixel>
		for (i = y0; i <= y1; i++)
 80029a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	82bb      	strh	r3, [r7, #20]
 80029ae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80029b2:	883b      	ldrh	r3, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	dded      	ble.n	8002994 <Display_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 80029b8:	e05f      	b.n	8002a7a <Display_DrawLine+0x1f0>
	}

	if (dy == 0)
 80029ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d129      	bne.n	8002a16 <Display_DrawLine+0x18c>
	{
		if (y1 < y0)
 80029c2:	883a      	ldrh	r2, [r7, #0]
 80029c4:	88bb      	ldrh	r3, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d205      	bcs.n	80029d6 <Display_DrawLine+0x14c>
		{
			tmp = y1;
 80029ca:	883b      	ldrh	r3, [r7, #0]
 80029cc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80029ce:	88bb      	ldrh	r3, [r7, #4]
 80029d0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80029d2:	893b      	ldrh	r3, [r7, #8]
 80029d4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0)
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d205      	bcs.n	80029ea <Display_DrawLine+0x160>
		{
			tmp = x1;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80029e6:	893b      	ldrh	r3, [r7, #8]
 80029e8:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	82bb      	strh	r3, [r7, #20]
 80029ee:	e00c      	b.n	8002a0a <Display_DrawLine+0x180>
		{
			Display_DrawPixel(i, y0, c);
 80029f0:	8abb      	ldrh	r3, [r7, #20]
 80029f2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80029f6:	88b9      	ldrh	r1, [r7, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe2d 	bl	8002658 <Display_DrawPixel>
		for (i = x0; i <= x1; i++)
 80029fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	82bb      	strh	r3, [r7, #20]
 8002a0a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	dded      	ble.n	80029f0 <Display_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8002a14:	e031      	b.n	8002a7a <Display_DrawLine+0x1f0>
	}

	while (1)
	{
		Display_DrawPixel(x0, y0, c);
 8002a16:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002a1a:	88b9      	ldrh	r1, [r7, #4]
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fe1a 	bl	8002658 <Display_DrawPixel>
		if (x0 == x1 && y0 == y1)
 8002a24:	88fa      	ldrh	r2, [r7, #6]
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d103      	bne.n	8002a34 <Display_DrawLine+0x1aa>
 8002a2c:	88ba      	ldrh	r2, [r7, #4]
 8002a2e:	883b      	ldrh	r3, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d021      	beq.n	8002a78 <Display_DrawLine+0x1ee>
		{
			break;
		}
		e2 = err;
 8002a34:	8afb      	ldrh	r3, [r7, #22]
 8002a36:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx)
 8002a38:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a40:	425b      	negs	r3, r3
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dd08      	ble.n	8002a58 <Display_DrawLine+0x1ce>
		{
			err -= dy;
 8002a46:	8afa      	ldrh	r2, [r7, #22]
 8002a48:	8a3b      	ldrh	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002a50:	89fa      	ldrh	r2, [r7, #14]
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	4413      	add	r3, r2
 8002a56:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy)
 8002a58:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dad8      	bge.n	8002a16 <Display_DrawLine+0x18c>
		{
			err += dx;
 8002a64:	8afa      	ldrh	r2, [r7, #22]
 8002a66:	8a7b      	ldrh	r3, [r7, #18]
 8002a68:	4413      	add	r3, r2
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002a6e:	89ba      	ldrh	r2, [r7, #12]
 8002a70:	88bb      	ldrh	r3, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	80bb      	strh	r3, [r7, #4]
		Display_DrawPixel(x0, y0, c);
 8002a76:	e7ce      	b.n	8002a16 <Display_DrawLine+0x18c>
			break;
 8002a78:	bf00      	nop
		}
	}
}
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <Print_Float>:
		Display_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
	}
}

void Print_Float(float value, FontDef_t *Font, uint16_t x_position, uint16_t y_position)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	@ 0x30
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a8a:	60b8      	str	r0, [r7, #8]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	80fb      	strh	r3, [r7, #6]
 8002a90:	4613      	mov	r3, r2
 8002a92:	80bb      	strh	r3, [r7, #4]
	char buf_value[16]; // Buffer für maximal 6 Ziffern plus Punkt und Nullterminator
	int16_t int_part = (int16_t) value;  // Whole number
 8002a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9c:	ee17 3a90 	vmov	r3, s15
 8002aa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t dec_part = (int16_t) ((value - int_part) * 100);  // Decimal number
 8002aa2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aae:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002b24 <Print_Float+0xa4>
 8002aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac2:	ee17 3a90 	vmov	r3, s15
 8002ac6:	847b      	strh	r3, [r7, #34]	@ 0x22

	// Format the number as string
	snprintf(buf_value, sizeof(buf_value), "%3d.%02d", int_part, dec_part);
 8002ac8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002acc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002ad0:	f107 0010 	add.w	r0, r7, #16
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	4a13      	ldr	r2, [pc, #76]	@ (8002b28 <Print_Float+0xa8>)
 8002ada:	2110      	movs	r1, #16
 8002adc:	f006 fe8c 	bl	80097f8 <sniprintf>

	// Goto position
	Display_GotoXY(x_position, y_position);
 8002ae0:	88ba      	ldrh	r2, [r7, #4]
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fe16 	bl	8002718 <Display_GotoXY>

	// Characterwise print
	for (uint16_t i = 0; buf_value[i] != '\0'; i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002af0:	e00c      	b.n	8002b0c <Print_Float+0x8c>
	{
		Display_Putc(buf_value[i], Font, Display_COLOR_WHITE);
 8002af2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002af4:	3328      	adds	r3, #40	@ 0x28
 8002af6:	443b      	add	r3, r7
 8002af8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002afc:	2201      	movs	r2, #1
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fe1f 	bl	8002744 <Display_Putc>
	for (uint16_t i = 0; buf_value[i] != '\0'; i++)
 8002b06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b08:	3301      	adds	r3, #1
 8002b0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b0e:	3328      	adds	r3, #40	@ 0x28
 8002b10:	443b      	add	r3, r7
 8002b12:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1eb      	bne.n	8002af2 <Print_Float+0x72>
	}
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	3728      	adds	r7, #40	@ 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	42c80000 	.word	0x42c80000
 8002b28:	0800b30c 	.word	0x0800b30c

08002b2c <Display_Clear>:

void Display_Clear(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	Display_Fill(0);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7ff fd79 	bl	8002628 <Display_Fill>
	Display_UpdateScreen();
 8002b36:	f7ff fd6d 	bl	8002614 <Display_UpdateScreen>
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_MspInit+0x4c>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b8c <HAL_MspInit+0x4c>)
 8002b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <HAL_MspInit+0x4c>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_MspInit+0x4c>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	4a08      	ldr	r2, [pc, #32]	@ (8002b8c <HAL_MspInit+0x4c>)
 8002b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_MspInit+0x4c>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800

08002b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	@ 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a33      	ldr	r2, [pc, #204]	@ (8002c7c <HAL_ADC_MspInit+0xec>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d15f      	bne.n	8002c72 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <HAL_ADC_MspInit+0xf0>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	4a31      	ldr	r2, [pc, #196]	@ (8002c80 <HAL_ADC_MspInit+0xf0>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c80 <HAL_ADC_MspInit+0xf0>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <HAL_ADC_MspInit+0xf0>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8002c80 <HAL_ADC_MspInit+0xf0>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b28      	ldr	r3, [pc, #160]	@ (8002c80 <HAL_ADC_MspInit+0xf0>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = V_ADC_Pin|MA_ADC_Pin|V_BUS_MON_Pin;
 8002bea:	2316      	movs	r3, #22
 8002bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4821      	ldr	r0, [pc, #132]	@ (8002c84 <HAL_ADC_MspInit+0xf4>)
 8002bfe:	f002 fc39 	bl	8005474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c02:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c04:	4a21      	ldr	r2, [pc, #132]	@ (8002c8c <HAL_ADC_MspInit+0xfc>)
 8002c06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c08:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c14:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c22:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c2a:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c32:	4b15      	ldr	r3, [pc, #84]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c3a:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c46:	4810      	ldr	r0, [pc, #64]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c48:	f002 f834 	bl	8004cb4 <HAL_DMA_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002c52:	f7fe ffdb 	bl	8001c0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a0b      	ldr	r2, [pc, #44]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <HAL_ADC_MspInit+0xf8>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	2012      	movs	r0, #18
 8002c68:	f001 ffed 	bl	8004c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c6c:	2012      	movs	r0, #18
 8002c6e:	f002 f806 	bl	8004c7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c72:	bf00      	nop
 8002c74:	3728      	adds	r7, #40	@ 0x28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40012000 	.word	0x40012000
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	2000014c 	.word	0x2000014c
 8002c8c:	40026410 	.word	0x40026410

08002c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	@ 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a29      	ldr	r2, [pc, #164]	@ (8002d54 <HAL_I2C_MspInit+0xc4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d14b      	bne.n	8002d4a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a27      	ldr	r2, [pc, #156]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b25      	ldr	r3, [pc, #148]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a20      	ldr	r2, [pc, #128]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf0:	2312      	movs	r3, #18
 8002cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	4815      	ldr	r0, [pc, #84]	@ (8002d5c <HAL_I2C_MspInit+0xcc>)
 8002d08:	f002 fbb4 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d12:	2312      	movs	r3, #18
 8002d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	480d      	ldr	r0, [pc, #52]	@ (8002d60 <HAL_I2C_MspInit+0xd0>)
 8002d2a:	f002 fba3 	bl	8005474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	4a08      	ldr	r2, [pc, #32]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002d38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_I2C_MspInit+0xc8>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002d4a:	bf00      	nop
 8002d4c:	3728      	adds	r7, #40	@ 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40005c00 	.word	0x40005c00
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020800 	.word	0x40020800
 8002d60:	40020000 	.word	0x40020000

08002d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <HAL_SPI_MspInit+0x84>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d12c      	bne.n	8002de0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <HAL_SPI_MspInit+0x88>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	4a17      	ldr	r2, [pc, #92]	@ (8002dec <HAL_SPI_MspInit+0x88>)
 8002d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <HAL_SPI_MspInit+0x88>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <HAL_SPI_MspInit+0x88>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	4a10      	ldr	r2, [pc, #64]	@ (8002dec <HAL_SPI_MspInit+0x88>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <HAL_SPI_MspInit+0x88>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002dbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dd0:	2306      	movs	r3, #6
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4805      	ldr	r0, [pc, #20]	@ (8002df0 <HAL_SPI_MspInit+0x8c>)
 8002ddc:	f002 fb4a 	bl	8005474 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002de0:	bf00      	nop
 8002de2:	3728      	adds	r7, #40	@ 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40003c00 	.word	0x40003c00
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020800 	.word	0x40020800

08002df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb4 <HAL_TIM_Base_MspInit+0xc0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e16:	4b28      	ldr	r3, [pc, #160]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002e22:	e042      	b.n	8002eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e2c:	d10e      	bne.n	8002e4c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	4b21      	ldr	r3, [pc, #132]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	4a20      	ldr	r2, [pc, #128]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
}
 8002e4a:	e02e      	b.n	8002eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM12)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <HAL_TIM_Base_MspInit+0xc8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a16      	ldr	r2, [pc, #88]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
}
 8002e72:	e01a      	b.n	8002eaa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM14)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xcc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d115      	bne.n	8002eaa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_TIM_Base_MspInit+0xc4>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	202d      	movs	r0, #45	@ 0x2d
 8002ea0:	f001 fed1 	bl	8004c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ea4:	202d      	movs	r0, #45	@ 0x2d
 8002ea6:	f001 feea 	bl	8004c7e <HAL_NVIC_EnableIRQ>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40001800 	.word	0x40001800
 8002ec0:	40002000 	.word	0x40002000

08002ec4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d12b      	bne.n	8002f3e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <HAL_TIM_Encoder_MspInit+0x88>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4a17      	ldr	r2, [pc, #92]	@ (8002f4c <HAL_TIM_Encoder_MspInit+0x88>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_TIM_Encoder_MspInit+0x88>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <HAL_TIM_Encoder_MspInit+0x88>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a10      	ldr	r2, [pc, #64]	@ (8002f4c <HAL_TIM_Encoder_MspInit+0x88>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <HAL_TIM_Encoder_MspInit+0x88>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f1e:	23c0      	movs	r3, #192	@ 0xc0
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	4805      	ldr	r0, [pc, #20]	@ (8002f50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002f3a:	f002 fa9b 	bl	8005474 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002f3e:	bf00      	nop
 8002f40:	3728      	adds	r7, #40	@ 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020400 	.word	0x40020400

08002f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	@ 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a30      	ldr	r2, [pc, #192]	@ (8003034 <HAL_TIM_MspPostInit+0xe0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d15a      	bne.n	800302c <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f86:	4b2c      	ldr	r3, [pc, #176]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b28      	ldr	r3, [pc, #160]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	4a27      	ldr	r2, [pc, #156]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a20      	ldr	r2, [pc, #128]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002fb8:	f043 0310 	orr.w	r3, r3, #16
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <HAL_TIM_MspPostInit+0xe4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4815      	ldr	r0, [pc, #84]	@ (800303c <HAL_TIM_MspPostInit+0xe8>)
 8002fe6:	f002 fa45 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fea:	2301      	movs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	480e      	ldr	r0, [pc, #56]	@ (8003040 <HAL_TIM_MspPostInit+0xec>)
 8003006:	f002 fa35 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800300a:	f44f 5368 	mov.w	r3, #14848	@ 0x3a00
 800300e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800301c:	2301      	movs	r3, #1
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4619      	mov	r1, r3
 8003026:	4807      	ldr	r0, [pc, #28]	@ (8003044 <HAL_TIM_MspPostInit+0xf0>)
 8003028:	f002 fa24 	bl	8005474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800302c:	bf00      	nop
 800302e:	3728      	adds	r7, #40	@ 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40010000 	.word	0x40010000
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40021000 	.word	0x40021000

08003048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	@ 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a19      	ldr	r2, [pc, #100]	@ (80030cc <HAL_UART_MspInit+0x84>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d12b      	bne.n	80030c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <HAL_UART_MspInit+0x88>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	4a17      	ldr	r2, [pc, #92]	@ (80030d0 <HAL_UART_MspInit+0x88>)
 8003074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003078:	6413      	str	r3, [r2, #64]	@ 0x40
 800307a:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_UART_MspInit+0x88>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_UART_MspInit+0x88>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	4a10      	ldr	r2, [pc, #64]	@ (80030d0 <HAL_UART_MspInit+0x88>)
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	6313      	str	r3, [r2, #48]	@ 0x30
 8003096:	4b0e      	ldr	r3, [pc, #56]	@ (80030d0 <HAL_UART_MspInit+0x88>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80030a2:	2360      	movs	r3, #96	@ 0x60
 80030a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a6:	2302      	movs	r3, #2
 80030a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ae:	2303      	movs	r3, #3
 80030b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030b2:	2307      	movs	r3, #7
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	4619      	mov	r1, r3
 80030bc:	4805      	ldr	r0, [pc, #20]	@ (80030d4 <HAL_UART_MspInit+0x8c>)
 80030be:	f002 f9d9 	bl	8005474 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80030c2:	bf00      	nop
 80030c4:	3728      	adds	r7, #40	@ 0x28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40004400 	.word	0x40004400
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40020c00 	.word	0x40020c00

080030d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <NMI_Handler+0x4>

080030e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <HardFault_Handler+0x4>

080030e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <MemManage_Handler+0x4>

080030f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <BusFault_Handler+0x4>

080030f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <UsageFault_Handler+0x4>

08003100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800312e:	f000 fee5 	bl	8003efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800313c:	4802      	ldr	r0, [pc, #8]	@ (8003148 <ADC_IRQHandler+0x10>)
 800313e:	f000 ff64 	bl	800400a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000104 	.word	0x20000104

0800314c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003150:	4802      	ldr	r0, [pc, #8]	@ (800315c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003152:	f005 f8af 	bl	80082b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000384 	.word	0x20000384

08003160 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003164:	4802      	ldr	r0, [pc, #8]	@ (8003170 <DMA2_Stream0_IRQHandler+0x10>)
 8003166:	f001 ff1b 	bl	8004fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000014c 	.word	0x2000014c

08003174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800317c:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <_sbrk+0x5c>)
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <_sbrk+0x60>)
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8003188:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <_sbrk+0x64>)
 8003192:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <_sbrk+0x68>)
 8003194:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8003196:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <_sbrk+0x64>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d207      	bcs.n	80031b4 <_sbrk+0x40>
	{
		errno = ENOMEM;
 80031a4:	f006 fb9c 	bl	80098e0 <__errno>
 80031a8:	4603      	mov	r3, r0
 80031aa:	220c      	movs	r2, #12
 80031ac:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	e009      	b.n	80031c8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80031b4:	4b08      	ldr	r3, [pc, #32]	@ (80031d8 <_sbrk+0x64>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80031ba:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a05      	ldr	r2, [pc, #20]	@ (80031d8 <_sbrk+0x64>)
 80031c4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20020000 	.word	0x20020000
 80031d4:	00000400 	.word	0x00000400
 80031d8:	20000834 	.word	0x20000834
 80031dc:	20004b80 	.word	0x20004b80

080031e0 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <SystemInit+0x20>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ea:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <SystemInit+0x20>)
 80031ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <TCA9534_Init>:

uint32_t bit_config(uint32_t word, uint32_t bit_number, uint32_t bit_value);

// Functions
ErrorStatus TCA9534_Init(uint8_t device_addr, uint8_t direction)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	4603      	mov	r3, r0
 800320c:	460a      	mov	r2, r1
 800320e:	71fb      	strb	r3, [r7, #7]
 8003210:	4613      	mov	r3, r2
 8003212:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];

	if (HAL_I2C_IsDeviceReady(&TCA9534_I2C_HANDLER, device_addr, 3, 20000) != HAL_OK)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	b299      	uxth	r1, r3
 8003218:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800321c:	2203      	movs	r2, #3
 800321e:	480e      	ldr	r0, [pc, #56]	@ (8003258 <TCA9534_Init+0x54>)
 8003220:	f002 ff84 	bl	800612c <HAL_I2C_IsDeviceReady>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <TCA9534_Init+0x2a>
	{
		// Return error
		return ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e00f      	b.n	800324e <TCA9534_Init+0x4a>
	}

	buf[0] = TCA9534_CONFIG_REG;
 800322e:	2303      	movs	r3, #3
 8003230:	733b      	strb	r3, [r7, #12]
	buf[1] = direction;
 8003232:	79bb      	ldrb	r3, [r7, #6]
 8003234:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&TCA9534_I2C_HANDLER, device_addr, buf, 2, HAL_MAX_DELAY);
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	b299      	uxth	r1, r3
 800323a:	f107 020c 	add.w	r2, r7, #12
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2302      	movs	r3, #2
 8003246:	4804      	ldr	r0, [pc, #16]	@ (8003258 <TCA9534_Init+0x54>)
 8003248:	f002 fc40 	bl	8005acc <HAL_I2C_Master_Transmit>

	return SUCCESS;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200001ac 	.word	0x200001ac

0800325c <TCA9534_Write_Output_Reg>:

void TCA9534_Write_Output_Reg(uint8_t device_addr, uint8_t byte)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	4603      	mov	r3, r0
 8003264:	460a      	mov	r2, r1
 8003266:	71fb      	strb	r3, [r7, #7]
 8003268:	4613      	mov	r3, r2
 800326a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = TCA9534_OUTPUT_REG;
 800326c:	2301      	movs	r3, #1
 800326e:	733b      	strb	r3, [r7, #12]
	buf[1] = byte;
 8003270:	79bb      	ldrb	r3, [r7, #6]
 8003272:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&TCA9534_I2C_HANDLER, device_addr, buf, 2, HAL_MAX_DELAY);
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	b299      	uxth	r1, r3
 8003278:	f107 020c 	add.w	r2, r7, #12
 800327c:	f04f 33ff 	mov.w	r3, #4294967295
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2302      	movs	r3, #2
 8003284:	4803      	ldr	r0, [pc, #12]	@ (8003294 <TCA9534_Write_Output_Reg+0x38>)
 8003286:	f002 fc21 	bl	8005acc <HAL_I2C_Master_Transmit>
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200001ac 	.word	0x200001ac

08003298 <TCA9534_Read_Input_Reg>:

uint8_t TCA9534_Read_Input_Reg(uint8_t device_addr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af02      	add	r7, sp, #8
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];

	buf[0] = TCA9534_INPUT_REG;
 80032a2:	2300      	movs	r3, #0
 80032a4:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&TCA9534_I2C_HANDLER, device_addr, buf, 1, HAL_MAX_DELAY);
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	b299      	uxth	r1, r3
 80032aa:	f107 020c 	add.w	r2, r7, #12
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2301      	movs	r3, #1
 80032b6:	4809      	ldr	r0, [pc, #36]	@ (80032dc <TCA9534_Read_Input_Reg+0x44>)
 80032b8:	f002 fc08 	bl	8005acc <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&TCA9534_I2C_HANDLER, device_addr, buf, 1, HAL_MAX_DELAY);
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	b299      	uxth	r1, r3
 80032c0:	f107 020c 	add.w	r2, r7, #12
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	2301      	movs	r3, #1
 80032cc:	4803      	ldr	r0, [pc, #12]	@ (80032dc <TCA9534_Read_Input_Reg+0x44>)
 80032ce:	f002 fcfb 	bl	8005cc8 <HAL_I2C_Master_Receive>

	return buf[0];
 80032d2:	7b3b      	ldrb	r3, [r7, #12]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	200001ac 	.word	0x200001ac

080032e0 <TCA9534_Read_Output_Reg>:

uint8_t TCA9534_Read_Output_Reg(uint8_t device_addr)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];

	buf[0] = TCA9534_OUTPUT_REG;
 80032ea:	2301      	movs	r3, #1
 80032ec:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&TCA9534_I2C_HANDLER, device_addr, buf, 1, HAL_MAX_DELAY);
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	b299      	uxth	r1, r3
 80032f2:	f107 020c 	add.w	r2, r7, #12
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2301      	movs	r3, #1
 80032fe:	4809      	ldr	r0, [pc, #36]	@ (8003324 <TCA9534_Read_Output_Reg+0x44>)
 8003300:	f002 fbe4 	bl	8005acc <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&TCA9534_I2C_HANDLER, device_addr, buf, 1, HAL_MAX_DELAY);
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	b299      	uxth	r1, r3
 8003308:	f107 020c 	add.w	r2, r7, #12
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2301      	movs	r3, #1
 8003314:	4803      	ldr	r0, [pc, #12]	@ (8003324 <TCA9534_Read_Output_Reg+0x44>)
 8003316:	f002 fcd7 	bl	8005cc8 <HAL_I2C_Master_Receive>

	return buf[0];
 800331a:	7b3b      	ldrb	r3, [r7, #12]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	200001ac 	.word	0x200001ac

08003328 <Read_PB_All>:

// ########################################################################
// Board Specific Code
// ########################################################################
void Read_PB_All(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
    uint8_t read_byte = TCA9534_Read_Input_Reg(TCA9534_ADDR_0);
 800332e:	2040      	movs	r0, #64	@ 0x40
 8003330:	f7ff ffb2 	bl	8003298 <TCA9534_Read_Input_Reg>
 8003334:	4603      	mov	r3, r0
 8003336:	71fb      	strb	r3, [r7, #7]

    pb_pressed_fwd  = (read_byte & PB_FWD_MASK)  ? 0 : 1;
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	4b13      	ldr	r3, [pc, #76]	@ (8003398 <Read_PB_All+0x70>)
 800334c:	701a      	strb	r2, [r3, #0]
    pb_pressed_rev  = (read_byte & PB_REV_MASK)  ? 0 : 1;
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <Read_PB_All+0x74>)
 8003362:	701a      	strb	r2, [r3, #0]
    pb_pressed_stop = (read_byte & PB_STOP_MASK) ? 0 : 1;
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4b0a      	ldr	r3, [pc, #40]	@ (80033a0 <Read_PB_All+0x78>)
 8003378:	701a      	strb	r2, [r3, #0]
    pb_pressed_menu = (read_byte & PB_MENU_MASK) ? 0 : 1;
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <Read_PB_All+0x7c>)
 800338e:	701a      	strb	r2, [r3, #0]
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000a0b 	.word	0x20000a0b
 800339c:	20000a0c 	.word	0x20000a0c
 80033a0:	20000a0d 	.word	0x20000a0d
 80033a4:	20000a0e 	.word	0x20000a0e

080033a8 <Write_LED>:
{
	return HAL_GPIO_ReadPin(INT_N_GPIO_Port, INT_N_Pin);
}

void Write_LED(uint8_t state, uint8_t led_number)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	460a      	mov	r2, r1
 80033b2:	71fb      	strb	r3, [r7, #7]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_value = TCA9534_Read_Output_Reg(TCA9534_ADDR_0);
 80033b8:	2040      	movs	r0, #64	@ 0x40
 80033ba:	f7ff ff91 	bl	80032e0 <TCA9534_Read_Output_Reg>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]

	reg_value = bit_config(reg_value, led_number, state);
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	79b9      	ldrb	r1, [r7, #6]
 80033c6:	79fa      	ldrb	r2, [r7, #7]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f841 	bl	8003450 <bit_config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	73fb      	strb	r3, [r7, #15]

	TCA9534_Write_Output_Reg(TCA9534_ADDR_0, reg_value);
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	4619      	mov	r1, r3
 80033d6:	2040      	movs	r0, #64	@ 0x40
 80033d8:	f7ff ff40 	bl	800325c <TCA9534_Write_Output_Reg>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <Write_4LED>:

void Write_4LED(uint8_t led_fwd, uint8_t led_rev, uint8_t led_stop, uint8_t led_menu)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4604      	mov	r4, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4623      	mov	r3, r4
 80033f4:	71fb      	strb	r3, [r7, #7]
 80033f6:	4603      	mov	r3, r0
 80033f8:	71bb      	strb	r3, [r7, #6]
 80033fa:	460b      	mov	r3, r1
 80033fc:	717b      	strb	r3, [r7, #5]
 80033fe:	4613      	mov	r3, r2
 8003400:	713b      	strb	r3, [r7, #4]
    uint8_t reg_value = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]

    // Set New Values
    if (led_fwd)  reg_value |= LED_FWD_MASK;
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <Write_4LED+0x30>
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	f043 0310 	orr.w	r3, r3, #16
 8003412:	73fb      	strb	r3, [r7, #15]
    if (led_rev)  reg_value |= LED_REV_MASK;
 8003414:	79bb      	ldrb	r3, [r7, #6]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <Write_4LED+0x3e>
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	f043 0320 	orr.w	r3, r3, #32
 8003420:	73fb      	strb	r3, [r7, #15]
    if (led_stop) reg_value |= LED_STOP_MASK;
 8003422:	797b      	ldrb	r3, [r7, #5]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <Write_4LED+0x4c>
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800342e:	73fb      	strb	r3, [r7, #15]
    if (led_menu) reg_value |= LED_MENU_MASK;
 8003430:	793b      	ldrb	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <Write_4LED+0x5a>
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800343c:	73fb      	strb	r3, [r7, #15]

    TCA9534_Write_Output_Reg(TCA9534_ADDR_0, reg_value);
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	4619      	mov	r1, r3
 8003442:	2040      	movs	r0, #64	@ 0x40
 8003444:	f7ff ff0a 	bl	800325c <TCA9534_Write_Output_Reg>
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bd90      	pop	{r4, r7, pc}

08003450 <bit_config>:

uint32_t bit_config(uint32_t word, uint32_t bit_number, uint32_t bit_value)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
	uint32_t word_temp = word;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	617b      	str	r3, [r7, #20]
	word_temp ^= (-bit_value ^ word_temp) & (1 << bit_number);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	425a      	negs	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4053      	eors	r3, r2
 8003468:	2101      	movs	r1, #1
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	4013      	ands	r3, r2
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4053      	eors	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
	return word_temp;
 8003478:	697b      	ldr	r3, [r7, #20]
}
 800347a:	4618      	mov	r0, r3
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <Values_Init>:
uint16_t ampl_div;


// Functions
ErrorStatus Values_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
	if (M24C0X_Init(EEPROM_DEV_ADDR) != SUCCESS)
 800348e:	20a0      	movs	r0, #160	@ 0xa0
 8003490:	f7fd fe50 	bl	8001134 <M24C0X_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <Values_Init+0x16>
	{
		return ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e163      	b.n	8003766 <Values_Init+0x2de>
	}

	for(uint8_t z = 0; z<PARAMETER_COUNT; z++)
 800349e:	2300      	movs	r3, #0
 80034a0:	71fb      	strb	r3, [r7, #7]
 80034a2:	e03a      	b.n	800351a <Values_Init+0x92>
	{
		strncpy(param[z].parameter_string, setup_strings[z], sizeof(param[z].parameter_string) - 1);
 80034a4:	79fa      	ldrb	r2, [r7, #7]
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4ab0      	ldr	r2, [pc, #704]	@ (8003770 <Values_Init+0x2e8>)
 80034b0:	1898      	adds	r0, r3, r2
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	4aaf      	ldr	r2, [pc, #700]	@ (8003774 <Values_Init+0x2ec>)
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	220e      	movs	r2, #14
 80034bc:	4619      	mov	r1, r3
 80034be:	f006 f9fb 	bl	80098b8 <strncpy>
		param[z].max_val = max_values[z];
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	79fa      	ldrb	r2, [r7, #7]
 80034c6:	49ac      	ldr	r1, [pc, #688]	@ (8003778 <Values_Init+0x2f0>)
 80034c8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80034cc:	49a8      	ldr	r1, [pc, #672]	@ (8003770 <Values_Init+0x2e8>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	3314      	adds	r3, #20
 80034da:	4602      	mov	r2, r0
 80034dc:	801a      	strh	r2, [r3, #0]
		param[z].default_val = default_values[z];
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	79fa      	ldrb	r2, [r7, #7]
 80034e2:	49a6      	ldr	r1, [pc, #664]	@ (800377c <Values_Init+0x2f4>)
 80034e4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80034e8:	49a1      	ldr	r1, [pc, #644]	@ (8003770 <Values_Init+0x2e8>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	3312      	adds	r3, #18
 80034f6:	4602      	mov	r2, r0
 80034f8:	801a      	strh	r2, [r3, #0]
		param[z].eeprom_addr = eeprom_address_values[z];
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	79fa      	ldrb	r2, [r7, #7]
 80034fe:	49a0      	ldr	r1, [pc, #640]	@ (8003780 <Values_Init+0x2f8>)
 8003500:	5cc8      	ldrb	r0, [r1, r3]
 8003502:	499b      	ldr	r1, [pc, #620]	@ (8003770 <Values_Init+0x2e8>)
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	3316      	adds	r3, #22
 8003510:	4602      	mov	r2, r0
 8003512:	701a      	strb	r2, [r3, #0]
	for(uint8_t z = 0; z<PARAMETER_COUNT; z++)
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	3301      	adds	r3, #1
 8003518:	71fb      	strb	r3, [r7, #7]
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	2b11      	cmp	r3, #17
 800351e:	d9c1      	bls.n	80034a4 <Values_Init+0x1c>
	}

	// If there is a new EEPROM, write default values to the EEPROM
	if (M24C0X_Read_Byte(EEPROM_DEV_ADDR, EEPROM_INIT_ADDR) != 0x00)
 8003520:	2100      	movs	r1, #0
 8003522:	20a0      	movs	r0, #160	@ 0xa0
 8003524:	f7fd fe42 	bl	80011ac <M24C0X_Read_Byte>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d04d      	beq.n	80035ca <Values_Init+0x142>
	{
		HAL_Delay(1);
 800352e:	2001      	movs	r0, #1
 8003530:	f000 fd04 	bl	8003f3c <HAL_Delay>
		for(uint8_t i = 0; i<PARAMETER_COUNT; i++)
 8003534:	2300      	movs	r3, #0
 8003536:	71bb      	strb	r3, [r7, #6]
 8003538:	e03f      	b.n	80035ba <Values_Init+0x132>
		{
			if(param[i].max_val > 0XFF)
 800353a:	79ba      	ldrb	r2, [r7, #6]
 800353c:	498c      	ldr	r1, [pc, #560]	@ (8003770 <Values_Init+0x2e8>)
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	440b      	add	r3, r1
 8003548:	3314      	adds	r3, #20
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	2bff      	cmp	r3, #255	@ 0xff
 800354e:	d916      	bls.n	800357e <Values_Init+0xf6>
			{
				M24C0X_Write_Word(EEPROM_DEV_ADDR, param[i].eeprom_addr, param[i].default_val);
 8003550:	79ba      	ldrb	r2, [r7, #6]
 8003552:	4987      	ldr	r1, [pc, #540]	@ (8003770 <Values_Init+0x2e8>)
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	3316      	adds	r3, #22
 8003560:	7819      	ldrb	r1, [r3, #0]
 8003562:	79ba      	ldrb	r2, [r7, #6]
 8003564:	4882      	ldr	r0, [pc, #520]	@ (8003770 <Values_Init+0x2e8>)
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4403      	add	r3, r0
 8003570:	3312      	adds	r3, #18
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	20a0      	movs	r0, #160	@ 0xa0
 8003578:	f7fd fe6c 	bl	8001254 <M24C0X_Write_Word>
 800357c:	e017      	b.n	80035ae <Values_Init+0x126>
			}
			else
			{
				uint8_t byte_to_write = param[i].default_val;
 800357e:	79ba      	ldrb	r2, [r7, #6]
 8003580:	497b      	ldr	r1, [pc, #492]	@ (8003770 <Values_Init+0x2e8>)
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	3312      	adds	r3, #18
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	70fb      	strb	r3, [r7, #3]
				M24C0X_Write_Byte(EEPROM_DEV_ADDR, param[i].eeprom_addr, byte_to_write);
 8003592:	79ba      	ldrb	r2, [r7, #6]
 8003594:	4976      	ldr	r1, [pc, #472]	@ (8003770 <Values_Init+0x2e8>)
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	3316      	adds	r3, #22
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	4619      	mov	r1, r3
 80035a8:	20a0      	movs	r0, #160	@ 0xa0
 80035aa:	f7fd fddb 	bl	8001164 <M24C0X_Write_Byte>
			}
			HAL_Delay(EEPROM_WRITE_DELAY);
 80035ae:	2014      	movs	r0, #20
 80035b0:	f000 fcc4 	bl	8003f3c <HAL_Delay>
		for(uint8_t i = 0; i<PARAMETER_COUNT; i++)
 80035b4:	79bb      	ldrb	r3, [r7, #6]
 80035b6:	3301      	adds	r3, #1
 80035b8:	71bb      	strb	r3, [r7, #6]
 80035ba:	79bb      	ldrb	r3, [r7, #6]
 80035bc:	2b11      	cmp	r3, #17
 80035be:	d9bc      	bls.n	800353a <Values_Init+0xb2>
		}

		M24C0X_Write_Byte(EEPROM_DEV_ADDR, EEPROM_INIT_ADDR, 0x00);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	20a0      	movs	r0, #160	@ 0xa0
 80035c6:	f7fd fdcd 	bl	8001164 <M24C0X_Write_Byte>
	}

	uint8_t error_counter_v = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	717b      	strb	r3, [r7, #5]

	for(uint8_t i = 0; i<PARAMETER_COUNT; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	713b      	strb	r3, [r7, #4]
 80035d2:	e071      	b.n	80036b8 <Values_Init+0x230>
	{
		HAL_Delay(1);
 80035d4:	2001      	movs	r0, #1
 80035d6:	f000 fcb1 	bl	8003f3c <HAL_Delay>

		if(param[i].max_val > 0xFF)
 80035da:	793a      	ldrb	r2, [r7, #4]
 80035dc:	4964      	ldr	r1, [pc, #400]	@ (8003770 <Values_Init+0x2e8>)
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	440b      	add	r3, r1
 80035e8:	3314      	adds	r3, #20
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	2bff      	cmp	r3, #255	@ 0xff
 80035ee:	d930      	bls.n	8003652 <Values_Init+0x1ca>
		{
			uint16_t temp_param;

			temp_param = M24C0X_Read_Word(EEPROM_DEV_ADDR, param[i].eeprom_addr);
 80035f0:	793a      	ldrb	r2, [r7, #4]
 80035f2:	495f      	ldr	r1, [pc, #380]	@ (8003770 <Values_Init+0x2e8>)
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	440b      	add	r3, r1
 80035fe:	3316      	adds	r3, #22
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	4619      	mov	r1, r3
 8003604:	20a0      	movs	r0, #160	@ 0xa0
 8003606:	f7fd fdf7 	bl	80011f8 <M24C0X_Read_Word>
 800360a:	4603      	mov	r3, r0
 800360c:	803b      	strh	r3, [r7, #0]

			param[i].parameter_val = temp_param;
 800360e:	793a      	ldrb	r2, [r7, #4]
 8003610:	4957      	ldr	r1, [pc, #348]	@ (8003770 <Values_Init+0x2e8>)
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	440b      	add	r3, r1
 800361c:	3310      	adds	r3, #16
 800361e:	883a      	ldrh	r2, [r7, #0]
 8003620:	801a      	strh	r2, [r3, #0]

			if(param[i].parameter_val != param[i].default_val)
 8003622:	793a      	ldrb	r2, [r7, #4]
 8003624:	4952      	ldr	r1, [pc, #328]	@ (8003770 <Values_Init+0x2e8>)
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	440b      	add	r3, r1
 8003630:	3310      	adds	r3, #16
 8003632:	8819      	ldrh	r1, [r3, #0]
 8003634:	793a      	ldrb	r2, [r7, #4]
 8003636:	484e      	ldr	r0, [pc, #312]	@ (8003770 <Values_Init+0x2e8>)
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4403      	add	r3, r0
 8003642:	3312      	adds	r3, #18
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	4299      	cmp	r1, r3
 8003648:	d033      	beq.n	80036b2 <Values_Init+0x22a>
			{
				error_counter_v++;
 800364a:	797b      	ldrb	r3, [r7, #5]
 800364c:	3301      	adds	r3, #1
 800364e:	717b      	strb	r3, [r7, #5]
 8003650:	e02f      	b.n	80036b2 <Values_Init+0x22a>
			}
		}
		else
		{
			param[i].parameter_val = M24C0X_Read_Byte(EEPROM_DEV_ADDR, param[i].eeprom_addr);
 8003652:	793a      	ldrb	r2, [r7, #4]
 8003654:	4946      	ldr	r1, [pc, #280]	@ (8003770 <Values_Init+0x2e8>)
 8003656:	4613      	mov	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	3316      	adds	r3, #22
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	20a0      	movs	r0, #160	@ 0xa0
 8003668:	f7fd fda0 	bl	80011ac <M24C0X_Read_Byte>
 800366c:	4603      	mov	r3, r0
 800366e:	793a      	ldrb	r2, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	493f      	ldr	r1, [pc, #252]	@ (8003770 <Values_Init+0x2e8>)
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	3310      	adds	r3, #16
 8003680:	4602      	mov	r2, r0
 8003682:	801a      	strh	r2, [r3, #0]

			if(param[i].parameter_val != param[i].default_val)
 8003684:	793a      	ldrb	r2, [r7, #4]
 8003686:	493a      	ldr	r1, [pc, #232]	@ (8003770 <Values_Init+0x2e8>)
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	440b      	add	r3, r1
 8003692:	3310      	adds	r3, #16
 8003694:	8819      	ldrh	r1, [r3, #0]
 8003696:	793a      	ldrb	r2, [r7, #4]
 8003698:	4835      	ldr	r0, [pc, #212]	@ (8003770 <Values_Init+0x2e8>)
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4403      	add	r3, r0
 80036a4:	3312      	adds	r3, #18
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	4299      	cmp	r1, r3
 80036aa:	d002      	beq.n	80036b2 <Values_Init+0x22a>
			{
				error_counter_v++;
 80036ac:	797b      	ldrb	r3, [r7, #5]
 80036ae:	3301      	adds	r3, #1
 80036b0:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i<PARAMETER_COUNT; i++)
 80036b2:	793b      	ldrb	r3, [r7, #4]
 80036b4:	3301      	adds	r3, #1
 80036b6:	713b      	strb	r3, [r7, #4]
 80036b8:	793b      	ldrb	r3, [r7, #4]
 80036ba:	2b11      	cmp	r3, #17
 80036bc:	d98a      	bls.n	80035d4 <Values_Init+0x14c>
			}
		}
	}

	// @formatter:off
	p00_freq_nominal = 		param[0].parameter_val;
 80036be:	4b2c      	ldr	r3, [pc, #176]	@ (8003770 <Values_Init+0x2e8>)
 80036c0:	8a1a      	ldrh	r2, [r3, #16]
 80036c2:	4b30      	ldr	r3, [pc, #192]	@ (8003784 <Values_Init+0x2fc>)
 80036c4:	801a      	strh	r2, [r3, #0]
	p01_voltage_nominal = 	param[1].parameter_val;
 80036c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <Values_Init+0x2e8>)
 80036c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80036ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003788 <Values_Init+0x300>)
 80036cc:	801a      	strh	r2, [r3, #0]
	p04_accel_rate = 		param[4].parameter_val;
 80036ce:	4b28      	ldr	r3, [pc, #160]	@ (8003770 <Values_Init+0x2e8>)
 80036d0:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80036d4:	4b2d      	ldr	r3, [pc, #180]	@ (800378c <Values_Init+0x304>)
 80036d6:	801a      	strh	r2, [r3, #0]
	p05_decel_rate = 		param[5].parameter_val;
 80036d8:	4b25      	ldr	r3, [pc, #148]	@ (8003770 <Values_Init+0x2e8>)
 80036da:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 80036de:	4b2c      	ldr	r3, [pc, #176]	@ (8003790 <Values_Init+0x308>)
 80036e0:	801a      	strh	r2, [r3, #0]
	p06_freq_source = 		param[6].parameter_val;
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <Values_Init+0x2e8>)
 80036e4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003794 <Values_Init+0x30c>)
 80036ec:	701a      	strb	r2, [r3, #0]
	p07_stop_mode = 		param[7].parameter_val;
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <Values_Init+0x2e8>)
 80036f0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4b28      	ldr	r3, [pc, #160]	@ (8003798 <Values_Init+0x310>)
 80036f8:	701a      	strb	r2, [r3, #0]
	p08_in_a_function = 	param[8].parameter_val;
 80036fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <Values_Init+0x2e8>)
 80036fc:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b26      	ldr	r3, [pc, #152]	@ (800379c <Values_Init+0x314>)
 8003704:	701a      	strb	r2, [r3, #0]
	p09_in_b_function = 	param[9].parameter_val;
 8003706:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <Values_Init+0x2e8>)
 8003708:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <Values_Init+0x318>)
 8003710:	701a      	strb	r2, [r3, #0]
	p10_in_c_function = 	param[10].parameter_val;
 8003712:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <Values_Init+0x2e8>)
 8003714:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b22      	ldr	r3, [pc, #136]	@ (80037a4 <Values_Init+0x31c>)
 800371c:	701a      	strb	r2, [r3, #0]
	p11_in_d_function = 	param[11].parameter_val;
 800371e:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <Values_Init+0x2e8>)
 8003720:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4b20      	ldr	r3, [pc, #128]	@ (80037a8 <Values_Init+0x320>)
 8003728:	701a      	strb	r2, [r3, #0]
	p12_in_e_function =	 	param[12].parameter_val;
 800372a:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <Values_Init+0x2e8>)
 800372c:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <Values_Init+0x324>)
 8003734:	701a      	strb	r2, [r3, #0]
	p13_reverse_forbid = 	param[13].parameter_val;
 8003736:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <Values_Init+0x2e8>)
 8003738:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b1c      	ldr	r3, [pc, #112]	@ (80037b0 <Values_Init+0x328>)
 8003740:	701a      	strb	r2, [r3, #0]
	p14_analog_in_range = 	param[14].parameter_val;
 8003742:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <Values_Init+0x2e8>)
 8003744:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <Values_Init+0x32c>)
 800374c:	701a      	strb	r2, [r3, #0]
	p15_jump_freq = 		param[15].parameter_val;
 800374e:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <Values_Init+0x2e8>)
 8003750:	f8b3 2178 	ldrh.w	r2, [r3, #376]	@ 0x178
 8003754:	4b18      	ldr	r3, [pc, #96]	@ (80037b8 <Values_Init+0x330>)
 8003756:	801a      	strh	r2, [r3, #0]
	p16_jump_rng = 			param[16].parameter_val;
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <Values_Init+0x2e8>)
 800375a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b16      	ldr	r3, [pc, #88]	@ (80037bc <Values_Init+0x334>)
 8003762:	701a      	strb	r2, [r3, #0]
	// @formatter:on

	return SUCCESS;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000858 	.word	0x20000858
 8003774:	20000030 	.word	0x20000030
 8003778:	0800dc64 	.word	0x0800dc64
 800377c:	0800dc88 	.word	0x0800dc88
 8003780:	0800dcac 	.word	0x0800dcac
 8003784:	20000842 	.word	0x20000842
 8003788:	20000844 	.word	0x20000844
 800378c:	20000846 	.word	0x20000846
 8003790:	20000848 	.word	0x20000848
 8003794:	2000084a 	.word	0x2000084a
 8003798:	2000084b 	.word	0x2000084b
 800379c:	2000084c 	.word	0x2000084c
 80037a0:	2000084d 	.word	0x2000084d
 80037a4:	2000084e 	.word	0x2000084e
 80037a8:	2000084f 	.word	0x2000084f
 80037ac:	20000850 	.word	0x20000850
 80037b0:	20000851 	.word	0x20000851
 80037b4:	20000852 	.word	0x20000852
 80037b8:	20000854 	.word	0x20000854
 80037bc:	20000856 	.word	0x20000856

080037c0 <Motor_Timers_Stop>:
extern TIM_HandleTypeDef htim12;
extern TIM_HandleTypeDef htim14;

// Functions
void Motor_Timers_Stop(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, RESET);
 80037c4:	2200      	movs	r2, #0
 80037c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037ca:	4810      	ldr	r0, [pc, #64]	@ (800380c <Motor_Timers_Stop+0x4c>)
 80037cc:	f002 f806 	bl	80057dc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80037d0:	2100      	movs	r1, #0
 80037d2:	480f      	ldr	r0, [pc, #60]	@ (8003810 <Motor_Timers_Stop+0x50>)
 80037d4:	f004 fb70 	bl	8007eb8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80037d8:	2104      	movs	r1, #4
 80037da:	480d      	ldr	r0, [pc, #52]	@ (8003810 <Motor_Timers_Stop+0x50>)
 80037dc:	f004 fb6c 	bl	8007eb8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80037e0:	2108      	movs	r1, #8
 80037e2:	480b      	ldr	r0, [pc, #44]	@ (8003810 <Motor_Timers_Stop+0x50>)
 80037e4:	f004 fb68 	bl	8007eb8 <HAL_TIM_PWM_Stop>

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80037e8:	2100      	movs	r1, #0
 80037ea:	4809      	ldr	r0, [pc, #36]	@ (8003810 <Motor_Timers_Stop+0x50>)
 80037ec:	f005 fbda 	bl	8008fa4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80037f0:	2104      	movs	r1, #4
 80037f2:	4807      	ldr	r0, [pc, #28]	@ (8003810 <Motor_Timers_Stop+0x50>)
 80037f4:	f005 fbd6 	bl	8008fa4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80037f8:	2108      	movs	r1, #8
 80037fa:	4805      	ldr	r0, [pc, #20]	@ (8003810 <Motor_Timers_Stop+0x50>)
 80037fc:	f005 fbd2 	bl	8008fa4 <HAL_TIMEx_PWMN_Stop>

	timers_started = 0;
 8003800:	4b04      	ldr	r3, [pc, #16]	@ (8003814 <Motor_Timers_Stop+0x54>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40020400 	.word	0x40020400
 8003810:	20000264 	.word	0x20000264
 8003814:	20000a12 	.word	0x20000a12

08003818 <Motor_Timers_Start>:

uint8_t Motor_Timers_Start(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
	if (timers_started == 1)
 800381e:	4b2f      	ldr	r3, [pc, #188]	@ (80038dc <Motor_Timers_Start+0xc4>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <Motor_Timers_Start+0x12>
	{
		return SUCCESS;
 8003826:	2300      	movs	r3, #0
 8003828:	e054      	b.n	80038d4 <Motor_Timers_Start+0xbc>
	}

	uint8_t error_flag = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	71fb      	strb	r3, [r7, #7]

	// Start pwm timers
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800382e:	2100      	movs	r1, #0
 8003830:	482b      	ldr	r0, [pc, #172]	@ (80038e0 <Motor_Timers_Start+0xc8>)
 8003832:	f004 fa79 	bl	8007d28 <HAL_TIM_PWM_Start>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <Motor_Timers_Start+0x28>
		error_flag = ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	71fb      	strb	r3, [r7, #7]
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8003840:	2104      	movs	r1, #4
 8003842:	4827      	ldr	r0, [pc, #156]	@ (80038e0 <Motor_Timers_Start+0xc8>)
 8003844:	f004 fa70 	bl	8007d28 <HAL_TIM_PWM_Start>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <Motor_Timers_Start+0x3a>
		error_flag = ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	71fb      	strb	r3, [r7, #7]
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8003852:	2108      	movs	r1, #8
 8003854:	4822      	ldr	r0, [pc, #136]	@ (80038e0 <Motor_Timers_Start+0xc8>)
 8003856:	f004 fa67 	bl	8007d28 <HAL_TIM_PWM_Start>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <Motor_Timers_Start+0x4c>
		error_flag = ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	71fb      	strb	r3, [r7, #7]
	if (HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8003864:	2100      	movs	r1, #0
 8003866:	481e      	ldr	r0, [pc, #120]	@ (80038e0 <Motor_Timers_Start+0xc8>)
 8003868:	f005 fae2 	bl	8008e30 <HAL_TIMEx_PWMN_Start>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <Motor_Timers_Start+0x5e>
		error_flag = ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	71fb      	strb	r3, [r7, #7]
	if (HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8003876:	2104      	movs	r1, #4
 8003878:	4819      	ldr	r0, [pc, #100]	@ (80038e0 <Motor_Timers_Start+0xc8>)
 800387a:	f005 fad9 	bl	8008e30 <HAL_TIMEx_PWMN_Start>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <Motor_Timers_Start+0x70>
		error_flag = ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	71fb      	strb	r3, [r7, #7]
	if (HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8003888:	2108      	movs	r1, #8
 800388a:	4815      	ldr	r0, [pc, #84]	@ (80038e0 <Motor_Timers_Start+0xc8>)
 800388c:	f005 fad0 	bl	8008e30 <HAL_TIMEx_PWMN_Start>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <Motor_Timers_Start+0x82>
		error_flag = ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	71fb      	strb	r3, [r7, #7]

	__HAL_TIM_SET_COUNTER(&htim14, 1);
 800389a:	4b12      	ldr	r3, [pc, #72]	@ (80038e4 <Motor_Timers_Start+0xcc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2201      	movs	r2, #1
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 80038a2:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <Motor_Timers_Start+0xcc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0201 	mvn.w	r2, #1
 80038aa:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim14);
 80038ac:	480d      	ldr	r0, [pc, #52]	@ (80038e4 <Motor_Timers_Start+0xcc>)
 80038ae:	f004 f971 	bl	8007b94 <HAL_TIM_Base_Start_IT>

	if (error_flag == ERROR)
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d103      	bne.n	80038c0 <Motor_Timers_Start+0xa8>
	{
		Motor_Timers_Stop();
 80038b8:	f7ff ff82 	bl	80037c0 <Motor_Timers_Stop>
		return ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e009      	b.n	80038d4 <Motor_Timers_Start+0xbc>
	}

	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, SET);
 80038c0:	2201      	movs	r2, #1
 80038c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038c6:	4808      	ldr	r0, [pc, #32]	@ (80038e8 <Motor_Timers_Start+0xd0>)
 80038c8:	f001 ff88 	bl	80057dc <HAL_GPIO_WritePin>

	timers_started = 1;
 80038cc:	4b03      	ldr	r3, [pc, #12]	@ (80038dc <Motor_Timers_Start+0xc4>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]

	return SUCCESS;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000a12 	.word	0x20000a12
 80038e0:	20000264 	.word	0x20000264
 80038e4:	20000384 	.word	0x20000384
 80038e8:	40020400 	.word	0x40020400
 80038ec:	00000000 	.word	0x00000000

080038f0 <Generate_LUT>:

// Fill the LUT table with sine values
void Generate_LUT(uint16_t lut_size, uint16_t max_value)
{
 80038f0:	b5b0      	push	{r4, r5, r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	460a      	mov	r2, r1
 80038fa:	80fb      	strh	r3, [r7, #6]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80bb      	strh	r3, [r7, #4]
	max_value /= 2;
 8003900:	88bb      	ldrh	r3, [r7, #4]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < lut_size; i++)
 8003906:	2300      	movs	r3, #0
 8003908:	82fb      	strh	r3, [r7, #22]
 800390a:	e047      	b.n	800399c <Generate_LUT+0xac>
	{
		double angle = 2.0 * M_PI * i / lut_size;  // Use double for all constants
 800390c:	8afb      	ldrh	r3, [r7, #22]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fe00 	bl	8000514 <__aeabi_i2d>
 8003914:	a327      	add	r3, pc, #156	@ (adr r3, 80039b4 <Generate_LUT+0xc4>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f7fc fe65 	bl	80005e8 <__aeabi_dmul>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4614      	mov	r4, r2
 8003924:	461d      	mov	r5, r3
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fdf3 	bl	8000514 <__aeabi_i2d>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4620      	mov	r0, r4
 8003934:	4629      	mov	r1, r5
 8003936:	f7fc ff81 	bl	800083c <__aeabi_ddiv>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	e9c7 2302 	strd	r2, r3, [r7, #8]

		lut[i] = (uint16_t) ((sin(angle) * max_value) + max_value); // Sine, scaled to uint16_t
 8003942:	ed97 0b02 	vldr	d0, [r7, #8]
 8003946:	f006 fc43 	bl	800a1d0 <sin>
 800394a:	ec55 4b10 	vmov	r4, r5, d0
 800394e:	88bb      	ldrh	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fddf 	bl	8000514 <__aeabi_i2d>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4620      	mov	r0, r4
 800395c:	4629      	mov	r1, r5
 800395e:	f7fc fe43 	bl	80005e8 <__aeabi_dmul>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4614      	mov	r4, r2
 8003968:	461d      	mov	r5, r3
 800396a:	88bb      	ldrh	r3, [r7, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fdd1 	bl	8000514 <__aeabi_i2d>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4620      	mov	r0, r4
 8003978:	4629      	mov	r1, r5
 800397a:	f7fc fc7f 	bl	800027c <__adddf3>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	8afc      	ldrh	r4, [r7, #22]
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f7fd f8f0 	bl	8000b6c <__aeabi_d2uiz>
 800398c:	4603      	mov	r3, r0
 800398e:	b29a      	uxth	r2, r3
 8003990:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <Generate_LUT+0xc0>)
 8003992:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint16_t i = 0; i < lut_size; i++)
 8003996:	8afb      	ldrh	r3, [r7, #22]
 8003998:	3301      	adds	r3, #1
 800399a:	82fb      	strh	r3, [r7, #22]
 800399c:	8afa      	ldrh	r2, [r7, #22]
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d3b3      	bcc.n	800390c <Generate_LUT+0x1c>
	}
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bdb0      	pop	{r4, r5, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000a18 	.word	0x20000a18
 80039b4:	54442d18 	.word	0x54442d18
 80039b8:	401921fb 	.word	0x401921fb

080039bc <VFD_Init>:
	TIM2->PSC = psc_val;
	TIM2->ARR = arr_val;
}

void VFD_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
	// Generate LUT
	Generate_LUT(LUT_SIZE, htim1.Init.Period);
 80039c0:	4b07      	ldr	r3, [pc, #28]	@ (80039e0 <VFD_Init+0x24>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4619      	mov	r1, r3
 80039c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80039cc:	f7ff ff90 	bl	80038f0 <Generate_LUT>

	// Compute point count
	point_count = sizeof(lut) / sizeof(uint16_t);
 80039d0:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <VFD_Init+0x28>)
 80039d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039d6:	801a      	strh	r2, [r3, #0]

	// Stop PWM generators
	Motor_Timers_Stop();
 80039d8:	f7ff fef2 	bl	80037c0 <Motor_Timers_Stop>
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000264 	.word	0x20000264
 80039e4:	20000a14 	.word	0x20000a14

080039e8 <VFD_Handler>:

VFD_StatusTypeDef VFD_Handler(uint16_t target_frequency, uint8_t set_direction)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	460a      	mov	r2, r1
 80039f2:	80fb      	strh	r3, [r7, #6]
 80039f4:	4613      	mov	r3, r2
 80039f6:	717b      	strb	r3, [r7, #5]
	static uint8_t stop_mode_flag = 0;
	static int16_t current_frequency = 0;  // Actual motor frequency value
	static uint32_t last_tick = 0;

	if (HAL_GPIO_ReadPin(EMERGENCY_GPIO_Port, EMERGENCY_Pin) == GPIO_PIN_RESET)
 80039f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039fc:	485d      	ldr	r0, [pc, #372]	@ (8003b74 <VFD_Handler+0x18c>)
 80039fe:	f001 fed5 	bl	80057ac <HAL_GPIO_ReadPin>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <VFD_Handler+0x26>
	{
		emergency_off = 1;
 8003a08:	4b5b      	ldr	r3, [pc, #364]	@ (8003b78 <VFD_Handler+0x190>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
	}

	// Check if a STOP order came
	if (((set_direction == SET_STOP) && p07_stop_mode) || emergency_off)
 8003a0e:	797b      	ldrb	r3, [r7, #5]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d103      	bne.n	8003a1c <VFD_Handler+0x34>
 8003a14:	4b59      	ldr	r3, [pc, #356]	@ (8003b7c <VFD_Handler+0x194>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d103      	bne.n	8003a24 <VFD_Handler+0x3c>
 8003a1c:	4b56      	ldr	r3, [pc, #344]	@ (8003b78 <VFD_Handler+0x190>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <VFD_Handler+0x48>
	{
		Motor_Timers_Stop();
 8003a24:	f7ff fecc 	bl	80037c0 <Motor_Timers_Stop>
		stop_mode_flag = 1;
 8003a28:	4b55      	ldr	r3, [pc, #340]	@ (8003b80 <VFD_Handler+0x198>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e00d      	b.n	8003a4c <VFD_Handler+0x64>
	}
	else if (stop_mode_flag && (vfd_direction == set_direction))
 8003a30:	4b53      	ldr	r3, [pc, #332]	@ (8003b80 <VFD_Handler+0x198>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <VFD_Handler+0x64>
 8003a38:	4b52      	ldr	r3, [pc, #328]	@ (8003b84 <VFD_Handler+0x19c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	797a      	ldrb	r2, [r7, #5]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d104      	bne.n	8003a4c <VFD_Handler+0x64>
	{
		Motor_Timers_Start();
 8003a42:	f7ff fee9 	bl	8003818 <Motor_Timers_Start>
		stop_mode_flag = 0;
 8003a46:	4b4e      	ldr	r3, [pc, #312]	@ (8003b80 <VFD_Handler+0x198>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
	}

	// Hold the target frequency at 0 while the set direction doesn't match the actual VFD direction
	if (vfd_direction != set_direction)
 8003a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003b84 <VFD_Handler+0x19c>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	797a      	ldrb	r2, [r7, #5]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <VFD_Handler+0x72>
	{
		target_frequency = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	80fb      	strh	r3, [r7, #6]
	}

	// Change VFD direction ONLY if the actual frequency is 0
	if (actual_frequency == 0)
 8003a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b88 <VFD_Handler+0x1a0>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d11c      	bne.n	8003a9c <VFD_Handler+0xb4>
	{
		switch (set_direction)
 8003a62:	797b      	ldrb	r3, [r7, #5]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d006      	beq.n	8003a76 <VFD_Handler+0x8e>
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	dc16      	bgt.n	8003a9a <VFD_Handler+0xb2>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <VFD_Handler+0x9a>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d00c      	beq.n	8003a8e <VFD_Handler+0xa6>
		case SET_DIR_REV:
			vfd_direction = SET_DIR_REV;
			Motor_Timers_Start();
			break;
		default:
			break;
 8003a74:	e011      	b.n	8003a9a <VFD_Handler+0xb2>
			vfd_direction = SET_DIR_FWD;
 8003a76:	4b43      	ldr	r3, [pc, #268]	@ (8003b84 <VFD_Handler+0x19c>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
			Motor_Timers_Stop();
 8003a7c:	f7ff fea0 	bl	80037c0 <Motor_Timers_Stop>
			break;
 8003a80:	e00c      	b.n	8003a9c <VFD_Handler+0xb4>
			vfd_direction = SET_DIR_FWD;
 8003a82:	4b40      	ldr	r3, [pc, #256]	@ (8003b84 <VFD_Handler+0x19c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
			Motor_Timers_Start();
 8003a88:	f7ff fec6 	bl	8003818 <Motor_Timers_Start>
			break;
 8003a8c:	e006      	b.n	8003a9c <VFD_Handler+0xb4>
			vfd_direction = SET_DIR_REV;
 8003a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b84 <VFD_Handler+0x19c>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
			Motor_Timers_Start();
 8003a94:	f7ff fec0 	bl	8003818 <Motor_Timers_Start>
			break;
 8003a98:	e000      	b.n	8003a9c <VFD_Handler+0xb4>
			break;
 8003a9a:	bf00      	nop
		}
	}

	// Calculate the time-difference between the actual and last tick
	// Get the actual time tick
	uint32_t tick_counter = HAL_GetTick();
 8003a9c:	f000 fa42 	bl	8003f24 <HAL_GetTick>
 8003aa0:	6178      	str	r0, [r7, #20]
	uint32_t tick_diff = tick_counter - last_tick;
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <VFD_Handler+0x1a4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	613b      	str	r3, [r7, #16]
	last_tick = tick_counter;
 8003aac:	4a37      	ldr	r2, [pc, #220]	@ (8003b8c <VFD_Handler+0x1a4>)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	6013      	str	r3, [r2, #0]

	// Check if the target frequency has changed
	if (target_frequency > current_frequency) // Acceleration
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	4a36      	ldr	r2, [pc, #216]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003ab6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003aba:	4293      	cmp	r3, r2
 8003abc:	dd21      	ble.n	8003b02 <VFD_Handler+0x11a>
	{
		uint16_t acceleration_step = param[4].parameter_val * tick_diff / 1000;  // Acceleration per tick
 8003abe:	4b35      	ldr	r3, [pc, #212]	@ (8003b94 <VFD_Handler+0x1ac>)
 8003ac0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	4a32      	ldr	r2, [pc, #200]	@ (8003b98 <VFD_Handler+0x1b0>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	81bb      	strh	r3, [r7, #12]
		current_frequency += acceleration_step;
 8003ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	89bb      	ldrh	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	b21a      	sxth	r2, r3
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003ae8:	801a      	strh	r2, [r3, #0]
		if (current_frequency > target_frequency)
 8003aea:	4b29      	ldr	r3, [pc, #164]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af0:	461a      	mov	r2, r3
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	dd2b      	ble.n	8003b50 <VFD_Handler+0x168>
		{
			current_frequency = target_frequency; // If the set-point is exceeded, set it to the set-point.
 8003af8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003afc:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	e026      	b.n	8003b50 <VFD_Handler+0x168>
		}
	}
	else if (target_frequency < current_frequency) // Deceleration
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	4a22      	ldr	r2, [pc, #136]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003b06:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	da20      	bge.n	8003b50 <VFD_Handler+0x168>
	{
		uint16_t deceleration_step = param[5].parameter_val * tick_diff / 1000;  // Deceleration per tick
 8003b0e:	4b21      	ldr	r3, [pc, #132]	@ (8003b94 <VFD_Handler+0x1ac>)
 8003b10:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003b14:	461a      	mov	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b98 <VFD_Handler+0x1b0>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	81fb      	strh	r3, [r7, #14]
		current_frequency -= deceleration_step;
 8003b26:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	89fb      	ldrh	r3, [r7, #14]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	b21a      	sxth	r2, r3
 8003b36:	4b16      	ldr	r3, [pc, #88]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003b38:	801a      	strh	r2, [r3, #0]
		if (current_frequency < target_frequency)
 8003b3a:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b40:	461a      	mov	r2, r3
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	da03      	bge.n	8003b50 <VFD_Handler+0x168>
		{
			current_frequency = target_frequency; // If the set-point falls bellow, set it to the set-point.
 8003b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b4c:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003b4e:	801a      	strh	r2, [r3, #0]
		}
	}

	actual_frequency = current_frequency;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <VFD_Handler+0x1a0>)
 8003b5a:	801a      	strh	r2, [r3, #0]
	actual_frequency_display = current_frequency;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <VFD_Handler+0x1a8>)
 8003b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <VFD_Handler+0x1b4>)
 8003b66:	801a      	strh	r2, [r3, #0]

	return VFD_RUNNING;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40020400 	.word	0x40020400
 8003b78:	20000a0a 	.word	0x20000a0a
 8003b7c:	2000084b 	.word	0x2000084b
 8003b80:	20004a1c 	.word	0x20004a1c
 8003b84:	20004a18 	.word	0x20004a18
 8003b88:	20004a1a 	.word	0x20004a1a
 8003b8c:	20004a20 	.word	0x20004a20
 8003b90:	20004a24 	.word	0x20004a24
 8003b94:	20000858 	.word	0x20000858
 8003b98:	10624dd3 	.word	0x10624dd3
 8003b9c:	20000a08 	.word	0x20000a08

08003ba0 <Motor_LUT_Stepper>:

// Execute all 200us
void Motor_LUT_Stepper(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
	static uint16_t ph2 = 0;
	static uint16_t ph3 = 0;

	// 120° Offset
	static uint16_t offset_120deg;
	offset_120deg = num_points / 3;  			// 120° entspricht 1/3 der Periode der vollständigen Tabelle
 8003ba4:	4b75      	ldr	r3, [pc, #468]	@ (8003d7c <Motor_LUT_Stepper+0x1dc>)
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	4a75      	ldr	r2, [pc, #468]	@ (8003d80 <Motor_LUT_Stepper+0x1e0>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	4b74      	ldr	r3, [pc, #464]	@ (8003d84 <Motor_LUT_Stepper+0x1e4>)
 8003bb4:	801a      	strh	r2, [r3, #0]

	// Assign temporary values from LUT
	ph1 = lut[index]; 									// Phase 1 bleibt unverändert, da sie die Referenz ist.
 8003bb6:	4b74      	ldr	r3, [pc, #464]	@ (8003d88 <Motor_LUT_Stepper+0x1e8>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b73      	ldr	r3, [pc, #460]	@ (8003d8c <Motor_LUT_Stepper+0x1ec>)
 8003bbe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003bc2:	4b73      	ldr	r3, [pc, #460]	@ (8003d90 <Motor_LUT_Stepper+0x1f0>)
 8003bc4:	801a      	strh	r2, [r3, #0]
	ph2 = lut[(index + offset_120deg) % num_points]; 	// Phase 2 ist um 120° (also um offset_120deg) verschoben
 8003bc6:	4b70      	ldr	r3, [pc, #448]	@ (8003d88 <Motor_LUT_Stepper+0x1e8>)
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8003d84 <Motor_LUT_Stepper+0x1e4>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4a6a      	ldr	r2, [pc, #424]	@ (8003d7c <Motor_LUT_Stepper+0x1dc>)
 8003bd4:	8812      	ldrh	r2, [r2, #0]
 8003bd6:	fb93 f1f2 	sdiv	r1, r3, r2
 8003bda:	fb01 f202 	mul.w	r2, r1, r2
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	4a6a      	ldr	r2, [pc, #424]	@ (8003d8c <Motor_LUT_Stepper+0x1ec>)
 8003be2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003be6:	4b6b      	ldr	r3, [pc, #428]	@ (8003d94 <Motor_LUT_Stepper+0x1f4>)
 8003be8:	801a      	strh	r2, [r3, #0]
	ph3 = lut[(index + 2 * offset_120deg) % num_points]; // Phase 3 ist um 240° verschoben (doppelt so viel wie Phase 2)
 8003bea:	4b67      	ldr	r3, [pc, #412]	@ (8003d88 <Motor_LUT_Stepper+0x1e8>)
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b64      	ldr	r3, [pc, #400]	@ (8003d84 <Motor_LUT_Stepper+0x1e4>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a60      	ldr	r2, [pc, #384]	@ (8003d7c <Motor_LUT_Stepper+0x1dc>)
 8003bfa:	8812      	ldrh	r2, [r2, #0]
 8003bfc:	fb93 f1f2 	sdiv	r1, r3, r2
 8003c00:	fb01 f202 	mul.w	r2, r1, r2
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	4a61      	ldr	r2, [pc, #388]	@ (8003d8c <Motor_LUT_Stepper+0x1ec>)
 8003c08:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003c0c:	4b62      	ldr	r3, [pc, #392]	@ (8003d98 <Motor_LUT_Stepper+0x1f8>)
 8003c0e:	801a      	strh	r2, [r3, #0]

	// VI curve calculation
	if (actual_frequency < p00_freq_nominal)
 8003c10:	4b62      	ldr	r3, [pc, #392]	@ (8003d9c <Motor_LUT_Stepper+0x1fc>)
 8003c12:	881a      	ldrh	r2, [r3, #0]
 8003c14:	4b62      	ldr	r3, [pc, #392]	@ (8003da0 <Motor_LUT_Stepper+0x200>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d216      	bcs.n	8003c4a <Motor_LUT_Stepper+0xaa>
	{
		amplitudeDivider = bus_voltage_meas / (((float) actual_frequency / 50.0f) * 230.0f);
 8003c1c:	4b61      	ldr	r3, [pc, #388]	@ (8003da4 <Motor_LUT_Stepper+0x204>)
 8003c1e:	edd3 6a00 	vldr	s13, [r3]
 8003c22:	4b5e      	ldr	r3, [pc, #376]	@ (8003d9c <Motor_LUT_Stepper+0x1fc>)
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2e:	ed9f 6a5e 	vldr	s12, [pc, #376]	@ 8003da8 <Motor_LUT_Stepper+0x208>
 8003c32:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8003c36:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8003dac <Motor_LUT_Stepper+0x20c>
 8003c3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c42:	4b5b      	ldr	r3, [pc, #364]	@ (8003db0 <Motor_LUT_Stepper+0x210>)
 8003c44:	edc3 7a00 	vstr	s15, [r3]
 8003c48:	e00d      	b.n	8003c66 <Motor_LUT_Stepper+0xc6>
	}
	else
	{
		amplitudeDivider = bus_voltage_meas / (float) p01_voltage_nominal;
 8003c4a:	4b56      	ldr	r3, [pc, #344]	@ (8003da4 <Motor_LUT_Stepper+0x204>)
 8003c4c:	edd3 6a00 	vldr	s13, [r3]
 8003c50:	4b58      	ldr	r3, [pc, #352]	@ (8003db4 <Motor_LUT_Stepper+0x214>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c60:	4b53      	ldr	r3, [pc, #332]	@ (8003db0 <Motor_LUT_Stepper+0x210>)
 8003c62:	edc3 7a00 	vstr	s15, [r3]
	}

	// Compute the actual voltage for monitoring
	motor_voltage_temp = bus_voltage_meas / amplitudeDivider;
 8003c66:	4b4f      	ldr	r3, [pc, #316]	@ (8003da4 <Motor_LUT_Stepper+0x204>)
 8003c68:	edd3 6a00 	vldr	s13, [r3]
 8003c6c:	4b50      	ldr	r3, [pc, #320]	@ (8003db0 <Motor_LUT_Stepper+0x210>)
 8003c6e:	ed93 7a00 	vldr	s14, [r3]
 8003c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7a:	ee17 3a90 	vmov	r3, s15
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	4b4d      	ldr	r3, [pc, #308]	@ (8003db8 <Motor_LUT_Stepper+0x218>)
 8003c82:	801a      	strh	r2, [r3, #0]

	// Scale values if using amplitude divider
	if (amplitudeDivider < 1)
 8003c84:	4b4a      	ldr	r3, [pc, #296]	@ (8003db0 <Motor_LUT_Stepper+0x210>)
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c96:	d503      	bpl.n	8003ca0 <Motor_LUT_Stepper+0x100>
	{
		amplitudeDivider = 1;
 8003c98:	4b45      	ldr	r3, [pc, #276]	@ (8003db0 <Motor_LUT_Stepper+0x210>)
 8003c9a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c9e:	601a      	str	r2, [r3, #0]
	}

	// Amplitude divider to reach the desired voltage
	ph1 /= amplitudeDivider;
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <Motor_LUT_Stepper+0x1f0>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cac:	4b40      	ldr	r3, [pc, #256]	@ (8003db0 <Motor_LUT_Stepper+0x210>)
 8003cae:	ed93 7a00 	vldr	s14, [r3]
 8003cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cba:	ee17 3a90 	vmov	r3, s15
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	4b33      	ldr	r3, [pc, #204]	@ (8003d90 <Motor_LUT_Stepper+0x1f0>)
 8003cc2:	801a      	strh	r2, [r3, #0]
	ph2 /= amplitudeDivider;
 8003cc4:	4b33      	ldr	r3, [pc, #204]	@ (8003d94 <Motor_LUT_Stepper+0x1f4>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	ee07 3a90 	vmov	s15, r3
 8003ccc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cd0:	4b37      	ldr	r3, [pc, #220]	@ (8003db0 <Motor_LUT_Stepper+0x210>)
 8003cd2:	ed93 7a00 	vldr	s14, [r3]
 8003cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cde:	ee17 3a90 	vmov	r3, s15
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d94 <Motor_LUT_Stepper+0x1f4>)
 8003ce6:	801a      	strh	r2, [r3, #0]
	ph3 /= amplitudeDivider;
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d98 <Motor_LUT_Stepper+0x1f8>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8003db0 <Motor_LUT_Stepper+0x210>)
 8003cf6:	ed93 7a00 	vldr	s14, [r3]
 8003cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d02:	ee17 3a90 	vmov	r3, s15
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	4b23      	ldr	r3, [pc, #140]	@ (8003d98 <Motor_LUT_Stepper+0x1f8>)
 8003d0a:	801a      	strh	r2, [r3, #0]

	// Set PWM duty cycle by direction
	if (vfd_direction)
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dbc <Motor_LUT_Stepper+0x21c>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <Motor_LUT_Stepper+0x18e>
	{
		TIM1->CCR1 = ph1;
 8003d14:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <Motor_LUT_Stepper+0x1f0>)
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <Motor_LUT_Stepper+0x220>)
 8003d1a:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = ph2;
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d94 <Motor_LUT_Stepper+0x1f4>)
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	4b27      	ldr	r3, [pc, #156]	@ (8003dc0 <Motor_LUT_Stepper+0x220>)
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = ph3;
 8003d24:	4b1c      	ldr	r3, [pc, #112]	@ (8003d98 <Motor_LUT_Stepper+0x1f8>)
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	4b25      	ldr	r3, [pc, #148]	@ (8003dc0 <Motor_LUT_Stepper+0x220>)
 8003d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d2c:	e00b      	b.n	8003d46 <Motor_LUT_Stepper+0x1a6>
	}
	else
	{
		TIM1->CCR1 = ph1;
 8003d2e:	4b18      	ldr	r3, [pc, #96]	@ (8003d90 <Motor_LUT_Stepper+0x1f0>)
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	4b23      	ldr	r3, [pc, #140]	@ (8003dc0 <Motor_LUT_Stepper+0x220>)
 8003d34:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = ph3;
 8003d36:	4b18      	ldr	r3, [pc, #96]	@ (8003d98 <Motor_LUT_Stepper+0x1f8>)
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	4b21      	ldr	r3, [pc, #132]	@ (8003dc0 <Motor_LUT_Stepper+0x220>)
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = ph2;
 8003d3e:	4b15      	ldr	r3, [pc, #84]	@ (8003d94 <Motor_LUT_Stepper+0x1f4>)
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc0 <Motor_LUT_Stepper+0x220>)
 8003d44:	63da      	str	r2, [r3, #60]	@ 0x3c
	{
		__HAL_TIM_SET_COUNTER(&htim14, 0);  // Setzt den Timer-Zähler auf 0
		error_trigger_counter++;
	}
	*/
	__HAL_TIM_SET_COUNTER(&htim14, 0);  // Setzt den Timer-Zähler auf 0
 8003d46:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc4 <Motor_LUT_Stepper+0x224>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Increment LUT pointer
	index += actual_frequency;
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d88 <Motor_LUT_Stepper+0x1e8>)
 8003d50:	881a      	ldrh	r2, [r3, #0]
 8003d52:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <Motor_LUT_Stepper+0x1fc>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <Motor_LUT_Stepper+0x1e8>)
 8003d5c:	801a      	strh	r2, [r3, #0]

	if (index >= point_count)
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <Motor_LUT_Stepper+0x1e8>)
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	4b19      	ldr	r3, [pc, #100]	@ (8003dc8 <Motor_LUT_Stepper+0x228>)
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <Motor_LUT_Stepper+0x1d0>
	{
		index = 0;
 8003d6a:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <Motor_LUT_Stepper+0x1e8>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	801a      	strh	r2, [r3, #0]
	}
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000078 	.word	0x20000078
 8003d80:	aaaaaaab 	.word	0xaaaaaaab
 8003d84:	20004a26 	.word	0x20004a26
 8003d88:	20004a28 	.word	0x20004a28
 8003d8c:	20000a18 	.word	0x20000a18
 8003d90:	20004a2a 	.word	0x20004a2a
 8003d94:	20004a2c 	.word	0x20004a2c
 8003d98:	20004a2e 	.word	0x20004a2e
 8003d9c:	20004a1a 	.word	0x20004a1a
 8003da0:	20000842 	.word	0x20000842
 8003da4:	2000083c 	.word	0x2000083c
 8003da8:	42480000 	.word	0x42480000
 8003dac:	43660000 	.word	0x43660000
 8003db0:	2000007c 	.word	0x2000007c
 8003db4:	20000844 	.word	0x20000844
 8003db8:	20000840 	.word	0x20000840
 8003dbc:	20004a18 	.word	0x20004a18
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	20000384 	.word	0x20000384
 8003dc8:	20000a14 	.word	0x20000a14

08003dcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	if (htim == &htim14)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a08      	ldr	r2, [pc, #32]	@ (8003df8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d108      	bne.n	8003dee <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		HAL_GPIO_TogglePin(DEBUG_GPIO_Port, DEBUG_Pin);
 8003ddc:	2140      	movs	r1, #64	@ 0x40
 8003dde:	4807      	ldr	r0, [pc, #28]	@ (8003dfc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003de0:	f001 fd15 	bl	800580e <HAL_GPIO_TogglePin>
		Motor_Timers_Stop();
 8003de4:	f7ff fcec 	bl	80037c0 <Motor_Timers_Stop>
		emergency_off = 1;
 8003de8:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
	}
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000384 	.word	0x20000384
 8003dfc:	40020000 	.word	0x40020000
 8003e00:	20000a0a 	.word	0x20000a0a

08003e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003e08:	f7ff f9ea 	bl	80031e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e0c:	480c      	ldr	r0, [pc, #48]	@ (8003e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e0e:	490d      	ldr	r1, [pc, #52]	@ (8003e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e10:	4a0d      	ldr	r2, [pc, #52]	@ (8003e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e14:	e002      	b.n	8003e1c <LoopCopyDataInit>

08003e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1a:	3304      	adds	r3, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e20:	d3f9      	bcc.n	8003e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e22:	4a0a      	ldr	r2, [pc, #40]	@ (8003e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e24:	4c0a      	ldr	r4, [pc, #40]	@ (8003e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e28:	e001      	b.n	8003e2e <LoopFillZerobss>

08003e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e2c:	3204      	adds	r2, #4

08003e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e30:	d3fb      	bcc.n	8003e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e32:	f005 fd5b 	bl	80098ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e36:	f7fd fa83 	bl	8001340 <main>
  bx  lr    
 8003e3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e44:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8003e48:	0800dee8 	.word	0x0800dee8
  ldr r2, =_sbss
 8003e4c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8003e50:	20004b7c 	.word	0x20004b7c

08003e54 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e54:	e7fe      	b.n	8003e54 <CAN1_RX0_IRQHandler>
	...

08003e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e98 <HAL_Init+0x40>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0d      	ldr	r2, [pc, #52]	@ (8003e98 <HAL_Init+0x40>)
 8003e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e68:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <HAL_Init+0x40>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e98 <HAL_Init+0x40>)
 8003e6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e74:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <HAL_Init+0x40>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a07      	ldr	r2, [pc, #28]	@ (8003e98 <HAL_Init+0x40>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e80:	2003      	movs	r0, #3
 8003e82:	f000 fed5 	bl	8004c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e86:	200f      	movs	r0, #15
 8003e88:	f000 f808 	bl	8003e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e8c:	f7fe fe58 	bl	8002b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023c00 	.word	0x40023c00

08003e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ea4:	4b12      	ldr	r3, [pc, #72]	@ (8003ef0 <HAL_InitTick+0x54>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <HAL_InitTick+0x58>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 feed 	bl	8004c9a <HAL_SYSTICK_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e00e      	b.n	8003ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b0f      	cmp	r3, #15
 8003ece:	d80a      	bhi.n	8003ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	f000 feb5 	bl	8004c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003edc:	4a06      	ldr	r2, [pc, #24]	@ (8003ef8 <HAL_InitTick+0x5c>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	2000002c 	.word	0x2000002c
 8003ef4:	20000084 	.word	0x20000084
 8003ef8:	20000080 	.word	0x20000080

08003efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_IncTick+0x20>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <HAL_IncTick+0x24>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a04      	ldr	r2, [pc, #16]	@ (8003f20 <HAL_IncTick+0x24>)
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000084 	.word	0x20000084
 8003f20:	20004a30 	.word	0x20004a30

08003f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return uwTick;
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <HAL_GetTick+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20004a30 	.word	0x20004a30

08003f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f44:	f7ff ffee 	bl	8003f24 <HAL_GetTick>
 8003f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d005      	beq.n	8003f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_Delay+0x44>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f62:	bf00      	nop
 8003f64:	f7ff ffde 	bl	8003f24 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d8f7      	bhi.n	8003f64 <HAL_Delay+0x28>
  {
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000084 	.word	0x20000084

08003f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e033      	b.n	8004002 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fe fdf4 	bl	8002b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d118      	bne.n	8003ff4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003fca:	f023 0302 	bic.w	r3, r3, #2
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fbd2 	bl	8004780 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ff2:	e001      	b.n	8003ff8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d049      	beq.n	80040d4 <HAL_ADC_IRQHandler+0xca>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d046      	beq.n	80040d4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d12b      	bne.n	80040c4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	d127      	bne.n	80040c4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800407e:	2b00      	cmp	r3, #0
 8004080:	d006      	beq.n	8004090 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800408c:	2b00      	cmp	r3, #0
 800408e:	d119      	bne.n	80040c4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0220 	bic.w	r2, r2, #32
 800409e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fc ff37 	bl	8000f38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0212 	mvn.w	r2, #18
 80040d2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d057      	beq.n	800419a <HAL_ADC_IRQHandler+0x190>
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d054      	beq.n	800419a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d139      	bne.n	800418a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004120:	2b00      	cmp	r3, #0
 8004122:	d006      	beq.n	8004132 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800412e:	2b00      	cmp	r3, #0
 8004130:	d12b      	bne.n	800418a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800413c:	2b00      	cmp	r3, #0
 800413e:	d124      	bne.n	800418a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11d      	bne.n	800418a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004152:	2b00      	cmp	r3, #0
 8004154:	d119      	bne.n	800418a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004164:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d105      	bne.n	800418a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fc76 	bl	8004a7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 020c 	mvn.w	r2, #12
 8004198:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <HAL_ADC_IRQHandler+0x1d6>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d014      	beq.n	80041e0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d10d      	bne.n	80041e0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f99f 	bl	8004514 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f06f 0201 	mvn.w	r2, #1
 80041de:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041ee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d015      	beq.n	8004222 <HAL_ADC_IRQHandler+0x218>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d012      	beq.n	8004222 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004200:	f043 0202 	orr.w	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0220 	mvn.w	r2, #32
 8004210:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f988 	bl	8004528 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0220 	mvn.w	r2, #32
 8004220:	601a      	str	r2, [r3, #0]
  }
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_ADC_Start_DMA+0x1e>
 8004246:	2302      	movs	r3, #2
 8004248:	e0e9      	b.n	800441e <HAL_ADC_Start_DMA+0x1f2>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d018      	beq.n	8004292 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004270:	4b6d      	ldr	r3, [pc, #436]	@ (8004428 <HAL_ADC_Start_DMA+0x1fc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a6d      	ldr	r2, [pc, #436]	@ (800442c <HAL_ADC_Start_DMA+0x200>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	0c9a      	lsrs	r2, r3, #18
 800427c:	4613      	mov	r3, r2
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4413      	add	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004284:	e002      	b.n	800428c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3b01      	subs	r3, #1
 800428a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f9      	bne.n	8004286 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a0:	d107      	bne.n	80042b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042b0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	f040 80a1 	bne.w	8004404 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80042ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004300:	d106      	bne.n	8004310 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	f023 0206 	bic.w	r2, r3, #6
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	645a      	str	r2, [r3, #68]	@ 0x44
 800430e:	e002      	b.n	8004316 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800431e:	4b44      	ldr	r3, [pc, #272]	@ (8004430 <HAL_ADC_Start_DMA+0x204>)
 8004320:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	4a43      	ldr	r2, [pc, #268]	@ (8004434 <HAL_ADC_Start_DMA+0x208>)
 8004328:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432e:	4a42      	ldr	r2, [pc, #264]	@ (8004438 <HAL_ADC_Start_DMA+0x20c>)
 8004330:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	4a41      	ldr	r2, [pc, #260]	@ (800443c <HAL_ADC_Start_DMA+0x210>)
 8004338:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004342:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004352:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004362:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	334c      	adds	r3, #76	@ 0x4c
 800436e:	4619      	mov	r1, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f000 fd4c 	bl	8004e10 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2b00      	cmp	r3, #0
 8004382:	d12a      	bne.n	80043da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2d      	ldr	r2, [pc, #180]	@ (8004440 <HAL_ADC_Start_DMA+0x214>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d015      	beq.n	80043ba <HAL_ADC_Start_DMA+0x18e>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2c      	ldr	r2, [pc, #176]	@ (8004444 <HAL_ADC_Start_DMA+0x218>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d105      	bne.n	80043a4 <HAL_ADC_Start_DMA+0x178>
 8004398:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <HAL_ADC_Start_DMA+0x204>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a27      	ldr	r2, [pc, #156]	@ (8004448 <HAL_ADC_Start_DMA+0x21c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d136      	bne.n	800441c <HAL_ADC_Start_DMA+0x1f0>
 80043ae:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_ADC_Start_DMA+0x204>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d130      	bne.n	800441c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d129      	bne.n	800441c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	e020      	b.n	800441c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a18      	ldr	r2, [pc, #96]	@ (8004440 <HAL_ADC_Start_DMA+0x214>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d11b      	bne.n	800441c <HAL_ADC_Start_DMA+0x1f0>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d114      	bne.n	800441c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004400:	609a      	str	r2, [r3, #8]
 8004402:	e00b      	b.n	800441c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	f043 0210 	orr.w	r2, r3, #16
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	2000002c 	.word	0x2000002c
 800442c:	431bde83 	.word	0x431bde83
 8004430:	40012300 	.word	0x40012300
 8004434:	08004979 	.word	0x08004979
 8004438:	08004a33 	.word	0x08004a33
 800443c:	08004a4f 	.word	0x08004a4f
 8004440:	40012000 	.word	0x40012000
 8004444:	40012100 	.word	0x40012100
 8004448:	40012200 	.word	0x40012200

0800444c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_ADC_Stop_DMA+0x1a>
 8004462:	2302      	movs	r3, #2
 8004464:	e048      	b.n	80044f8 <HAL_ADC_Stop_DMA+0xac>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d130      	bne.n	80044ee <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800449a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d10f      	bne.n	80044ca <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fd06 	bl	8004ec0 <HAL_DMA_Abort>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80044d8:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x1c>
 8004554:	2302      	movs	r3, #2
 8004556:	e105      	b.n	8004764 <HAL_ADC_ConfigChannel+0x228>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b09      	cmp	r3, #9
 8004566:	d925      	bls.n	80045b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68d9      	ldr	r1, [r3, #12]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	3b1e      	subs	r3, #30
 800457e:	2207      	movs	r2, #7
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43da      	mvns	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	400a      	ands	r2, r1
 800458c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68d9      	ldr	r1, [r3, #12]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	4618      	mov	r0, r3
 80045a0:	4603      	mov	r3, r0
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4403      	add	r3, r0
 80045a6:	3b1e      	subs	r3, #30
 80045a8:	409a      	lsls	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	e022      	b.n	80045fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6919      	ldr	r1, [r3, #16]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	4613      	mov	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4413      	add	r3, r2
 80045c8:	2207      	movs	r2, #7
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43da      	mvns	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	400a      	ands	r2, r1
 80045d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6919      	ldr	r1, [r3, #16]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4618      	mov	r0, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4403      	add	r3, r0
 80045f0:	409a      	lsls	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d824      	bhi.n	800464c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	3b05      	subs	r3, #5
 8004614:	221f      	movs	r2, #31
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43da      	mvns	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	400a      	ands	r2, r1
 8004622:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	4618      	mov	r0, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	3b05      	subs	r3, #5
 800463e:	fa00 f203 	lsl.w	r2, r0, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	635a      	str	r2, [r3, #52]	@ 0x34
 800464a:	e04c      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d824      	bhi.n	800469e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	3b23      	subs	r3, #35	@ 0x23
 8004666:	221f      	movs	r2, #31
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43da      	mvns	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	400a      	ands	r2, r1
 8004674:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	4618      	mov	r0, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	3b23      	subs	r3, #35	@ 0x23
 8004690:	fa00 f203 	lsl.w	r2, r0, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
 800469c:	e023      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	3b41      	subs	r3, #65	@ 0x41
 80046b0:	221f      	movs	r2, #31
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43da      	mvns	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	400a      	ands	r2, r1
 80046be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	4618      	mov	r0, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	3b41      	subs	r3, #65	@ 0x41
 80046da:	fa00 f203 	lsl.w	r2, r0, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046e6:	4b22      	ldr	r3, [pc, #136]	@ (8004770 <HAL_ADC_ConfigChannel+0x234>)
 80046e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a21      	ldr	r2, [pc, #132]	@ (8004774 <HAL_ADC_ConfigChannel+0x238>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d109      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x1cc>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b12      	cmp	r3, #18
 80046fa:	d105      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a19      	ldr	r2, [pc, #100]	@ (8004774 <HAL_ADC_ConfigChannel+0x238>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d123      	bne.n	800475a <HAL_ADC_ConfigChannel+0x21e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b10      	cmp	r3, #16
 8004718:	d003      	beq.n	8004722 <HAL_ADC_ConfigChannel+0x1e6>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b11      	cmp	r3, #17
 8004720:	d11b      	bne.n	800475a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b10      	cmp	r3, #16
 8004734:	d111      	bne.n	800475a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004736:	4b10      	ldr	r3, [pc, #64]	@ (8004778 <HAL_ADC_ConfigChannel+0x23c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a10      	ldr	r2, [pc, #64]	@ (800477c <HAL_ADC_ConfigChannel+0x240>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	0c9a      	lsrs	r2, r3, #18
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800474c:	e002      	b.n	8004754 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3b01      	subs	r3, #1
 8004752:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f9      	bne.n	800474e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40012300 	.word	0x40012300
 8004774:	40012000 	.word	0x40012000
 8004778:	2000002c 	.word	0x2000002c
 800477c:	431bde83 	.word	0x431bde83

08004780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004788:	4b79      	ldr	r3, [pc, #484]	@ (8004970 <ADC_Init+0x1f0>)
 800478a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	021a      	lsls	r2, r3, #8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80047d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6859      	ldr	r1, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6899      	ldr	r1, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	4a58      	ldr	r2, [pc, #352]	@ (8004974 <ADC_Init+0x1f4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	e00f      	b.n	800487e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800486c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800487c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0202 	bic.w	r2, r2, #2
 800488c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6899      	ldr	r1, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7e1b      	ldrb	r3, [r3, #24]
 8004898:	005a      	lsls	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01b      	beq.n	80048e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80048ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	3b01      	subs	r3, #1
 80048d8:	035a      	lsls	r2, r3, #13
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	e007      	b.n	80048f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	3b01      	subs	r3, #1
 8004910:	051a      	lsls	r2, r3, #20
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004936:	025a      	lsls	r2, r3, #9
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800494e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6899      	ldr	r1, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	029a      	lsls	r2, r3, #10
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]
}
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40012300 	.word	0x40012300
 8004974:	0f000001 	.word	0x0f000001

08004978 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800498e:	2b00      	cmp	r3, #0
 8004990:	d13c      	bne.n	8004a0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d12b      	bne.n	8004a04 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d127      	bne.n	8004a04 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d006      	beq.n	80049d0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d119      	bne.n	8004a04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0220 	bic.w	r2, r2, #32
 80049de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	f043 0201 	orr.w	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7fc fa97 	bl	8000f38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a0a:	e00e      	b.n	8004a2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff fd85 	bl	8004528 <HAL_ADC_ErrorCallback>
}
 8004a1e:	e004      	b.n	8004a2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff fd5d 	bl	8004500 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2240      	movs	r2, #64	@ 0x40
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	f043 0204 	orr.w	r2, r3, #4
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff fd5a 	bl	8004528 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004aac:	4013      	ands	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ac2:	4a04      	ldr	r2, [pc, #16]	@ (8004ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	60d3      	str	r3, [r2, #12]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	f003 0307 	and.w	r3, r3, #7
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	db0b      	blt.n	8004b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	f003 021f 	and.w	r2, r3, #31
 8004b0c:	4907      	ldr	r1, [pc, #28]	@ (8004b2c <__NVIC_EnableIRQ+0x38>)
 8004b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2001      	movs	r0, #1
 8004b16:	fa00 f202 	lsl.w	r2, r0, r2
 8004b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	e000e100 	.word	0xe000e100

08004b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	db0a      	blt.n	8004b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	490c      	ldr	r1, [pc, #48]	@ (8004b7c <__NVIC_SetPriority+0x4c>)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	0112      	lsls	r2, r2, #4
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	440b      	add	r3, r1
 8004b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b58:	e00a      	b.n	8004b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	4908      	ldr	r1, [pc, #32]	@ (8004b80 <__NVIC_SetPriority+0x50>)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	3b04      	subs	r3, #4
 8004b68:	0112      	lsls	r2, r2, #4
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	761a      	strb	r2, [r3, #24]
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e100 	.word	0xe000e100
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b089      	sub	sp, #36	@ 0x24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f1c3 0307 	rsb	r3, r3, #7
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	bf28      	it	cs
 8004ba2:	2304      	movcs	r3, #4
 8004ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d902      	bls.n	8004bb4 <NVIC_EncodePriority+0x30>
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3b03      	subs	r3, #3
 8004bb2:	e000      	b.n	8004bb6 <NVIC_EncodePriority+0x32>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	43d9      	mvns	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bdc:	4313      	orrs	r3, r2
         );
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3724      	adds	r7, #36	@ 0x24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bfc:	d301      	bcc.n	8004c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e00f      	b.n	8004c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c02:	4a0a      	ldr	r2, [pc, #40]	@ (8004c2c <SysTick_Config+0x40>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c0a:	210f      	movs	r1, #15
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	f7ff ff8e 	bl	8004b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c14:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <SysTick_Config+0x40>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c1a:	4b04      	ldr	r3, [pc, #16]	@ (8004c2c <SysTick_Config+0x40>)
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	e000e010 	.word	0xe000e010

08004c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff29 	bl	8004a90 <__NVIC_SetPriorityGrouping>
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c58:	f7ff ff3e 	bl	8004ad8 <__NVIC_GetPriorityGrouping>
 8004c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	6978      	ldr	r0, [r7, #20]
 8004c64:	f7ff ff8e 	bl	8004b84 <NVIC_EncodePriority>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ff5d 	bl	8004b30 <__NVIC_SetPriority>
}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	4603      	mov	r3, r0
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ff31 	bl	8004af4 <__NVIC_EnableIRQ>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ffa2 	bl	8004bec <SysTick_Config>
 8004ca8:	4603      	mov	r3, r0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004cc0:	f7ff f930 	bl	8003f24 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e099      	b.n	8004e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cf0:	e00f      	b.n	8004d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cf2:	f7ff f917 	bl	8003f24 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b05      	cmp	r3, #5
 8004cfe:	d908      	bls.n	8004d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2203      	movs	r2, #3
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e078      	b.n	8004e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e8      	bne.n	8004cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4b38      	ldr	r3, [pc, #224]	@ (8004e0c <HAL_DMA_Init+0x158>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d107      	bne.n	8004d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d74:	4313      	orrs	r3, r2
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0307 	bic.w	r3, r3, #7
 8004d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d117      	bne.n	8004dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fadf 	bl	800537c <DMA_CheckFifoParam>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2240      	movs	r2, #64	@ 0x40
 8004dc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e016      	b.n	8004e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa96 	bl	8005310 <DMA_CalcBaseAndBitshift>
 8004de4:	4603      	mov	r3, r0
 8004de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dec:	223f      	movs	r2, #63	@ 0x3f
 8004dee:	409a      	lsls	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	f010803f 	.word	0xf010803f

08004e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_DMA_Start_IT+0x26>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e040      	b.n	8004eb8 <HAL_DMA_Start_IT+0xa8>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d12f      	bne.n	8004eaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fa28 	bl	80052b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e68:	223f      	movs	r2, #63	@ 0x3f
 8004e6a:	409a      	lsls	r2, r3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0216 	orr.w	r2, r2, #22
 8004e7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e005      	b.n	8004eb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ecc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ece:	f7ff f829 	bl	8003f24 <HAL_GetTick>
 8004ed2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d008      	beq.n	8004ef2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2280      	movs	r2, #128	@ 0x80
 8004ee4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e052      	b.n	8004f98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0216 	bic.w	r2, r2, #22
 8004f00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_DMA_Abort+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0208 	bic.w	r2, r2, #8
 8004f30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f42:	e013      	b.n	8004f6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f44:	f7fe ffee 	bl	8003f24 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d90c      	bls.n	8004f6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e015      	b.n	8004f98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e4      	bne.n	8004f44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7e:	223f      	movs	r2, #63	@ 0x3f
 8004f80:	409a      	lsls	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fac:	4b8e      	ldr	r3, [pc, #568]	@ (80051e8 <HAL_DMA_IRQHandler+0x248>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a8e      	ldr	r2, [pc, #568]	@ (80051ec <HAL_DMA_IRQHandler+0x24c>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	0a9b      	lsrs	r3, r3, #10
 8004fb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fca:	2208      	movs	r2, #8
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01a      	beq.n	800500c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005004:	f043 0201 	orr.w	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d012      	beq.n	8005042 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502e:	2201      	movs	r2, #1
 8005030:	409a      	lsls	r2, r3
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503a:	f043 0202 	orr.w	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	2204      	movs	r2, #4
 8005048:	409a      	lsls	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4013      	ands	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d012      	beq.n	8005078 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00b      	beq.n	8005078 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005064:	2204      	movs	r2, #4
 8005066:	409a      	lsls	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005070:	f043 0204 	orr.w	r2, r3, #4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	2210      	movs	r2, #16
 800507e:	409a      	lsls	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d043      	beq.n	8005110 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d03c      	beq.n	8005110 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509a:	2210      	movs	r2, #16
 800509c:	409a      	lsls	r2, r3
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d018      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d108      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d024      	beq.n	8005110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	4798      	blx	r3
 80050ce:	e01f      	b.n	8005110 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01b      	beq.n	8005110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
 80050e0:	e016      	b.n	8005110 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d107      	bne.n	8005100 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0208 	bic.w	r2, r2, #8
 80050fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005114:	2220      	movs	r2, #32
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 808f 	beq.w	8005240 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8087 	beq.w	8005240 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005136:	2220      	movs	r2, #32
 8005138:	409a      	lsls	r2, r3
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b05      	cmp	r3, #5
 8005148:	d136      	bne.n	80051b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0216 	bic.w	r2, r2, #22
 8005158:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005168:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_DMA_IRQHandler+0x1da>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0208 	bic.w	r2, r2, #8
 8005188:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518e:	223f      	movs	r2, #63	@ 0x3f
 8005190:	409a      	lsls	r2, r3
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d07e      	beq.n	80052ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
        }
        return;
 80051b6:	e079      	b.n	80052ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01d      	beq.n	8005202 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10d      	bne.n	80051f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d031      	beq.n	8005240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
 80051e4:	e02c      	b.n	8005240 <HAL_DMA_IRQHandler+0x2a0>
 80051e6:	bf00      	nop
 80051e8:	2000002c 	.word	0x2000002c
 80051ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d023      	beq.n	8005240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
 8005200:	e01e      	b.n	8005240 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10f      	bne.n	8005230 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0210 	bic.w	r2, r2, #16
 800521e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005244:	2b00      	cmp	r3, #0
 8005246:	d032      	beq.n	80052ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d022      	beq.n	800529a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2205      	movs	r2, #5
 8005258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	3301      	adds	r3, #1
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	429a      	cmp	r2, r3
 8005276:	d307      	bcc.n	8005288 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f2      	bne.n	800526c <HAL_DMA_IRQHandler+0x2cc>
 8005286:	e000      	b.n	800528a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005288:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
 80052aa:	e000      	b.n	80052ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80052ac:	bf00      	nop
    }
  }
}
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d108      	bne.n	80052f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052f2:	e007      	b.n	8005304 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	3b10      	subs	r3, #16
 8005320:	4a14      	ldr	r2, [pc, #80]	@ (8005374 <DMA_CalcBaseAndBitshift+0x64>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800532a:	4a13      	ldr	r2, [pc, #76]	@ (8005378 <DMA_CalcBaseAndBitshift+0x68>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b03      	cmp	r3, #3
 800533c:	d909      	bls.n	8005352 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	1d1a      	adds	r2, r3, #4
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005350:	e007      	b.n	8005362 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	aaaaaaab 	.word	0xaaaaaaab
 8005378:	0800dcc0 	.word	0x0800dcc0

0800537c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11f      	bne.n	80053d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d856      	bhi.n	800544a <DMA_CheckFifoParam+0xce>
 800539c:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <DMA_CheckFifoParam+0x28>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053c7 	.word	0x080053c7
 80053ac:	080053b5 	.word	0x080053b5
 80053b0:	0800544b 	.word	0x0800544b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d046      	beq.n	800544e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c4:	e043      	b.n	800544e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053ce:	d140      	bne.n	8005452 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d4:	e03d      	b.n	8005452 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053de:	d121      	bne.n	8005424 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d837      	bhi.n	8005456 <DMA_CheckFifoParam+0xda>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <DMA_CheckFifoParam+0x70>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005403 	.word	0x08005403
 80053f4:	080053fd 	.word	0x080053fd
 80053f8:	08005415 	.word	0x08005415
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e030      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d025      	beq.n	800545a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005412:	e022      	b.n	800545a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800541c:	d11f      	bne.n	800545e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005422:	e01c      	b.n	800545e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d903      	bls.n	8005432 <DMA_CheckFifoParam+0xb6>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d003      	beq.n	8005438 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005430:	e018      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	73fb      	strb	r3, [r7, #15]
      break;
 8005436:	e015      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	73fb      	strb	r3, [r7, #15]
      break;
 8005448:	e00b      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      break;
 800544a:	bf00      	nop
 800544c:	e00a      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
      break;
 800544e:	bf00      	nop
 8005450:	e008      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
      break;
 8005452:	bf00      	nop
 8005454:	e006      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
      break;
 8005456:	bf00      	nop
 8005458:	e004      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
      break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
      break;   
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <DMA_CheckFifoParam+0xe8>
      break;
 8005462:	bf00      	nop
    }
  } 
  
  return status; 
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop

08005474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005474:	b480      	push	{r7}
 8005476:	b089      	sub	sp, #36	@ 0x24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005486:	2300      	movs	r3, #0
 8005488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e16b      	b.n	8005768 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005490:	2201      	movs	r2, #1
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4013      	ands	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	f040 815a 	bne.w	8005762 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d005      	beq.n	80054c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d130      	bne.n	8005528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	2203      	movs	r2, #3
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054fc:	2201      	movs	r2, #1
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4013      	ands	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 0201 	and.w	r2, r3, #1
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4313      	orrs	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	2b03      	cmp	r3, #3
 8005532:	d017      	beq.n	8005564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	2203      	movs	r2, #3
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d123      	bne.n	80055b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	08da      	lsrs	r2, r3, #3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3208      	adds	r2, #8
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	220f      	movs	r2, #15
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4013      	ands	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	08da      	lsrs	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3208      	adds	r2, #8
 80055b2:	69b9      	ldr	r1, [r7, #24]
 80055b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	2203      	movs	r2, #3
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4013      	ands	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0203 	and.w	r2, r3, #3
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80b4 	beq.w	8005762 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	4b60      	ldr	r3, [pc, #384]	@ (8005780 <HAL_GPIO_Init+0x30c>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	4a5f      	ldr	r2, [pc, #380]	@ (8005780 <HAL_GPIO_Init+0x30c>)
 8005604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005608:	6453      	str	r3, [r2, #68]	@ 0x44
 800560a:	4b5d      	ldr	r3, [pc, #372]	@ (8005780 <HAL_GPIO_Init+0x30c>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005616:	4a5b      	ldr	r2, [pc, #364]	@ (8005784 <HAL_GPIO_Init+0x310>)
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	089b      	lsrs	r3, r3, #2
 800561c:	3302      	adds	r3, #2
 800561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	220f      	movs	r2, #15
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a52      	ldr	r2, [pc, #328]	@ (8005788 <HAL_GPIO_Init+0x314>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d02b      	beq.n	800569a <HAL_GPIO_Init+0x226>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a51      	ldr	r2, [pc, #324]	@ (800578c <HAL_GPIO_Init+0x318>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d025      	beq.n	8005696 <HAL_GPIO_Init+0x222>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a50      	ldr	r2, [pc, #320]	@ (8005790 <HAL_GPIO_Init+0x31c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01f      	beq.n	8005692 <HAL_GPIO_Init+0x21e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a4f      	ldr	r2, [pc, #316]	@ (8005794 <HAL_GPIO_Init+0x320>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d019      	beq.n	800568e <HAL_GPIO_Init+0x21a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a4e      	ldr	r2, [pc, #312]	@ (8005798 <HAL_GPIO_Init+0x324>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_GPIO_Init+0x216>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a4d      	ldr	r2, [pc, #308]	@ (800579c <HAL_GPIO_Init+0x328>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00d      	beq.n	8005686 <HAL_GPIO_Init+0x212>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a4c      	ldr	r2, [pc, #304]	@ (80057a0 <HAL_GPIO_Init+0x32c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <HAL_GPIO_Init+0x20e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a4b      	ldr	r2, [pc, #300]	@ (80057a4 <HAL_GPIO_Init+0x330>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d101      	bne.n	800567e <HAL_GPIO_Init+0x20a>
 800567a:	2307      	movs	r3, #7
 800567c:	e00e      	b.n	800569c <HAL_GPIO_Init+0x228>
 800567e:	2308      	movs	r3, #8
 8005680:	e00c      	b.n	800569c <HAL_GPIO_Init+0x228>
 8005682:	2306      	movs	r3, #6
 8005684:	e00a      	b.n	800569c <HAL_GPIO_Init+0x228>
 8005686:	2305      	movs	r3, #5
 8005688:	e008      	b.n	800569c <HAL_GPIO_Init+0x228>
 800568a:	2304      	movs	r3, #4
 800568c:	e006      	b.n	800569c <HAL_GPIO_Init+0x228>
 800568e:	2303      	movs	r3, #3
 8005690:	e004      	b.n	800569c <HAL_GPIO_Init+0x228>
 8005692:	2302      	movs	r3, #2
 8005694:	e002      	b.n	800569c <HAL_GPIO_Init+0x228>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <HAL_GPIO_Init+0x228>
 800569a:	2300      	movs	r3, #0
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	f002 0203 	and.w	r2, r2, #3
 80056a2:	0092      	lsls	r2, r2, #2
 80056a4:	4093      	lsls	r3, r2
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056ac:	4935      	ldr	r1, [pc, #212]	@ (8005784 <HAL_GPIO_Init+0x310>)
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	089b      	lsrs	r3, r3, #2
 80056b2:	3302      	adds	r3, #2
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ba:	4b3b      	ldr	r3, [pc, #236]	@ (80057a8 <HAL_GPIO_Init+0x334>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056de:	4a32      	ldr	r2, [pc, #200]	@ (80057a8 <HAL_GPIO_Init+0x334>)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056e4:	4b30      	ldr	r3, [pc, #192]	@ (80057a8 <HAL_GPIO_Init+0x334>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005708:	4a27      	ldr	r2, [pc, #156]	@ (80057a8 <HAL_GPIO_Init+0x334>)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800570e:	4b26      	ldr	r3, [pc, #152]	@ (80057a8 <HAL_GPIO_Init+0x334>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	43db      	mvns	r3, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4013      	ands	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005732:	4a1d      	ldr	r2, [pc, #116]	@ (80057a8 <HAL_GPIO_Init+0x334>)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005738:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <HAL_GPIO_Init+0x334>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800575c:	4a12      	ldr	r2, [pc, #72]	@ (80057a8 <HAL_GPIO_Init+0x334>)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3301      	adds	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b0f      	cmp	r3, #15
 800576c:	f67f ae90 	bls.w	8005490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3724      	adds	r7, #36	@ 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	40013800 	.word	0x40013800
 8005788:	40020000 	.word	0x40020000
 800578c:	40020400 	.word	0x40020400
 8005790:	40020800 	.word	0x40020800
 8005794:	40020c00 	.word	0x40020c00
 8005798:	40021000 	.word	0x40021000
 800579c:	40021400 	.word	0x40021400
 80057a0:	40021800 	.word	0x40021800
 80057a4:	40021c00 	.word	0x40021c00
 80057a8:	40013c00 	.word	0x40013c00

080057ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
 80057c8:	e001      	b.n	80057ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
 80057e8:	4613      	mov	r3, r2
 80057ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057ec:	787b      	ldrb	r3, [r7, #1]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057f2:	887a      	ldrh	r2, [r7, #2]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057f8:	e003      	b.n	8005802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057fa:	887b      	ldrh	r3, [r7, #2]
 80057fc:	041a      	lsls	r2, r3, #16
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	619a      	str	r2, [r3, #24]
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005820:	887a      	ldrh	r2, [r7, #2]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4013      	ands	r3, r2
 8005826:	041a      	lsls	r2, r3, #16
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	43d9      	mvns	r1, r3
 800582c:	887b      	ldrh	r3, [r7, #2]
 800582e:	400b      	ands	r3, r1
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	619a      	str	r2, [r3, #24]
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e12b      	b.n	8005aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fd fa10 	bl	8002c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2224      	movs	r2, #36	@ 0x24
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058a8:	f001 fdb4 	bl	8007414 <HAL_RCC_GetPCLK1Freq>
 80058ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4a81      	ldr	r2, [pc, #516]	@ (8005ab8 <HAL_I2C_Init+0x274>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d807      	bhi.n	80058c8 <HAL_I2C_Init+0x84>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a80      	ldr	r2, [pc, #512]	@ (8005abc <HAL_I2C_Init+0x278>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	bf94      	ite	ls
 80058c0:	2301      	movls	r3, #1
 80058c2:	2300      	movhi	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	e006      	b.n	80058d6 <HAL_I2C_Init+0x92>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a7d      	ldr	r2, [pc, #500]	@ (8005ac0 <HAL_I2C_Init+0x27c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	bf94      	ite	ls
 80058d0:	2301      	movls	r3, #1
 80058d2:	2300      	movhi	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0e7      	b.n	8005aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a78      	ldr	r2, [pc, #480]	@ (8005ac4 <HAL_I2C_Init+0x280>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	0c9b      	lsrs	r3, r3, #18
 80058e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ab8 <HAL_I2C_Init+0x274>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d802      	bhi.n	8005918 <HAL_I2C_Init+0xd4>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	3301      	adds	r3, #1
 8005916:	e009      	b.n	800592c <HAL_I2C_Init+0xe8>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800591e:	fb02 f303 	mul.w	r3, r2, r3
 8005922:	4a69      	ldr	r2, [pc, #420]	@ (8005ac8 <HAL_I2C_Init+0x284>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	099b      	lsrs	r3, r3, #6
 800592a:	3301      	adds	r3, #1
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	430b      	orrs	r3, r1
 8005932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800593e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	495c      	ldr	r1, [pc, #368]	@ (8005ab8 <HAL_I2C_Init+0x274>)
 8005948:	428b      	cmp	r3, r1
 800594a:	d819      	bhi.n	8005980 <HAL_I2C_Init+0x13c>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	1e59      	subs	r1, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	fbb1 f3f3 	udiv	r3, r1, r3
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005960:	400b      	ands	r3, r1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_I2C_Init+0x138>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1e59      	subs	r1, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	fbb1 f3f3 	udiv	r3, r1, r3
 8005974:	3301      	adds	r3, #1
 8005976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597a:	e051      	b.n	8005a20 <HAL_I2C_Init+0x1dc>
 800597c:	2304      	movs	r3, #4
 800597e:	e04f      	b.n	8005a20 <HAL_I2C_Init+0x1dc>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d111      	bne.n	80059ac <HAL_I2C_Init+0x168>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1e58      	subs	r0, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6859      	ldr	r1, [r3, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	440b      	add	r3, r1
 8005996:	fbb0 f3f3 	udiv	r3, r0, r3
 800599a:	3301      	adds	r3, #1
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	e012      	b.n	80059d2 <HAL_I2C_Init+0x18e>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1e58      	subs	r0, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	0099      	lsls	r1, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c2:	3301      	adds	r3, #1
 80059c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Init+0x196>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e022      	b.n	8005a20 <HAL_I2C_Init+0x1dc>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10e      	bne.n	8005a00 <HAL_I2C_Init+0x1bc>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1e58      	subs	r0, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	460b      	mov	r3, r1
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	440b      	add	r3, r1
 80059f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f4:	3301      	adds	r3, #1
 80059f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059fe:	e00f      	b.n	8005a20 <HAL_I2C_Init+0x1dc>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1e58      	subs	r0, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6859      	ldr	r1, [r3, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	0099      	lsls	r1, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a16:	3301      	adds	r3, #1
 8005a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	6809      	ldr	r1, [r1, #0]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69da      	ldr	r2, [r3, #28]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6911      	ldr	r1, [r2, #16]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68d2      	ldr	r2, [r2, #12]
 8005a5a:	4311      	orrs	r1, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	000186a0 	.word	0x000186a0
 8005abc:	001e847f 	.word	0x001e847f
 8005ac0:	003d08ff 	.word	0x003d08ff
 8005ac4:	431bde83 	.word	0x431bde83
 8005ac8:	10624dd3 	.word	0x10624dd3

08005acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	460b      	mov	r3, r1
 8005ada:	817b      	strh	r3, [r7, #10]
 8005adc:	4613      	mov	r3, r2
 8005ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ae0:	f7fe fa20 	bl	8003f24 <HAL_GetTick>
 8005ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	f040 80e0 	bne.w	8005cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2319      	movs	r3, #25
 8005afa:	2201      	movs	r2, #1
 8005afc:	4970      	ldr	r1, [pc, #448]	@ (8005cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fd92 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e0d3      	b.n	8005cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_I2C_Master_Transmit+0x50>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e0cc      	b.n	8005cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d007      	beq.n	8005b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2221      	movs	r2, #33	@ 0x21
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	893a      	ldrh	r2, [r7, #8]
 8005b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a50      	ldr	r2, [pc, #320]	@ (8005cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b84:	8979      	ldrh	r1, [r7, #10]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fbfc 	bl	8006388 <I2C_MasterRequestWrite>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e08d      	b.n	8005cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005bb0:	e066      	b.n	8005c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	6a39      	ldr	r1, [r7, #32]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fe50 	bl	800685c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d107      	bne.n	8005bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e06b      	b.n	8005cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d11b      	bne.n	8005c54 <HAL_I2C_Master_Transmit+0x188>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	6a39      	ldr	r1, [r7, #32]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fe47 	bl	80068ec <I2C_WaitOnBTFFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00d      	beq.n	8005c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d107      	bne.n	8005c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e01a      	b.n	8005cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d194      	bne.n	8005bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	00100002 	.word	0x00100002
 8005cc4:	ffff0000 	.word	0xffff0000

08005cc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08c      	sub	sp, #48	@ 0x30
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	817b      	strh	r3, [r7, #10]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cdc:	f7fe f922 	bl	8003f24 <HAL_GetTick>
 8005ce0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	f040 8217 	bne.w	800611e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2319      	movs	r3, #25
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	497c      	ldr	r1, [pc, #496]	@ (8005eec <HAL_I2C_Master_Receive+0x224>)
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fc94 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
 8005d08:	e20a      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_I2C_Master_Receive+0x50>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e203      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d007      	beq.n	8005d3e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2222      	movs	r2, #34	@ 0x22
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	893a      	ldrh	r2, [r7, #8]
 8005d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ef0 <HAL_I2C_Master_Receive+0x228>)
 8005d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d80:	8979      	ldrh	r1, [r7, #10]
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fb80 	bl	800648c <I2C_MasterRequestRead>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e1c4      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d113      	bne.n	8005dc6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e198      	b.n	80060f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d11b      	bne.n	8005e06 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e178      	b.n	80060f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d11b      	bne.n	8005e46 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	e158      	b.n	80060f8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e6c:	e144      	b.n	80060f8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	f200 80f1 	bhi.w	800605a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d123      	bne.n	8005ec8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fd79 	bl	800697c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e145      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ec6:	e117      	b.n	80060f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d14e      	bne.n	8005f6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4906      	ldr	r1, [pc, #24]	@ (8005ef4 <HAL_I2C_Master_Receive+0x22c>)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fba4 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e11a      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
 8005eea:	bf00      	nop
 8005eec:	00100002 	.word	0x00100002
 8005ef0:	ffff0000 	.word	0xffff0000
 8005ef4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f6c:	e0c4      	b.n	80060f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	2200      	movs	r2, #0
 8005f76:	496c      	ldr	r1, [pc, #432]	@ (8006128 <HAL_I2C_Master_Receive+0x460>)
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fb55 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e0cb      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4955      	ldr	r1, [pc, #340]	@ (8006128 <HAL_I2C_Master_Receive+0x460>)
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fb27 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e09d      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006058:	e04e      	b.n	80060f8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800605a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fc8c 	bl	800697c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e058      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d124      	bne.n	80060f8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d107      	bne.n	80060c6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060c4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f47f aeb6 	bne.w	8005e6e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	e000      	b.n	8006120 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800611e:	2302      	movs	r3, #2
  }
}
 8006120:	4618      	mov	r0, r3
 8006122:	3728      	adds	r7, #40	@ 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	00010004 	.word	0x00010004

0800612c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	@ 0x28
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	460b      	mov	r3, r1
 800613a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800613c:	f7fd fef2 	bl	8003f24 <HAL_GetTick>
 8006140:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b20      	cmp	r3, #32
 8006150:	f040 8111 	bne.w	8006376 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	2319      	movs	r3, #25
 800615a:	2201      	movs	r2, #1
 800615c:	4988      	ldr	r1, [pc, #544]	@ (8006380 <HAL_I2C_IsDeviceReady+0x254>)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 fa62 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800616a:	2302      	movs	r3, #2
 800616c:	e104      	b.n	8006378 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_I2C_IsDeviceReady+0x50>
 8006178:	2302      	movs	r3, #2
 800617a:	e0fd      	b.n	8006378 <HAL_I2C_IsDeviceReady+0x24c>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b01      	cmp	r3, #1
 8006190:	d007      	beq.n	80061a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0201 	orr.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2224      	movs	r2, #36	@ 0x24
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a70      	ldr	r2, [pc, #448]	@ (8006384 <HAL_I2C_IsDeviceReady+0x258>)
 80061c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2200      	movs	r2, #0
 80061de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fa20 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061fc:	d103      	bne.n	8006206 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006204:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e0b6      	b.n	8006378 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800620a:	897b      	ldrh	r3, [r7, #10]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006218:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800621a:	f7fd fe83 	bl	8003f24 <HAL_GetTick>
 800621e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	bf0c      	ite	eq
 800622e:	2301      	moveq	r3, #1
 8006230:	2300      	movne	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800624e:	e025      	b.n	800629c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006250:	f7fd fe68 	bl	8003f24 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <HAL_I2C_IsDeviceReady+0x13a>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	22a0      	movs	r2, #160	@ 0xa0
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80062a6:	d005      	beq.n	80062b4 <HAL_I2C_IsDeviceReady+0x188>
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <HAL_I2C_IsDeviceReady+0x188>
 80062ae:	7dbb      	ldrb	r3, [r7, #22]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0cd      	beq.n	8006250 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d129      	bne.n	800631e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062da:	2300      	movs	r3, #0
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2319      	movs	r3, #25
 80062f6:	2201      	movs	r2, #1
 80062f8:	4921      	ldr	r1, [pc, #132]	@ (8006380 <HAL_I2C_IsDeviceReady+0x254>)
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f994 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e036      	b.n	8006378 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	e02c      	b.n	8006378 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800632c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006336:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2319      	movs	r3, #25
 800633e:	2201      	movs	r2, #1
 8006340:	490f      	ldr	r1, [pc, #60]	@ (8006380 <HAL_I2C_IsDeviceReady+0x254>)
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f970 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e012      	b.n	8006378 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	3301      	adds	r3, #1
 8006356:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	f4ff af32 	bcc.w	80061c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006376:	2302      	movs	r3, #2
  }
}
 8006378:	4618      	mov	r0, r3
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	00100002 	.word	0x00100002
 8006384:	ffff0000 	.word	0xffff0000

08006388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	603b      	str	r3, [r7, #0]
 8006394:	460b      	mov	r3, r1
 8006396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d006      	beq.n	80063b2 <I2C_MasterRequestWrite+0x2a>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d003      	beq.n	80063b2 <I2C_MasterRequestWrite+0x2a>
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063b0:	d108      	bne.n	80063c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e00b      	b.n	80063dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c8:	2b12      	cmp	r3, #18
 80063ca:	d107      	bne.n	80063dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f91d 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00d      	beq.n	8006410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006402:	d103      	bne.n	800640c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800640a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e035      	b.n	800647c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006418:	d108      	bne.n	800642c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800641a:	897b      	ldrh	r3, [r7, #10]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006428:	611a      	str	r2, [r3, #16]
 800642a:	e01b      	b.n	8006464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800642c:	897b      	ldrh	r3, [r7, #10]
 800642e:	11db      	asrs	r3, r3, #7
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f003 0306 	and.w	r3, r3, #6
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f063 030f 	orn	r3, r3, #15
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	490e      	ldr	r1, [pc, #56]	@ (8006484 <I2C_MasterRequestWrite+0xfc>)
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f966 	bl	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e010      	b.n	800647c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800645a:	897b      	ldrh	r3, [r7, #10]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4907      	ldr	r1, [pc, #28]	@ (8006488 <I2C_MasterRequestWrite+0x100>)
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f956 	bl	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	00010008 	.word	0x00010008
 8006488:	00010002 	.word	0x00010002

0800648c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	460b      	mov	r3, r1
 800649a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d006      	beq.n	80064c6 <I2C_MasterRequestRead+0x3a>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d003      	beq.n	80064c6 <I2C_MasterRequestRead+0x3a>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064c4:	d108      	bne.n	80064d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e00b      	b.n	80064f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064dc:	2b11      	cmp	r3, #17
 80064de:	d107      	bne.n	80064f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f893 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00d      	beq.n	8006524 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006516:	d103      	bne.n	8006520 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800651e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e079      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800652c:	d108      	bne.n	8006540 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800652e:	897b      	ldrh	r3, [r7, #10]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	611a      	str	r2, [r3, #16]
 800653e:	e05f      	b.n	8006600 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006540:	897b      	ldrh	r3, [r7, #10]
 8006542:	11db      	asrs	r3, r3, #7
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0306 	and.w	r3, r3, #6
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f063 030f 	orn	r3, r3, #15
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4930      	ldr	r1, [pc, #192]	@ (8006620 <I2C_MasterRequestRead+0x194>)
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f8dc 	bl	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e054      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800656e:	897b      	ldrh	r3, [r7, #10]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4929      	ldr	r1, [pc, #164]	@ (8006624 <I2C_MasterRequestRead+0x198>)
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f8cc 	bl	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e044      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f831 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065da:	d103      	bne.n	80065e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065e2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e017      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80065e8:	897b      	ldrh	r3, [r7, #10]
 80065ea:	11db      	asrs	r3, r3, #7
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 0306 	and.w	r3, r3, #6
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f063 030e 	orn	r3, r3, #14
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4907      	ldr	r1, [pc, #28]	@ (8006624 <I2C_MasterRequestRead+0x198>)
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f888 	bl	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	00010008 	.word	0x00010008
 8006624:	00010002 	.word	0x00010002

08006628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006638:	e048      	b.n	80066cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d044      	beq.n	80066cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006642:	f7fd fc6f 	bl	8003f24 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d302      	bcc.n	8006658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d139      	bne.n	80066cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	0c1b      	lsrs	r3, r3, #16
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b01      	cmp	r3, #1
 8006660:	d10d      	bne.n	800667e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	43da      	mvns	r2, r3
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4013      	ands	r3, r2
 800666e:	b29b      	uxth	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	bf0c      	ite	eq
 8006674:	2301      	moveq	r3, #1
 8006676:	2300      	movne	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	e00c      	b.n	8006698 <I2C_WaitOnFlagUntilTimeout+0x70>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	43da      	mvns	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf0c      	ite	eq
 8006690:	2301      	moveq	r3, #1
 8006692:	2300      	movne	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	429a      	cmp	r2, r3
 800669c:	d116      	bne.n	80066cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e023      	b.n	8006714 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d10d      	bne.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	43da      	mvns	r2, r3
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bf0c      	ite	eq
 80066e8:	2301      	moveq	r3, #1
 80066ea:	2300      	movne	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	e00c      	b.n	800670c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	43da      	mvns	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4013      	ands	r3, r2
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	bf0c      	ite	eq
 8006704:	2301      	moveq	r3, #1
 8006706:	2300      	movne	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	429a      	cmp	r2, r3
 8006710:	d093      	beq.n	800663a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800672a:	e071      	b.n	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800673a:	d123      	bne.n	8006784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800674a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006770:	f043 0204 	orr.w	r2, r3, #4
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e067      	b.n	8006854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678a:	d041      	beq.n	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678c:	f7fd fbca 	bl	8003f24 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d302      	bcc.n	80067a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d136      	bne.n	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d10c      	bne.n	80067c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	43da      	mvns	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bf14      	ite	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	2300      	moveq	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	e00b      	b.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	43da      	mvns	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	4013      	ands	r3, r2
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d016      	beq.n	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e021      	b.n	8006854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	0c1b      	lsrs	r3, r3, #16
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	d10c      	bne.n	8006834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	43da      	mvns	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4013      	ands	r3, r2
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	e00b      	b.n	800684c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	43da      	mvns	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf14      	ite	ne
 8006846:	2301      	movne	r3, #1
 8006848:	2300      	moveq	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	f47f af6d 	bne.w	800672c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006868:	e034      	b.n	80068d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f8e3 	bl	8006a36 <I2C_IsAcknowledgeFailed>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e034      	b.n	80068e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d028      	beq.n	80068d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006882:	f7fd fb4f 	bl	8003f24 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	429a      	cmp	r2, r3
 8006890:	d302      	bcc.n	8006898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11d      	bne.n	80068d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a2:	2b80      	cmp	r3, #128	@ 0x80
 80068a4:	d016      	beq.n	80068d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c0:	f043 0220 	orr.w	r2, r3, #32
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e007      	b.n	80068e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068de:	2b80      	cmp	r3, #128	@ 0x80
 80068e0:	d1c3      	bne.n	800686a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068f8:	e034      	b.n	8006964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f89b 	bl	8006a36 <I2C_IsAcknowledgeFailed>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e034      	b.n	8006974 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d028      	beq.n	8006964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006912:	f7fd fb07 	bl	8003f24 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	d302      	bcc.n	8006928 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11d      	bne.n	8006964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b04      	cmp	r3, #4
 8006934:	d016      	beq.n	8006964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006950:	f043 0220 	orr.w	r2, r3, #32
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e007      	b.n	8006974 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b04      	cmp	r3, #4
 8006970:	d1c3      	bne.n	80068fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006988:	e049      	b.n	8006a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b10      	cmp	r3, #16
 8006996:	d119      	bne.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0210 	mvn.w	r2, #16
 80069a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e030      	b.n	8006a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069cc:	f7fd faaa 	bl	8003f24 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d302      	bcc.n	80069e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d11d      	bne.n	8006a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ec:	2b40      	cmp	r3, #64	@ 0x40
 80069ee:	d016      	beq.n	8006a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e007      	b.n	8006a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a28:	2b40      	cmp	r3, #64	@ 0x40
 8006a2a:	d1ae      	bne.n	800698a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a4c:	d11b      	bne.n	8006a86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a72:	f043 0204 	orr.w	r2, r3, #4
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e034      	b.n	8006b10 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006aae:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006ab8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6852      	ldr	r2, [r2, #4]
 8006ac2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6892      	ldr	r2, [r2, #8]
 8006acc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006ace:	f7fd fa29 	bl	8003f24 <HAL_GetTick>
 8006ad2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ad4:	e00f      	b.n	8006af6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006ad6:	f7fd fa25 	bl	8003f24 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b31      	cmp	r3, #49	@ 0x31
 8006ae2:	d908      	bls.n	8006af6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e00c      	b.n	8006b10 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e8      	bne.n	8006ad6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006b0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006b28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e267      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d075      	beq.n	8006c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b56:	4b88      	ldr	r3, [pc, #544]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 030c 	and.w	r3, r3, #12
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d00c      	beq.n	8006b7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b62:	4b85      	ldr	r3, [pc, #532]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d112      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b6e:	4b82      	ldr	r3, [pc, #520]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b7a:	d10b      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d05b      	beq.n	8006c40 <HAL_RCC_OscConfig+0x108>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d157      	bne.n	8006c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e242      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9c:	d106      	bne.n	8006bac <HAL_RCC_OscConfig+0x74>
 8006b9e:	4b76      	ldr	r3, [pc, #472]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a75      	ldr	r2, [pc, #468]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e01d      	b.n	8006be8 <HAL_RCC_OscConfig+0xb0>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x98>
 8006bb6:	4b70      	ldr	r3, [pc, #448]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6f      	ldr	r2, [pc, #444]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e00b      	b.n	8006be8 <HAL_RCC_OscConfig+0xb0>
 8006bd0:	4b69      	ldr	r3, [pc, #420]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a68      	ldr	r2, [pc, #416]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	4b66      	ldr	r3, [pc, #408]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a65      	ldr	r2, [pc, #404]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d013      	beq.n	8006c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf0:	f7fd f998 	bl	8003f24 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bf8:	f7fd f994 	bl	8003f24 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b64      	cmp	r3, #100	@ 0x64
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e207      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0xc0>
 8006c16:	e014      	b.n	8006c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fd f984 	bl	8003f24 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c20:	f7fd f980 	bl	8003f24 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	@ 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e1f3      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c32:	4b51      	ldr	r3, [pc, #324]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0xe8>
 8006c3e:	e000      	b.n	8006c42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d063      	beq.n	8006d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c5a:	4b47      	ldr	r3, [pc, #284]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d11c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c66:	4b44      	ldr	r3, [pc, #272]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d116      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c72:	4b41      	ldr	r3, [pc, #260]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d001      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e1c7      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4937      	ldr	r1, [pc, #220]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c9e:	e03a      	b.n	8006d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d020      	beq.n	8006cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca8:	4b34      	ldr	r3, [pc, #208]	@ (8006d7c <HAL_RCC_OscConfig+0x244>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cae:	f7fd f939 	bl	8003f24 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb6:	f7fd f935 	bl	8003f24 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e1a8      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd4:	4b28      	ldr	r3, [pc, #160]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4925      	ldr	r1, [pc, #148]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]
 8006ce8:	e015      	b.n	8006d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cea:	4b24      	ldr	r3, [pc, #144]	@ (8006d7c <HAL_RCC_OscConfig+0x244>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fd f918 	bl	8003f24 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf8:	f7fd f914 	bl	8003f24 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e187      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d036      	beq.n	8006d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d016      	beq.n	8006d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d2a:	4b15      	ldr	r3, [pc, #84]	@ (8006d80 <HAL_RCC_OscConfig+0x248>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d30:	f7fd f8f8 	bl	8003f24 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d38:	f7fd f8f4 	bl	8003f24 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e167      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x200>
 8006d56:	e01b      	b.n	8006d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d58:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <HAL_RCC_OscConfig+0x248>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d5e:	f7fd f8e1 	bl	8003f24 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d64:	e00e      	b.n	8006d84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d66:	f7fd f8dd 	bl	8003f24 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d907      	bls.n	8006d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e150      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	42470000 	.word	0x42470000
 8006d80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d84:	4b88      	ldr	r3, [pc, #544]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ea      	bne.n	8006d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8097 	beq.w	8006ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da2:	4b81      	ldr	r3, [pc, #516]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	4b7d      	ldr	r3, [pc, #500]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	4a7c      	ldr	r2, [pc, #496]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dce:	4b77      	ldr	r3, [pc, #476]	@ (8006fac <HAL_RCC_OscConfig+0x474>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d118      	bne.n	8006e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dda:	4b74      	ldr	r3, [pc, #464]	@ (8006fac <HAL_RCC_OscConfig+0x474>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a73      	ldr	r2, [pc, #460]	@ (8006fac <HAL_RCC_OscConfig+0x474>)
 8006de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de6:	f7fd f89d 	bl	8003f24 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dee:	f7fd f899 	bl	8003f24 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e10c      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e00:	4b6a      	ldr	r3, [pc, #424]	@ (8006fac <HAL_RCC_OscConfig+0x474>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0f0      	beq.n	8006dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d106      	bne.n	8006e22 <HAL_RCC_OscConfig+0x2ea>
 8006e14:	4b64      	ldr	r3, [pc, #400]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e18:	4a63      	ldr	r2, [pc, #396]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e20:	e01c      	b.n	8006e5c <HAL_RCC_OscConfig+0x324>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x30c>
 8006e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e30:	f043 0304 	orr.w	r3, r3, #4
 8006e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e36:	4b5c      	ldr	r3, [pc, #368]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e42:	e00b      	b.n	8006e5c <HAL_RCC_OscConfig+0x324>
 8006e44:	4b58      	ldr	r3, [pc, #352]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e48:	4a57      	ldr	r2, [pc, #348]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e50:	4b55      	ldr	r3, [pc, #340]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e54:	4a54      	ldr	r2, [pc, #336]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d015      	beq.n	8006e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e64:	f7fd f85e 	bl	8003f24 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6c:	f7fd f85a 	bl	8003f24 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e0cb      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e82:	4b49      	ldr	r3, [pc, #292]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0ee      	beq.n	8006e6c <HAL_RCC_OscConfig+0x334>
 8006e8e:	e014      	b.n	8006eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e90:	f7fd f848 	bl	8003f24 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e98:	f7fd f844 	bl	8003f24 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e0b5      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eae:	4b3e      	ldr	r3, [pc, #248]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1ee      	bne.n	8006e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec0:	4b39      	ldr	r3, [pc, #228]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec4:	4a38      	ldr	r2, [pc, #224]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80a1 	beq.w	8007018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ed6:	4b34      	ldr	r3, [pc, #208]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 030c 	and.w	r3, r3, #12
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d05c      	beq.n	8006f9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d141      	bne.n	8006f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eea:	4b31      	ldr	r3, [pc, #196]	@ (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef0:	f7fd f818 	bl	8003f24 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef8:	f7fd f814 	bl	8003f24 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e087      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0a:	4b27      	ldr	r3, [pc, #156]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	019b      	lsls	r3, r3, #6
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f38:	061b      	lsls	r3, r3, #24
 8006f3a:	491b      	ldr	r1, [pc, #108]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f40:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f46:	f7fc ffed 	bl	8003f24 <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4e:	f7fc ffe9 	bl	8003f24 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e05c      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f60:	4b11      	ldr	r3, [pc, #68]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x416>
 8006f6c:	e054      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6e:	4b10      	ldr	r3, [pc, #64]	@ (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f74:	f7fc ffd6 	bl	8003f24 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7c:	f7fc ffd2 	bl	8003f24 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e045      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8e:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x444>
 8006f9a:	e03d      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d107      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e038      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007024 <HAL_RCC_OscConfig+0x4ec>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d028      	beq.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d121      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d11a      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d111      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d107      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800

08007028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e0cc      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800703c:	4b68      	ldr	r3, [pc, #416]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d90c      	bls.n	8007064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704a:	4b65      	ldr	r3, [pc, #404]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007052:	4b63      	ldr	r3, [pc, #396]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0b8      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d020      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800707c:	4b59      	ldr	r3, [pc, #356]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4a58      	ldr	r2, [pc, #352]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007094:	4b53      	ldr	r3, [pc, #332]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4a52      	ldr	r2, [pc, #328]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800709e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070a0:	4b50      	ldr	r3, [pc, #320]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	494d      	ldr	r1, [pc, #308]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d044      	beq.n	8007148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d107      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c6:	4b47      	ldr	r3, [pc, #284]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d119      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e07f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d107      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e6:	4b3f      	ldr	r3, [pc, #252]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e06f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f6:	4b3b      	ldr	r3, [pc, #236]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e067      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007106:	4b37      	ldr	r3, [pc, #220]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f023 0203 	bic.w	r2, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4934      	ldr	r1, [pc, #208]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	4313      	orrs	r3, r2
 8007116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007118:	f7fc ff04 	bl	8003f24 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711e:	e00a      	b.n	8007136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007120:	f7fc ff00 	bl	8003f24 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e04f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	4b2b      	ldr	r3, [pc, #172]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 020c 	and.w	r2, r3, #12
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	429a      	cmp	r2, r3
 8007146:	d1eb      	bne.n	8007120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007148:	4b25      	ldr	r3, [pc, #148]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d20c      	bcs.n	8007170 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007156:	4b22      	ldr	r3, [pc, #136]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b20      	ldr	r3, [pc, #128]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e032      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800717c:	4b19      	ldr	r3, [pc, #100]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4916      	ldr	r1, [pc, #88]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800719a:	4b12      	ldr	r3, [pc, #72]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	490e      	ldr	r1, [pc, #56]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071ae:	f000 f821 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	490a      	ldr	r1, [pc, #40]	@ (80071e8 <HAL_RCC_ClockConfig+0x1c0>)
 80071c0:	5ccb      	ldrb	r3, [r1, r3]
 80071c2:	fa22 f303 	lsr.w	r3, r2, r3
 80071c6:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <HAL_RCC_ClockConfig+0x1c4>)
 80071c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80071ca:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fc fe64 	bl	8003e9c <HAL_InitTick>

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40023c00 	.word	0x40023c00
 80071e4:	40023800 	.word	0x40023800
 80071e8:	0800dc4c 	.word	0x0800dc4c
 80071ec:	2000002c 	.word	0x2000002c
 80071f0:	20000080 	.word	0x20000080

080071f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f8:	b094      	sub	sp, #80	@ 0x50
 80071fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800720c:	4b79      	ldr	r3, [pc, #484]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 030c 	and.w	r3, r3, #12
 8007214:	2b08      	cmp	r3, #8
 8007216:	d00d      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0x40>
 8007218:	2b08      	cmp	r3, #8
 800721a:	f200 80e1 	bhi.w	80073e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <HAL_RCC_GetSysClockFreq+0x34>
 8007222:	2b04      	cmp	r3, #4
 8007224:	d003      	beq.n	800722e <HAL_RCC_GetSysClockFreq+0x3a>
 8007226:	e0db      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007228:	4b73      	ldr	r3, [pc, #460]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800722a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800722c:	e0db      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800722e:	4b72      	ldr	r3, [pc, #456]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007230:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007232:	e0d8      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007234:	4b6f      	ldr	r3, [pc, #444]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800723c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800723e:	4b6d      	ldr	r3, [pc, #436]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d063      	beq.n	8007312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800724a:	4b6a      	ldr	r3, [pc, #424]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	099b      	lsrs	r3, r3, #6
 8007250:	2200      	movs	r2, #0
 8007252:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007254:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725c:	633b      	str	r3, [r7, #48]	@ 0x30
 800725e:	2300      	movs	r3, #0
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34
 8007262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	f04f 0000 	mov.w	r0, #0
 800726e:	f04f 0100 	mov.w	r1, #0
 8007272:	0159      	lsls	r1, r3, #5
 8007274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007278:	0150      	lsls	r0, r2, #5
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4621      	mov	r1, r4
 8007280:	1a51      	subs	r1, r2, r1
 8007282:	6139      	str	r1, [r7, #16]
 8007284:	4629      	mov	r1, r5
 8007286:	eb63 0301 	sbc.w	r3, r3, r1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007298:	4659      	mov	r1, fp
 800729a:	018b      	lsls	r3, r1, #6
 800729c:	4651      	mov	r1, sl
 800729e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072a2:	4651      	mov	r1, sl
 80072a4:	018a      	lsls	r2, r1, #6
 80072a6:	4651      	mov	r1, sl
 80072a8:	ebb2 0801 	subs.w	r8, r2, r1
 80072ac:	4659      	mov	r1, fp
 80072ae:	eb63 0901 	sbc.w	r9, r3, r1
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072c6:	4690      	mov	r8, r2
 80072c8:	4699      	mov	r9, r3
 80072ca:	4623      	mov	r3, r4
 80072cc:	eb18 0303 	adds.w	r3, r8, r3
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	462b      	mov	r3, r5
 80072d4:	eb49 0303 	adc.w	r3, r9, r3
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072e6:	4629      	mov	r1, r5
 80072e8:	028b      	lsls	r3, r1, #10
 80072ea:	4621      	mov	r1, r4
 80072ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072f0:	4621      	mov	r1, r4
 80072f2:	028a      	lsls	r2, r1, #10
 80072f4:	4610      	mov	r0, r2
 80072f6:	4619      	mov	r1, r3
 80072f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072fa:	2200      	movs	r2, #0
 80072fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007304:	f7f9 fc52 	bl	8000bac <__aeabi_uldivmod>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4613      	mov	r3, r2
 800730e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007310:	e058      	b.n	80073c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007312:	4b38      	ldr	r3, [pc, #224]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	099b      	lsrs	r3, r3, #6
 8007318:	2200      	movs	r2, #0
 800731a:	4618      	mov	r0, r3
 800731c:	4611      	mov	r1, r2
 800731e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007322:	623b      	str	r3, [r7, #32]
 8007324:	2300      	movs	r3, #0
 8007326:	627b      	str	r3, [r7, #36]	@ 0x24
 8007328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800732c:	4642      	mov	r2, r8
 800732e:	464b      	mov	r3, r9
 8007330:	f04f 0000 	mov.w	r0, #0
 8007334:	f04f 0100 	mov.w	r1, #0
 8007338:	0159      	lsls	r1, r3, #5
 800733a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800733e:	0150      	lsls	r0, r2, #5
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4641      	mov	r1, r8
 8007346:	ebb2 0a01 	subs.w	sl, r2, r1
 800734a:	4649      	mov	r1, r9
 800734c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800735c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007364:	ebb2 040a 	subs.w	r4, r2, sl
 8007368:	eb63 050b 	sbc.w	r5, r3, fp
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	00eb      	lsls	r3, r5, #3
 8007376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800737a:	00e2      	lsls	r2, r4, #3
 800737c:	4614      	mov	r4, r2
 800737e:	461d      	mov	r5, r3
 8007380:	4643      	mov	r3, r8
 8007382:	18e3      	adds	r3, r4, r3
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	464b      	mov	r3, r9
 8007388:	eb45 0303 	adc.w	r3, r5, r3
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800739a:	4629      	mov	r1, r5
 800739c:	028b      	lsls	r3, r1, #10
 800739e:	4621      	mov	r1, r4
 80073a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073a4:	4621      	mov	r1, r4
 80073a6:	028a      	lsls	r2, r1, #10
 80073a8:	4610      	mov	r0, r2
 80073aa:	4619      	mov	r1, r3
 80073ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ae:	2200      	movs	r2, #0
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	61fa      	str	r2, [r7, #28]
 80073b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b8:	f7f9 fbf8 	bl	8000bac <__aeabi_uldivmod>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4613      	mov	r3, r2
 80073c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80073c4:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	3301      	adds	r3, #1
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80073d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073de:	e002      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073e0:	4b05      	ldr	r3, [pc, #20]	@ (80073f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80073e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3750      	adds	r7, #80	@ 0x50
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f2:	bf00      	nop
 80073f4:	40023800 	.word	0x40023800
 80073f8:	00f42400 	.word	0x00f42400

080073fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007400:	4b03      	ldr	r3, [pc, #12]	@ (8007410 <HAL_RCC_GetHCLKFreq+0x14>)
 8007402:	681b      	ldr	r3, [r3, #0]
}
 8007404:	4618      	mov	r0, r3
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	2000002c 	.word	0x2000002c

08007414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007418:	f7ff fff0 	bl	80073fc <HAL_RCC_GetHCLKFreq>
 800741c:	4602      	mov	r2, r0
 800741e:	4b05      	ldr	r3, [pc, #20]	@ (8007434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	0a9b      	lsrs	r3, r3, #10
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	4903      	ldr	r1, [pc, #12]	@ (8007438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800742a:	5ccb      	ldrb	r3, [r1, r3]
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007430:	4618      	mov	r0, r3
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40023800 	.word	0x40023800
 8007438:	0800dc5c 	.word	0x0800dc5c

0800743c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007440:	f7ff ffdc 	bl	80073fc <HAL_RCC_GetHCLKFreq>
 8007444:	4602      	mov	r2, r0
 8007446:	4b05      	ldr	r3, [pc, #20]	@ (800745c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	0b5b      	lsrs	r3, r3, #13
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	4903      	ldr	r1, [pc, #12]	@ (8007460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007452:	5ccb      	ldrb	r3, [r1, r3]
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40023800 	.word	0x40023800
 8007460:	0800dc5c 	.word	0x0800dc5c

08007464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e07b      	b.n	800756e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747a:	2b00      	cmp	r3, #0
 800747c:	d108      	bne.n	8007490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007486:	d009      	beq.n	800749c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	61da      	str	r2, [r3, #28]
 800748e:	e005      	b.n	800749c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fb fc54 	bl	8002d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007520:	ea42 0103 	orr.w	r1, r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007528:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	f003 0104 	and.w	r1, r3, #4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007542:	f003 0210 	and.w	r2, r3, #16
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69da      	ldr	r2, [r3, #28]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800755c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b088      	sub	sp, #32
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007586:	f7fc fccd 	bl	8003f24 <HAL_GetTick>
 800758a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800758c:	88fb      	ldrh	r3, [r7, #6]
 800758e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	d001      	beq.n	80075a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800759c:	2302      	movs	r3, #2
 800759e:	e12a      	b.n	80077f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_SPI_Transmit+0x36>
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e122      	b.n	80077f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_SPI_Transmit+0x48>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e11b      	b.n	80077f6 <HAL_SPI_Transmit+0x280>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2203      	movs	r2, #3
 80075ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800760c:	d10f      	bne.n	800762e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800761c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800762c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007638:	2b40      	cmp	r3, #64	@ 0x40
 800763a:	d007      	beq.n	800764c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800764a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007654:	d152      	bne.n	80076fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <HAL_SPI_Transmit+0xee>
 800765e:	8b7b      	ldrh	r3, [r7, #26]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d145      	bne.n	80076f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007668:	881a      	ldrh	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007674:	1c9a      	adds	r2, r3, #2
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007688:	e032      	b.n	80076f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b02      	cmp	r3, #2
 8007696:	d112      	bne.n	80076be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769c:	881a      	ldrh	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a8:	1c9a      	adds	r2, r3, #2
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076bc:	e018      	b.n	80076f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076be:	f7fc fc31 	bl	8003f24 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d803      	bhi.n	80076d6 <HAL_SPI_Transmit+0x160>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d102      	bne.n	80076dc <HAL_SPI_Transmit+0x166>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d109      	bne.n	80076f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e082      	b.n	80077f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1c7      	bne.n	800768a <HAL_SPI_Transmit+0x114>
 80076fa:	e053      	b.n	80077a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_SPI_Transmit+0x194>
 8007704:	8b7b      	ldrh	r3, [r7, #26]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d147      	bne.n	800779a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	330c      	adds	r3, #12
 8007714:	7812      	ldrb	r2, [r2, #0]
 8007716:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007726:	b29b      	uxth	r3, r3
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007730:	e033      	b.n	800779a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b02      	cmp	r3, #2
 800773e:	d113      	bne.n	8007768 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007766:	e018      	b.n	800779a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007768:	f7fc fbdc 	bl	8003f24 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d803      	bhi.n	8007780 <HAL_SPI_Transmit+0x20a>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d102      	bne.n	8007786 <HAL_SPI_Transmit+0x210>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e02d      	b.n	80077f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1c6      	bne.n	8007732 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f8bf 	bl	800792c <SPI_EndRxTxTransaction>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2220      	movs	r2, #32
 80077b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80077f4:	2300      	movs	r3, #0
  }
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800780c:	b2db      	uxtb	r3, r3
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800782c:	f7fc fb7a 	bl	8003f24 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4413      	add	r3, r2
 800783a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800783c:	f7fc fb72 	bl	8003f24 <HAL_GetTick>
 8007840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007842:	4b39      	ldr	r3, [pc, #228]	@ (8007928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	015b      	lsls	r3, r3, #5
 8007848:	0d1b      	lsrs	r3, r3, #20
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	fb02 f303 	mul.w	r3, r2, r3
 8007850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007852:	e054      	b.n	80078fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d050      	beq.n	80078fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800785c:	f7fc fb62 	bl	8003f24 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	429a      	cmp	r2, r3
 800786a:	d902      	bls.n	8007872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d13d      	bne.n	80078ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800788a:	d111      	bne.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007894:	d004      	beq.n	80078a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789e:	d107      	bne.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078b8:	d10f      	bne.n	80078da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e017      	b.n	800791e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	429a      	cmp	r2, r3
 800791a:	d19b      	bne.n	8007854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	2000002c 	.word	0x2000002c

0800792c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af02      	add	r7, sp, #8
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2201      	movs	r2, #1
 8007940:	2102      	movs	r1, #2
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff ff6a 	bl	800781c <SPI_WaitFlagStateUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007952:	f043 0220 	orr.w	r2, r3, #32
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e032      	b.n	80079c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800795e:	4b1b      	ldr	r3, [pc, #108]	@ (80079cc <SPI_EndRxTxTransaction+0xa0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1b      	ldr	r2, [pc, #108]	@ (80079d0 <SPI_EndRxTxTransaction+0xa4>)
 8007964:	fba2 2303 	umull	r2, r3, r2, r3
 8007968:	0d5b      	lsrs	r3, r3, #21
 800796a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800796e:	fb02 f303 	mul.w	r3, r2, r3
 8007972:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800797c:	d112      	bne.n	80079a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	2180      	movs	r1, #128	@ 0x80
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff ff47 	bl	800781c <SPI_WaitFlagStateUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d016      	beq.n	80079c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	f043 0220 	orr.w	r2, r3, #32
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e00f      	b.n	80079c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ba:	2b80      	cmp	r3, #128	@ 0x80
 80079bc:	d0f2      	beq.n	80079a4 <SPI_EndRxTxTransaction+0x78>
 80079be:	e000      	b.n	80079c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80079c0:	bf00      	nop
  }

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	2000002c 	.word	0x2000002c
 80079d0:	165e9f81 	.word	0x165e9f81

080079d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e041      	b.n	8007a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fb f9fa 	bl	8002df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4619      	mov	r1, r3
 8007a12:	4610      	mov	r0, r2
 8007a14:	f000 fef0 	bl	80087f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d001      	beq.n	8007a8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e046      	b.n	8007b1a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a23      	ldr	r2, [pc, #140]	@ (8007b28 <HAL_TIM_Base_Start+0xb4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d022      	beq.n	8007ae4 <HAL_TIM_Base_Start+0x70>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa6:	d01d      	beq.n	8007ae4 <HAL_TIM_Base_Start+0x70>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1f      	ldr	r2, [pc, #124]	@ (8007b2c <HAL_TIM_Base_Start+0xb8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d018      	beq.n	8007ae4 <HAL_TIM_Base_Start+0x70>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b30 <HAL_TIM_Base_Start+0xbc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d013      	beq.n	8007ae4 <HAL_TIM_Base_Start+0x70>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b34 <HAL_TIM_Base_Start+0xc0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00e      	beq.n	8007ae4 <HAL_TIM_Base_Start+0x70>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <HAL_TIM_Base_Start+0xc4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d009      	beq.n	8007ae4 <HAL_TIM_Base_Start+0x70>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a19      	ldr	r2, [pc, #100]	@ (8007b3c <HAL_TIM_Base_Start+0xc8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d004      	beq.n	8007ae4 <HAL_TIM_Base_Start+0x70>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <HAL_TIM_Base_Start+0xcc>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d111      	bne.n	8007b08 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b06      	cmp	r3, #6
 8007af4:	d010      	beq.n	8007b18 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0201 	orr.w	r2, r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b06:	e007      	b.n	8007b18 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0201 	orr.w	r2, r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40010000 	.word	0x40010000
 8007b2c:	40000400 	.word	0x40000400
 8007b30:	40000800 	.word	0x40000800
 8007b34:	40000c00 	.word	0x40000c00
 8007b38:	40010400 	.word	0x40010400
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40001800 	.word	0x40001800

08007b44 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6a1a      	ldr	r2, [r3, #32]
 8007b52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b56:	4013      	ands	r3, r2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10f      	bne.n	8007b7c <HAL_TIM_Base_Stop+0x38>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a1a      	ldr	r2, [r3, #32]
 8007b62:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <HAL_TIM_Base_Stop+0x38>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0201 	bic.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
	...

08007b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d001      	beq.n	8007bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e04e      	b.n	8007c4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a23      	ldr	r2, [pc, #140]	@ (8007c58 <HAL_TIM_Base_Start_IT+0xc4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d022      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0x80>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd6:	d01d      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0x80>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8007c5c <HAL_TIM_Base_Start_IT+0xc8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d018      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0x80>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a1e      	ldr	r2, [pc, #120]	@ (8007c60 <HAL_TIM_Base_Start_IT+0xcc>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d013      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0x80>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8007c64 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00e      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0x80>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8007c68 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d009      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0x80>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a19      	ldr	r2, [pc, #100]	@ (8007c6c <HAL_TIM_Base_Start_IT+0xd8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d004      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0x80>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a18      	ldr	r2, [pc, #96]	@ (8007c70 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d111      	bne.n	8007c38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b06      	cmp	r3, #6
 8007c24:	d010      	beq.n	8007c48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0201 	orr.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c36:	e007      	b.n	8007c48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	40010000 	.word	0x40010000
 8007c5c:	40000400 	.word	0x40000400
 8007c60:	40000800 	.word	0x40000800
 8007c64:	40000c00 	.word	0x40000c00
 8007c68:	40010400 	.word	0x40010400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40001800 	.word	0x40001800

08007c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e041      	b.n	8007d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f839 	bl	8007d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f000 fda0 	bl	80087f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d109      	bne.n	8007d4c <HAL_TIM_PWM_Start+0x24>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	bf14      	ite	ne
 8007d44:	2301      	movne	r3, #1
 8007d46:	2300      	moveq	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	e022      	b.n	8007d92 <HAL_TIM_PWM_Start+0x6a>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d109      	bne.n	8007d66 <HAL_TIM_PWM_Start+0x3e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	bf14      	ite	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	2300      	moveq	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	e015      	b.n	8007d92 <HAL_TIM_PWM_Start+0x6a>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d109      	bne.n	8007d80 <HAL_TIM_PWM_Start+0x58>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	bf14      	ite	ne
 8007d78:	2301      	movne	r3, #1
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	e008      	b.n	8007d92 <HAL_TIM_PWM_Start+0x6a>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e07c      	b.n	8007e94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_PWM_Start+0x82>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007da8:	e013      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xaa>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d104      	bne.n	8007dba <HAL_TIM_PWM_Start+0x92>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007db8:	e00b      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xaa>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d104      	bne.n	8007dca <HAL_TIM_PWM_Start+0xa2>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dc8:	e003      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xaa>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f001 f802 	bl	8008de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a2d      	ldr	r2, [pc, #180]	@ (8007e9c <HAL_TIM_PWM_Start+0x174>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <HAL_TIM_PWM_Start+0xcc>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a2c      	ldr	r2, [pc, #176]	@ (8007ea0 <HAL_TIM_PWM_Start+0x178>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d101      	bne.n	8007df8 <HAL_TIM_PWM_Start+0xd0>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <HAL_TIM_PWM_Start+0xd2>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a22      	ldr	r2, [pc, #136]	@ (8007e9c <HAL_TIM_PWM_Start+0x174>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d022      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x136>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e20:	d01d      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x136>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a1f      	ldr	r2, [pc, #124]	@ (8007ea4 <HAL_TIM_PWM_Start+0x17c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d018      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x136>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea8 <HAL_TIM_PWM_Start+0x180>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x136>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007eac <HAL_TIM_PWM_Start+0x184>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x136>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a16      	ldr	r2, [pc, #88]	@ (8007ea0 <HAL_TIM_PWM_Start+0x178>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x136>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a18      	ldr	r2, [pc, #96]	@ (8007eb0 <HAL_TIM_PWM_Start+0x188>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x136>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a16      	ldr	r2, [pc, #88]	@ (8007eb4 <HAL_TIM_PWM_Start+0x18c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d111      	bne.n	8007e82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b06      	cmp	r3, #6
 8007e6e:	d010      	beq.n	8007e92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e80:	e007      	b.n	8007e92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0201 	orr.w	r2, r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40010400 	.word	0x40010400
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40001800 	.word	0x40001800

08007eb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 ff8a 	bl	8008de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8007f90 <HAL_TIM_PWM_Stop+0xd8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d004      	beq.n	8007ee4 <HAL_TIM_PWM_Stop+0x2c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a2d      	ldr	r2, [pc, #180]	@ (8007f94 <HAL_TIM_PWM_Stop+0xdc>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d101      	bne.n	8007ee8 <HAL_TIM_PWM_Stop+0x30>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <HAL_TIM_PWM_Stop+0x32>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d017      	beq.n	8007f1e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6a1a      	ldr	r2, [r3, #32]
 8007ef4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10f      	bne.n	8007f1e <HAL_TIM_PWM_Stop+0x66>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6a1a      	ldr	r2, [r3, #32]
 8007f04:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <HAL_TIM_PWM_Stop+0x66>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6a1a      	ldr	r2, [r3, #32]
 8007f24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f28:	4013      	ands	r3, r2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10f      	bne.n	8007f4e <HAL_TIM_PWM_Stop+0x96>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f38:	4013      	ands	r3, r2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d107      	bne.n	8007f4e <HAL_TIM_PWM_Stop+0x96>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0201 	bic.w	r2, r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d104      	bne.n	8007f5e <HAL_TIM_PWM_Stop+0xa6>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f5c:	e013      	b.n	8007f86 <HAL_TIM_PWM_Stop+0xce>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d104      	bne.n	8007f6e <HAL_TIM_PWM_Stop+0xb6>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f6c:	e00b      	b.n	8007f86 <HAL_TIM_PWM_Stop+0xce>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d104      	bne.n	8007f7e <HAL_TIM_PWM_Stop+0xc6>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f7c:	e003      	b.n	8007f86 <HAL_TIM_PWM_Stop+0xce>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40010000 	.word	0x40010000
 8007f94:	40010400 	.word	0x40010400

08007f98 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e041      	b.n	8008030 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d106      	bne.n	8007fc6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f839 	bl	8008038 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f000 fc0d 	bl	80087f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0208 	bic.w	r2, r2, #8
 8007fec:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e097      	b.n	8008190 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d106      	bne.n	800807a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7fa ff25 	bl	8002ec4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2202      	movs	r2, #2
 800807e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	6812      	ldr	r2, [r2, #0]
 800808c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008090:	f023 0307 	bic.w	r3, r3, #7
 8008094:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3304      	adds	r3, #4
 800809e:	4619      	mov	r1, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	f000 fba9 	bl	80087f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	4313      	orrs	r3, r2
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80080ec:	f023 030c 	bic.w	r3, r3, #12
 80080f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	4313      	orrs	r3, r2
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	011a      	lsls	r2, r3, #4
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	031b      	lsls	r3, r3, #12
 800811c:	4313      	orrs	r3, r2
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	4313      	orrs	r3, r2
 8008122:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800812a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008132:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	4313      	orrs	r3, r2
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d110      	bne.n	80081ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d102      	bne.n	80081d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80081ce:	7b7b      	ldrb	r3, [r7, #13]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d001      	beq.n	80081d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e069      	b.n	80082ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081e8:	e031      	b.n	800824e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d110      	bne.n	8008212 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d102      	bne.n	80081fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081f6:	7b3b      	ldrb	r3, [r7, #12]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d001      	beq.n	8008200 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e055      	b.n	80082ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008210:	e01d      	b.n	800824e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d108      	bne.n	800822a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d105      	bne.n	800822a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800821e:	7b7b      	ldrb	r3, [r7, #13]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d102      	bne.n	800822a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008224:	7b3b      	ldrb	r3, [r7, #12]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d001      	beq.n	800822e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e03e      	b.n	80082ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2202      	movs	r2, #2
 8008242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2202      	movs	r2, #2
 800824a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <HAL_TIM_Encoder_Start+0xc4>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b04      	cmp	r3, #4
 8008258:	d008      	beq.n	800826c <HAL_TIM_Encoder_Start+0xd4>
 800825a:	e00f      	b.n	800827c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2201      	movs	r2, #1
 8008262:	2100      	movs	r1, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fdbd 	bl	8008de4 <TIM_CCxChannelCmd>
      break;
 800826a:	e016      	b.n	800829a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2201      	movs	r2, #1
 8008272:	2104      	movs	r1, #4
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fdb5 	bl	8008de4 <TIM_CCxChannelCmd>
      break;
 800827a:	e00e      	b.n	800829a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2201      	movs	r2, #1
 8008282:	2100      	movs	r1, #0
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fdad 	bl	8008de4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2201      	movs	r2, #1
 8008290:	2104      	movs	r1, #4
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fda6 	bl	8008de4 <TIM_CCxChannelCmd>
      break;
 8008298:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0201 	orr.w	r2, r2, #1
 80082a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d020      	beq.n	8008318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01b      	beq.n	8008318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0202 	mvn.w	r2, #2
 80082e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa5b 	bl	80087ba <HAL_TIM_IC_CaptureCallback>
 8008304:	e005      	b.n	8008312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa4d 	bl	80087a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa5e 	bl	80087ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d020      	beq.n	8008364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01b      	beq.n	8008364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f06f 0204 	mvn.w	r2, #4
 8008334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa35 	bl	80087ba <HAL_TIM_IC_CaptureCallback>
 8008350:	e005      	b.n	800835e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa27 	bl	80087a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fa38 	bl	80087ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	2b00      	cmp	r3, #0
 800836c:	d020      	beq.n	80083b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01b      	beq.n	80083b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f06f 0208 	mvn.w	r2, #8
 8008380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2204      	movs	r2, #4
 8008386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa0f 	bl	80087ba <HAL_TIM_IC_CaptureCallback>
 800839c:	e005      	b.n	80083aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa01 	bl	80087a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa12 	bl	80087ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f003 0310 	and.w	r3, r3, #16
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d020      	beq.n	80083fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01b      	beq.n	80083fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0210 	mvn.w	r2, #16
 80083cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2208      	movs	r2, #8
 80083d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f9e9 	bl	80087ba <HAL_TIM_IC_CaptureCallback>
 80083e8:	e005      	b.n	80083f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9db 	bl	80087a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f9ec 	bl	80087ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00c      	beq.n	8008420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0201 	mvn.w	r2, #1
 8008418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7fb fcd6 	bl	8003dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00c      	beq.n	8008444 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800843c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fee6 	bl	8009210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00c      	beq.n	8008468 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f9bd 	bl	80087e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00c      	beq.n	800848c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d007      	beq.n	800848c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f06f 0220 	mvn.w	r2, #32
 8008484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 feb8 	bl	80091fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800848c:	bf00      	nop
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e0ae      	b.n	8008610 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b0c      	cmp	r3, #12
 80084be:	f200 809f 	bhi.w	8008600 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084fd 	.word	0x080084fd
 80084cc:	08008601 	.word	0x08008601
 80084d0:	08008601 	.word	0x08008601
 80084d4:	08008601 	.word	0x08008601
 80084d8:	0800853d 	.word	0x0800853d
 80084dc:	08008601 	.word	0x08008601
 80084e0:	08008601 	.word	0x08008601
 80084e4:	08008601 	.word	0x08008601
 80084e8:	0800857f 	.word	0x0800857f
 80084ec:	08008601 	.word	0x08008601
 80084f0:	08008601 	.word	0x08008601
 80084f4:	08008601 	.word	0x08008601
 80084f8:	080085bf 	.word	0x080085bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fa24 	bl	8008950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 0208 	orr.w	r2, r2, #8
 8008516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699a      	ldr	r2, [r3, #24]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0204 	bic.w	r2, r2, #4
 8008526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6999      	ldr	r1, [r3, #24]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	691a      	ldr	r2, [r3, #16]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	619a      	str	r2, [r3, #24]
      break;
 800853a:	e064      	b.n	8008606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68b9      	ldr	r1, [r7, #8]
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fa74 	bl	8008a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699a      	ldr	r2, [r3, #24]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6999      	ldr	r1, [r3, #24]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	021a      	lsls	r2, r3, #8
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	619a      	str	r2, [r3, #24]
      break;
 800857c:	e043      	b.n	8008606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fac9 	bl	8008b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f042 0208 	orr.w	r2, r2, #8
 8008598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f022 0204 	bic.w	r2, r2, #4
 80085a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69d9      	ldr	r1, [r3, #28]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	61da      	str	r2, [r3, #28]
      break;
 80085bc:	e023      	b.n	8008606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fb1d 	bl	8008c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69da      	ldr	r2, [r3, #28]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69da      	ldr	r2, [r3, #28]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69d9      	ldr	r1, [r3, #28]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	021a      	lsls	r2, r3, #8
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	61da      	str	r2, [r3, #28]
      break;
 80085fe:	e002      	b.n	8008606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	75fb      	strb	r3, [r7, #23]
      break;
 8008604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800860e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800862c:	2b01      	cmp	r3, #1
 800862e:	d101      	bne.n	8008634 <HAL_TIM_ConfigClockSource+0x1c>
 8008630:	2302      	movs	r3, #2
 8008632:	e0b4      	b.n	800879e <HAL_TIM_ConfigClockSource+0x186>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800865a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866c:	d03e      	beq.n	80086ec <HAL_TIM_ConfigClockSource+0xd4>
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008672:	f200 8087 	bhi.w	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 8008676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867a:	f000 8086 	beq.w	800878a <HAL_TIM_ConfigClockSource+0x172>
 800867e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008682:	d87f      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 8008684:	2b70      	cmp	r3, #112	@ 0x70
 8008686:	d01a      	beq.n	80086be <HAL_TIM_ConfigClockSource+0xa6>
 8008688:	2b70      	cmp	r3, #112	@ 0x70
 800868a:	d87b      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 800868c:	2b60      	cmp	r3, #96	@ 0x60
 800868e:	d050      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x11a>
 8008690:	2b60      	cmp	r3, #96	@ 0x60
 8008692:	d877      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 8008694:	2b50      	cmp	r3, #80	@ 0x50
 8008696:	d03c      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0xfa>
 8008698:	2b50      	cmp	r3, #80	@ 0x50
 800869a:	d873      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 800869c:	2b40      	cmp	r3, #64	@ 0x40
 800869e:	d058      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x13a>
 80086a0:	2b40      	cmp	r3, #64	@ 0x40
 80086a2:	d86f      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 80086a4:	2b30      	cmp	r3, #48	@ 0x30
 80086a6:	d064      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x15a>
 80086a8:	2b30      	cmp	r3, #48	@ 0x30
 80086aa:	d86b      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b20      	cmp	r3, #32
 80086ae:	d060      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x15a>
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d867      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d05c      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x15a>
 80086b8:	2b10      	cmp	r3, #16
 80086ba:	d05a      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x15a>
 80086bc:	e062      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086ce:	f000 fb69 	bl	8008da4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	609a      	str	r2, [r3, #8]
      break;
 80086ea:	e04f      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086fc:	f000 fb52 	bl	8008da4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800870e:	609a      	str	r2, [r3, #8]
      break;
 8008710:	e03c      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800871e:	461a      	mov	r2, r3
 8008720:	f000 fac6 	bl	8008cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2150      	movs	r1, #80	@ 0x50
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fb1f 	bl	8008d6e <TIM_ITRx_SetConfig>
      break;
 8008730:	e02c      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800873e:	461a      	mov	r2, r3
 8008740:	f000 fae5 	bl	8008d0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2160      	movs	r1, #96	@ 0x60
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fb0f 	bl	8008d6e <TIM_ITRx_SetConfig>
      break;
 8008750:	e01c      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800875e:	461a      	mov	r2, r3
 8008760:	f000 faa6 	bl	8008cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2140      	movs	r1, #64	@ 0x40
 800876a:	4618      	mov	r0, r3
 800876c:	f000 faff 	bl	8008d6e <TIM_ITRx_SetConfig>
      break;
 8008770:	e00c      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f000 faf6 	bl	8008d6e <TIM_ITRx_SetConfig>
      break;
 8008782:	e003      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	73fb      	strb	r3, [r7, #15]
      break;
 8008788:	e000      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800878a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
	...

080087f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a46      	ldr	r2, [pc, #280]	@ (8008924 <TIM_Base_SetConfig+0x12c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d013      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008816:	d00f      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a43      	ldr	r2, [pc, #268]	@ (8008928 <TIM_Base_SetConfig+0x130>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00b      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a42      	ldr	r2, [pc, #264]	@ (800892c <TIM_Base_SetConfig+0x134>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a41      	ldr	r2, [pc, #260]	@ (8008930 <TIM_Base_SetConfig+0x138>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a40      	ldr	r2, [pc, #256]	@ (8008934 <TIM_Base_SetConfig+0x13c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d108      	bne.n	800884a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800883e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a35      	ldr	r2, [pc, #212]	@ (8008924 <TIM_Base_SetConfig+0x12c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d02b      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008858:	d027      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a32      	ldr	r2, [pc, #200]	@ (8008928 <TIM_Base_SetConfig+0x130>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d023      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a31      	ldr	r2, [pc, #196]	@ (800892c <TIM_Base_SetConfig+0x134>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01f      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a30      	ldr	r2, [pc, #192]	@ (8008930 <TIM_Base_SetConfig+0x138>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d01b      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2f      	ldr	r2, [pc, #188]	@ (8008934 <TIM_Base_SetConfig+0x13c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d017      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2e      	ldr	r2, [pc, #184]	@ (8008938 <TIM_Base_SetConfig+0x140>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d013      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2d      	ldr	r2, [pc, #180]	@ (800893c <TIM_Base_SetConfig+0x144>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00f      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a2c      	ldr	r2, [pc, #176]	@ (8008940 <TIM_Base_SetConfig+0x148>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00b      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a2b      	ldr	r2, [pc, #172]	@ (8008944 <TIM_Base_SetConfig+0x14c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d007      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a2a      	ldr	r2, [pc, #168]	@ (8008948 <TIM_Base_SetConfig+0x150>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d003      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a29      	ldr	r2, [pc, #164]	@ (800894c <TIM_Base_SetConfig+0x154>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d108      	bne.n	80088bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a10      	ldr	r2, [pc, #64]	@ (8008924 <TIM_Base_SetConfig+0x12c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_Base_SetConfig+0xf8>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a12      	ldr	r2, [pc, #72]	@ (8008934 <TIM_Base_SetConfig+0x13c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d103      	bne.n	80088f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	691a      	ldr	r2, [r3, #16]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b01      	cmp	r3, #1
 8008908:	d105      	bne.n	8008916 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f023 0201 	bic.w	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	611a      	str	r2, [r3, #16]
  }
}
 8008916:	bf00      	nop
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40010000 	.word	0x40010000
 8008928:	40000400 	.word	0x40000400
 800892c:	40000800 	.word	0x40000800
 8008930:	40000c00 	.word	0x40000c00
 8008934:	40010400 	.word	0x40010400
 8008938:	40014000 	.word	0x40014000
 800893c:	40014400 	.word	0x40014400
 8008940:	40014800 	.word	0x40014800
 8008944:	40001800 	.word	0x40001800
 8008948:	40001c00 	.word	0x40001c00
 800894c:	40002000 	.word	0x40002000

08008950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	f023 0201 	bic.w	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800897e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0303 	bic.w	r3, r3, #3
 8008986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f023 0302 	bic.w	r3, r3, #2
 8008998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a20      	ldr	r2, [pc, #128]	@ (8008a28 <TIM_OC1_SetConfig+0xd8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_OC1_SetConfig+0x64>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a1f      	ldr	r2, [pc, #124]	@ (8008a2c <TIM_OC1_SetConfig+0xdc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d10c      	bne.n	80089ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 0308 	bic.w	r3, r3, #8
 80089ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f023 0304 	bic.w	r3, r3, #4
 80089cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a15      	ldr	r2, [pc, #84]	@ (8008a28 <TIM_OC1_SetConfig+0xd8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_OC1_SetConfig+0x8e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a14      	ldr	r2, [pc, #80]	@ (8008a2c <TIM_OC1_SetConfig+0xdc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d111      	bne.n	8008a02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	621a      	str	r2, [r3, #32]
}
 8008a1c:	bf00      	nop
 8008a1e:	371c      	adds	r7, #28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40010400 	.word	0x40010400

08008a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	f023 0210 	bic.w	r2, r3, #16
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 0320 	bic.w	r3, r3, #32
 8008a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a22      	ldr	r2, [pc, #136]	@ (8008b14 <TIM_OC2_SetConfig+0xe4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <TIM_OC2_SetConfig+0x68>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a21      	ldr	r2, [pc, #132]	@ (8008b18 <TIM_OC2_SetConfig+0xe8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d10d      	bne.n	8008ab4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	@ (8008b14 <TIM_OC2_SetConfig+0xe4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d003      	beq.n	8008ac4 <TIM_OC2_SetConfig+0x94>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a16      	ldr	r2, [pc, #88]	@ (8008b18 <TIM_OC2_SetConfig+0xe8>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d113      	bne.n	8008aec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40010000 	.word	0x40010000
 8008b18:	40010400 	.word	0x40010400

08008b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a21      	ldr	r2, [pc, #132]	@ (8008bfc <TIM_OC3_SetConfig+0xe0>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d003      	beq.n	8008b82 <TIM_OC3_SetConfig+0x66>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a20      	ldr	r2, [pc, #128]	@ (8008c00 <TIM_OC3_SetConfig+0xe4>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d10d      	bne.n	8008b9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a16      	ldr	r2, [pc, #88]	@ (8008bfc <TIM_OC3_SetConfig+0xe0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d003      	beq.n	8008bae <TIM_OC3_SetConfig+0x92>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a15      	ldr	r2, [pc, #84]	@ (8008c00 <TIM_OC3_SetConfig+0xe4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d113      	bne.n	8008bd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	621a      	str	r2, [r3, #32]
}
 8008bf0:	bf00      	nop
 8008bf2:	371c      	adds	r7, #28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40010400 	.word	0x40010400

08008c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	031b      	lsls	r3, r3, #12
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a12      	ldr	r2, [pc, #72]	@ (8008ca8 <TIM_OC4_SetConfig+0xa4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <TIM_OC4_SetConfig+0x68>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a11      	ldr	r2, [pc, #68]	@ (8008cac <TIM_OC4_SetConfig+0xa8>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d109      	bne.n	8008c80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	019b      	lsls	r3, r3, #6
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40010000 	.word	0x40010000
 8008cac:	40010400 	.word	0x40010400

08008cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f023 0201 	bic.w	r2, r3, #1
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	011b      	lsls	r3, r3, #4
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f023 030a 	bic.w	r3, r3, #10
 8008cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	621a      	str	r2, [r3, #32]
}
 8008d02:	bf00      	nop
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b087      	sub	sp, #28
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	f023 0210 	bic.w	r2, r3, #16
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	031b      	lsls	r3, r3, #12
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	621a      	str	r2, [r3, #32]
}
 8008d62:	bf00      	nop
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b085      	sub	sp, #20
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f043 0307 	orr.w	r3, r3, #7
 8008d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	609a      	str	r2, [r3, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	021a      	lsls	r2, r3, #8
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	609a      	str	r2, [r3, #8]
}
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f003 031f 	and.w	r3, r3, #31
 8008df6:	2201      	movs	r2, #1
 8008df8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a1a      	ldr	r2, [r3, #32]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	43db      	mvns	r3, r3
 8008e06:	401a      	ands	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a1a      	ldr	r2, [r3, #32]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d109      	bne.n	8008e54 <HAL_TIMEx_PWMN_Start+0x24>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	bf14      	ite	ne
 8008e4c:	2301      	movne	r3, #1
 8008e4e:	2300      	moveq	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	e022      	b.n	8008e9a <HAL_TIMEx_PWMN_Start+0x6a>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d109      	bne.n	8008e6e <HAL_TIMEx_PWMN_Start+0x3e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	bf14      	ite	ne
 8008e66:	2301      	movne	r3, #1
 8008e68:	2300      	moveq	r3, #0
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	e015      	b.n	8008e9a <HAL_TIMEx_PWMN_Start+0x6a>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	d109      	bne.n	8008e88 <HAL_TIMEx_PWMN_Start+0x58>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	bf14      	ite	ne
 8008e80:	2301      	movne	r3, #1
 8008e82:	2300      	moveq	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	e008      	b.n	8008e9a <HAL_TIMEx_PWMN_Start+0x6a>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	bf14      	ite	ne
 8008e94:	2301      	movne	r3, #1
 8008e96:	2300      	moveq	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e06d      	b.n	8008f7e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <HAL_TIMEx_PWMN_Start+0x82>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008eb0:	e013      	b.n	8008eda <HAL_TIMEx_PWMN_Start+0xaa>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d104      	bne.n	8008ec2 <HAL_TIMEx_PWMN_Start+0x92>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ec0:	e00b      	b.n	8008eda <HAL_TIMEx_PWMN_Start+0xaa>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b08      	cmp	r3, #8
 8008ec6:	d104      	bne.n	8008ed2 <HAL_TIMEx_PWMN_Start+0xa2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ed0:	e003      	b.n	8008eda <HAL_TIMEx_PWMN_Start+0xaa>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2204      	movs	r2, #4
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f99e 	bl	8009224 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ef6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a22      	ldr	r2, [pc, #136]	@ (8008f88 <HAL_TIMEx_PWMN_Start+0x158>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d022      	beq.n	8008f48 <HAL_TIMEx_PWMN_Start+0x118>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f0a:	d01d      	beq.n	8008f48 <HAL_TIMEx_PWMN_Start+0x118>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1e      	ldr	r2, [pc, #120]	@ (8008f8c <HAL_TIMEx_PWMN_Start+0x15c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <HAL_TIMEx_PWMN_Start+0x118>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008f90 <HAL_TIMEx_PWMN_Start+0x160>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <HAL_TIMEx_PWMN_Start+0x118>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a1b      	ldr	r2, [pc, #108]	@ (8008f94 <HAL_TIMEx_PWMN_Start+0x164>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00e      	beq.n	8008f48 <HAL_TIMEx_PWMN_Start+0x118>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008f98 <HAL_TIMEx_PWMN_Start+0x168>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_TIMEx_PWMN_Start+0x118>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a18      	ldr	r2, [pc, #96]	@ (8008f9c <HAL_TIMEx_PWMN_Start+0x16c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIMEx_PWMN_Start+0x118>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a17      	ldr	r2, [pc, #92]	@ (8008fa0 <HAL_TIMEx_PWMN_Start+0x170>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d111      	bne.n	8008f6c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d010      	beq.n	8008f7c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	e007      	b.n	8008f7c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0201 	orr.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	40010000 	.word	0x40010000
 8008f8c:	40000400 	.word	0x40000400
 8008f90:	40000800 	.word	0x40000800
 8008f94:	40000c00 	.word	0x40000c00
 8008f98:	40010400 	.word	0x40010400
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40001800 	.word	0x40001800

08008fa4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f934 	bl	8009224 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6a1a      	ldr	r2, [r3, #32]
 8008fc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10f      	bne.n	8008fec <HAL_TIMEx_PWMN_Stop+0x48>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6a1a      	ldr	r2, [r3, #32]
 8008fd2:	f240 4344 	movw	r3, #1092	@ 0x444
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d107      	bne.n	8008fec <HAL_TIMEx_PWMN_Stop+0x48>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6a1a      	ldr	r2, [r3, #32]
 8008ff2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10f      	bne.n	800901c <HAL_TIMEx_PWMN_Stop+0x78>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6a1a      	ldr	r2, [r3, #32]
 8009002:	f240 4344 	movw	r3, #1092	@ 0x444
 8009006:	4013      	ands	r3, r2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d107      	bne.n	800901c <HAL_TIMEx_PWMN_Stop+0x78>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0201 	bic.w	r2, r2, #1
 800901a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <HAL_TIMEx_PWMN_Stop+0x88>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800902a:	e013      	b.n	8009054 <HAL_TIMEx_PWMN_Stop+0xb0>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b04      	cmp	r3, #4
 8009030:	d104      	bne.n	800903c <HAL_TIMEx_PWMN_Stop+0x98>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800903a:	e00b      	b.n	8009054 <HAL_TIMEx_PWMN_Stop+0xb0>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b08      	cmp	r3, #8
 8009040:	d104      	bne.n	800904c <HAL_TIMEx_PWMN_Stop+0xa8>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800904a:	e003      	b.n	8009054 <HAL_TIMEx_PWMN_Stop+0xb0>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009074:	2302      	movs	r3, #2
 8009076:	e05a      	b.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800909e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a21      	ldr	r2, [pc, #132]	@ (800913c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d022      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090c4:	d01d      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d018      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d013      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a1a      	ldr	r2, [pc, #104]	@ (8009148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00e      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a18      	ldr	r2, [pc, #96]	@ (800914c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d009      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a17      	ldr	r2, [pc, #92]	@ (8009150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d004      	beq.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a15      	ldr	r2, [pc, #84]	@ (8009154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d10c      	bne.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	4313      	orrs	r3, r2
 8009112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	40010000 	.word	0x40010000
 8009140:	40000400 	.word	0x40000400
 8009144:	40000800 	.word	0x40000800
 8009148:	40000c00 	.word	0x40000c00
 800914c:	40010400 	.word	0x40010400
 8009150:	40014000 	.word	0x40014000
 8009154:	40001800 	.word	0x40001800

08009158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800916c:	2b01      	cmp	r3, #1
 800916e:	d101      	bne.n	8009174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009170:	2302      	movs	r3, #2
 8009172:	e03d      	b.n	80091f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	4313      	orrs	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f003 030f 	and.w	r3, r3, #15
 8009236:	2204      	movs	r2, #4
 8009238:	fa02 f303 	lsl.w	r3, r2, r3
 800923c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a1a      	ldr	r2, [r3, #32]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	43db      	mvns	r3, r3
 8009246:	401a      	ands	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6a1a      	ldr	r2, [r3, #32]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 030f 	and.w	r3, r3, #15
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	fa01 f303 	lsl.w	r3, r1, r3
 800925c:	431a      	orrs	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	621a      	str	r2, [r3, #32]
}
 8009262:	bf00      	nop
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e042      	b.n	8009306 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7f9 fed7 	bl	8003048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2224      	movs	r2, #36	@ 0x24
 800929e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f82c 	bl	8009310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691a      	ldr	r2, [r3, #16]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	695a      	ldr	r2, [r3, #20]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009314:	b0c0      	sub	sp, #256	@ 0x100
 8009316:	af00      	add	r7, sp, #0
 8009318:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800932c:	68d9      	ldr	r1, [r3, #12]
 800932e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	ea40 0301 	orr.w	r3, r0, r1
 8009338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800933a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	431a      	orrs	r2, r3
 8009348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	431a      	orrs	r2, r3
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	4313      	orrs	r3, r2
 8009358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800935c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009368:	f021 010c 	bic.w	r1, r1, #12
 800936c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009376:	430b      	orrs	r3, r1
 8009378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800937a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800938a:	6999      	ldr	r1, [r3, #24]
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	ea40 0301 	orr.w	r3, r0, r1
 8009396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b8f      	ldr	r3, [pc, #572]	@ (80095dc <UART_SetConfig+0x2cc>)
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d005      	beq.n	80093b0 <UART_SetConfig+0xa0>
 80093a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b8d      	ldr	r3, [pc, #564]	@ (80095e0 <UART_SetConfig+0x2d0>)
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d104      	bne.n	80093ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093b0:	f7fe f844 	bl	800743c <HAL_RCC_GetPCLK2Freq>
 80093b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80093b8:	e003      	b.n	80093c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093ba:	f7fe f82b 	bl	8007414 <HAL_RCC_GetPCLK1Freq>
 80093be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093cc:	f040 810c 	bne.w	80095e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80093da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80093de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80093e2:	4622      	mov	r2, r4
 80093e4:	462b      	mov	r3, r5
 80093e6:	1891      	adds	r1, r2, r2
 80093e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80093ea:	415b      	adcs	r3, r3
 80093ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80093f2:	4621      	mov	r1, r4
 80093f4:	eb12 0801 	adds.w	r8, r2, r1
 80093f8:	4629      	mov	r1, r5
 80093fa:	eb43 0901 	adc.w	r9, r3, r1
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800940a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800940e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009412:	4690      	mov	r8, r2
 8009414:	4699      	mov	r9, r3
 8009416:	4623      	mov	r3, r4
 8009418:	eb18 0303 	adds.w	r3, r8, r3
 800941c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009420:	462b      	mov	r3, r5
 8009422:	eb49 0303 	adc.w	r3, r9, r3
 8009426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800942a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009436:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800943a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800943e:	460b      	mov	r3, r1
 8009440:	18db      	adds	r3, r3, r3
 8009442:	653b      	str	r3, [r7, #80]	@ 0x50
 8009444:	4613      	mov	r3, r2
 8009446:	eb42 0303 	adc.w	r3, r2, r3
 800944a:	657b      	str	r3, [r7, #84]	@ 0x54
 800944c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009454:	f7f7 fbaa 	bl	8000bac <__aeabi_uldivmod>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4b61      	ldr	r3, [pc, #388]	@ (80095e4 <UART_SetConfig+0x2d4>)
 800945e:	fba3 2302 	umull	r2, r3, r3, r2
 8009462:	095b      	lsrs	r3, r3, #5
 8009464:	011c      	lsls	r4, r3, #4
 8009466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800946a:	2200      	movs	r2, #0
 800946c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009470:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009478:	4642      	mov	r2, r8
 800947a:	464b      	mov	r3, r9
 800947c:	1891      	adds	r1, r2, r2
 800947e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009480:	415b      	adcs	r3, r3
 8009482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009488:	4641      	mov	r1, r8
 800948a:	eb12 0a01 	adds.w	sl, r2, r1
 800948e:	4649      	mov	r1, r9
 8009490:	eb43 0b01 	adc.w	fp, r3, r1
 8009494:	f04f 0200 	mov.w	r2, #0
 8009498:	f04f 0300 	mov.w	r3, #0
 800949c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094a8:	4692      	mov	sl, r2
 80094aa:	469b      	mov	fp, r3
 80094ac:	4643      	mov	r3, r8
 80094ae:	eb1a 0303 	adds.w	r3, sl, r3
 80094b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094b6:	464b      	mov	r3, r9
 80094b8:	eb4b 0303 	adc.w	r3, fp, r3
 80094bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80094c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80094d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80094d4:	460b      	mov	r3, r1
 80094d6:	18db      	adds	r3, r3, r3
 80094d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80094da:	4613      	mov	r3, r2
 80094dc:	eb42 0303 	adc.w	r3, r2, r3
 80094e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80094e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80094ea:	f7f7 fb5f 	bl	8000bac <__aeabi_uldivmod>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	4b3b      	ldr	r3, [pc, #236]	@ (80095e4 <UART_SetConfig+0x2d4>)
 80094f6:	fba3 2301 	umull	r2, r3, r3, r1
 80094fa:	095b      	lsrs	r3, r3, #5
 80094fc:	2264      	movs	r2, #100	@ 0x64
 80094fe:	fb02 f303 	mul.w	r3, r2, r3
 8009502:	1acb      	subs	r3, r1, r3
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800950a:	4b36      	ldr	r3, [pc, #216]	@ (80095e4 <UART_SetConfig+0x2d4>)
 800950c:	fba3 2302 	umull	r2, r3, r3, r2
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009518:	441c      	add	r4, r3
 800951a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800951e:	2200      	movs	r2, #0
 8009520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009524:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800952c:	4642      	mov	r2, r8
 800952e:	464b      	mov	r3, r9
 8009530:	1891      	adds	r1, r2, r2
 8009532:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009534:	415b      	adcs	r3, r3
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800953c:	4641      	mov	r1, r8
 800953e:	1851      	adds	r1, r2, r1
 8009540:	6339      	str	r1, [r7, #48]	@ 0x30
 8009542:	4649      	mov	r1, r9
 8009544:	414b      	adcs	r3, r1
 8009546:	637b      	str	r3, [r7, #52]	@ 0x34
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009554:	4659      	mov	r1, fp
 8009556:	00cb      	lsls	r3, r1, #3
 8009558:	4651      	mov	r1, sl
 800955a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800955e:	4651      	mov	r1, sl
 8009560:	00ca      	lsls	r2, r1, #3
 8009562:	4610      	mov	r0, r2
 8009564:	4619      	mov	r1, r3
 8009566:	4603      	mov	r3, r0
 8009568:	4642      	mov	r2, r8
 800956a:	189b      	adds	r3, r3, r2
 800956c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009570:	464b      	mov	r3, r9
 8009572:	460a      	mov	r2, r1
 8009574:	eb42 0303 	adc.w	r3, r2, r3
 8009578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009588:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800958c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009590:	460b      	mov	r3, r1
 8009592:	18db      	adds	r3, r3, r3
 8009594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009596:	4613      	mov	r3, r2
 8009598:	eb42 0303 	adc.w	r3, r2, r3
 800959c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800959e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80095a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80095a6:	f7f7 fb01 	bl	8000bac <__aeabi_uldivmod>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <UART_SetConfig+0x2d4>)
 80095b0:	fba3 1302 	umull	r1, r3, r3, r2
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	2164      	movs	r1, #100	@ 0x64
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	3332      	adds	r3, #50	@ 0x32
 80095c2:	4a08      	ldr	r2, [pc, #32]	@ (80095e4 <UART_SetConfig+0x2d4>)
 80095c4:	fba2 2303 	umull	r2, r3, r2, r3
 80095c8:	095b      	lsrs	r3, r3, #5
 80095ca:	f003 0207 	and.w	r2, r3, #7
 80095ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4422      	add	r2, r4
 80095d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095d8:	e106      	b.n	80097e8 <UART_SetConfig+0x4d8>
 80095da:	bf00      	nop
 80095dc:	40011000 	.word	0x40011000
 80095e0:	40011400 	.word	0x40011400
 80095e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095ec:	2200      	movs	r2, #0
 80095ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80095f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80095fa:	4642      	mov	r2, r8
 80095fc:	464b      	mov	r3, r9
 80095fe:	1891      	adds	r1, r2, r2
 8009600:	6239      	str	r1, [r7, #32]
 8009602:	415b      	adcs	r3, r3
 8009604:	627b      	str	r3, [r7, #36]	@ 0x24
 8009606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800960a:	4641      	mov	r1, r8
 800960c:	1854      	adds	r4, r2, r1
 800960e:	4649      	mov	r1, r9
 8009610:	eb43 0501 	adc.w	r5, r3, r1
 8009614:	f04f 0200 	mov.w	r2, #0
 8009618:	f04f 0300 	mov.w	r3, #0
 800961c:	00eb      	lsls	r3, r5, #3
 800961e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009622:	00e2      	lsls	r2, r4, #3
 8009624:	4614      	mov	r4, r2
 8009626:	461d      	mov	r5, r3
 8009628:	4643      	mov	r3, r8
 800962a:	18e3      	adds	r3, r4, r3
 800962c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009630:	464b      	mov	r3, r9
 8009632:	eb45 0303 	adc.w	r3, r5, r3
 8009636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800963a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009646:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800964a:	f04f 0200 	mov.w	r2, #0
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009656:	4629      	mov	r1, r5
 8009658:	008b      	lsls	r3, r1, #2
 800965a:	4621      	mov	r1, r4
 800965c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009660:	4621      	mov	r1, r4
 8009662:	008a      	lsls	r2, r1, #2
 8009664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009668:	f7f7 faa0 	bl	8000bac <__aeabi_uldivmod>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4b60      	ldr	r3, [pc, #384]	@ (80097f4 <UART_SetConfig+0x4e4>)
 8009672:	fba3 2302 	umull	r2, r3, r3, r2
 8009676:	095b      	lsrs	r3, r3, #5
 8009678:	011c      	lsls	r4, r3, #4
 800967a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800967e:	2200      	movs	r2, #0
 8009680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800968c:	4642      	mov	r2, r8
 800968e:	464b      	mov	r3, r9
 8009690:	1891      	adds	r1, r2, r2
 8009692:	61b9      	str	r1, [r7, #24]
 8009694:	415b      	adcs	r3, r3
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800969c:	4641      	mov	r1, r8
 800969e:	1851      	adds	r1, r2, r1
 80096a0:	6139      	str	r1, [r7, #16]
 80096a2:	4649      	mov	r1, r9
 80096a4:	414b      	adcs	r3, r1
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096b4:	4659      	mov	r1, fp
 80096b6:	00cb      	lsls	r3, r1, #3
 80096b8:	4651      	mov	r1, sl
 80096ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096be:	4651      	mov	r1, sl
 80096c0:	00ca      	lsls	r2, r1, #3
 80096c2:	4610      	mov	r0, r2
 80096c4:	4619      	mov	r1, r3
 80096c6:	4603      	mov	r3, r0
 80096c8:	4642      	mov	r2, r8
 80096ca:	189b      	adds	r3, r3, r2
 80096cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096d0:	464b      	mov	r3, r9
 80096d2:	460a      	mov	r2, r1
 80096d4:	eb42 0303 	adc.w	r3, r2, r3
 80096d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80096e8:	f04f 0200 	mov.w	r2, #0
 80096ec:	f04f 0300 	mov.w	r3, #0
 80096f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80096f4:	4649      	mov	r1, r9
 80096f6:	008b      	lsls	r3, r1, #2
 80096f8:	4641      	mov	r1, r8
 80096fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096fe:	4641      	mov	r1, r8
 8009700:	008a      	lsls	r2, r1, #2
 8009702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009706:	f7f7 fa51 	bl	8000bac <__aeabi_uldivmod>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4611      	mov	r1, r2
 8009710:	4b38      	ldr	r3, [pc, #224]	@ (80097f4 <UART_SetConfig+0x4e4>)
 8009712:	fba3 2301 	umull	r2, r3, r3, r1
 8009716:	095b      	lsrs	r3, r3, #5
 8009718:	2264      	movs	r2, #100	@ 0x64
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	1acb      	subs	r3, r1, r3
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	3332      	adds	r3, #50	@ 0x32
 8009724:	4a33      	ldr	r2, [pc, #204]	@ (80097f4 <UART_SetConfig+0x4e4>)
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009730:	441c      	add	r4, r3
 8009732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009736:	2200      	movs	r2, #0
 8009738:	673b      	str	r3, [r7, #112]	@ 0x70
 800973a:	677a      	str	r2, [r7, #116]	@ 0x74
 800973c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	1891      	adds	r1, r2, r2
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	415b      	adcs	r3, r3
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009750:	4641      	mov	r1, r8
 8009752:	1851      	adds	r1, r2, r1
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	4649      	mov	r1, r9
 8009758:	414b      	adcs	r3, r1
 800975a:	607b      	str	r3, [r7, #4]
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009768:	4659      	mov	r1, fp
 800976a:	00cb      	lsls	r3, r1, #3
 800976c:	4651      	mov	r1, sl
 800976e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009772:	4651      	mov	r1, sl
 8009774:	00ca      	lsls	r2, r1, #3
 8009776:	4610      	mov	r0, r2
 8009778:	4619      	mov	r1, r3
 800977a:	4603      	mov	r3, r0
 800977c:	4642      	mov	r2, r8
 800977e:	189b      	adds	r3, r3, r2
 8009780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009782:	464b      	mov	r3, r9
 8009784:	460a      	mov	r2, r1
 8009786:	eb42 0303 	adc.w	r3, r2, r3
 800978a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800978c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	663b      	str	r3, [r7, #96]	@ 0x60
 8009796:	667a      	str	r2, [r7, #100]	@ 0x64
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	f04f 0300 	mov.w	r3, #0
 80097a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80097a4:	4649      	mov	r1, r9
 80097a6:	008b      	lsls	r3, r1, #2
 80097a8:	4641      	mov	r1, r8
 80097aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097ae:	4641      	mov	r1, r8
 80097b0:	008a      	lsls	r2, r1, #2
 80097b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80097b6:	f7f7 f9f9 	bl	8000bac <__aeabi_uldivmod>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4b0d      	ldr	r3, [pc, #52]	@ (80097f4 <UART_SetConfig+0x4e4>)
 80097c0:	fba3 1302 	umull	r1, r3, r3, r2
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	2164      	movs	r1, #100	@ 0x64
 80097c8:	fb01 f303 	mul.w	r3, r1, r3
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	011b      	lsls	r3, r3, #4
 80097d0:	3332      	adds	r3, #50	@ 0x32
 80097d2:	4a08      	ldr	r2, [pc, #32]	@ (80097f4 <UART_SetConfig+0x4e4>)
 80097d4:	fba2 2303 	umull	r2, r3, r2, r3
 80097d8:	095b      	lsrs	r3, r3, #5
 80097da:	f003 020f 	and.w	r2, r3, #15
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4422      	add	r2, r4
 80097e6:	609a      	str	r2, [r3, #8]
}
 80097e8:	bf00      	nop
 80097ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80097ee:	46bd      	mov	sp, r7
 80097f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097f4:	51eb851f 	.word	0x51eb851f

080097f8 <sniprintf>:
 80097f8:	b40c      	push	{r2, r3}
 80097fa:	b530      	push	{r4, r5, lr}
 80097fc:	4b18      	ldr	r3, [pc, #96]	@ (8009860 <sniprintf+0x68>)
 80097fe:	1e0c      	subs	r4, r1, #0
 8009800:	681d      	ldr	r5, [r3, #0]
 8009802:	b09d      	sub	sp, #116	@ 0x74
 8009804:	da08      	bge.n	8009818 <sniprintf+0x20>
 8009806:	238b      	movs	r3, #139	@ 0x8b
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	f04f 30ff 	mov.w	r0, #4294967295
 800980e:	b01d      	add	sp, #116	@ 0x74
 8009810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009814:	b002      	add	sp, #8
 8009816:	4770      	bx	lr
 8009818:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800981c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009820:	f04f 0300 	mov.w	r3, #0
 8009824:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009826:	bf14      	ite	ne
 8009828:	f104 33ff 	addne.w	r3, r4, #4294967295
 800982c:	4623      	moveq	r3, r4
 800982e:	9304      	str	r3, [sp, #16]
 8009830:	9307      	str	r3, [sp, #28]
 8009832:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009836:	9002      	str	r0, [sp, #8]
 8009838:	9006      	str	r0, [sp, #24]
 800983a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800983e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009840:	ab21      	add	r3, sp, #132	@ 0x84
 8009842:	a902      	add	r1, sp, #8
 8009844:	4628      	mov	r0, r5
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	f000 f9ca 	bl	8009be0 <_svfiprintf_r>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	bfbc      	itt	lt
 8009850:	238b      	movlt	r3, #139	@ 0x8b
 8009852:	602b      	strlt	r3, [r5, #0]
 8009854:	2c00      	cmp	r4, #0
 8009856:	d0da      	beq.n	800980e <sniprintf+0x16>
 8009858:	9b02      	ldr	r3, [sp, #8]
 800985a:	2200      	movs	r2, #0
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	e7d6      	b.n	800980e <sniprintf+0x16>
 8009860:	20000088 	.word	0x20000088

08009864 <siprintf>:
 8009864:	b40e      	push	{r1, r2, r3}
 8009866:	b510      	push	{r4, lr}
 8009868:	b09d      	sub	sp, #116	@ 0x74
 800986a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800986c:	9002      	str	r0, [sp, #8]
 800986e:	9006      	str	r0, [sp, #24]
 8009870:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009874:	480a      	ldr	r0, [pc, #40]	@ (80098a0 <siprintf+0x3c>)
 8009876:	9107      	str	r1, [sp, #28]
 8009878:	9104      	str	r1, [sp, #16]
 800987a:	490a      	ldr	r1, [pc, #40]	@ (80098a4 <siprintf+0x40>)
 800987c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009880:	9105      	str	r1, [sp, #20]
 8009882:	2400      	movs	r4, #0
 8009884:	a902      	add	r1, sp, #8
 8009886:	6800      	ldr	r0, [r0, #0]
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800988c:	f000 f9a8 	bl	8009be0 <_svfiprintf_r>
 8009890:	9b02      	ldr	r3, [sp, #8]
 8009892:	701c      	strb	r4, [r3, #0]
 8009894:	b01d      	add	sp, #116	@ 0x74
 8009896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800989a:	b003      	add	sp, #12
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20000088 	.word	0x20000088
 80098a4:	ffff0208 	.word	0xffff0208

080098a8 <memset>:
 80098a8:	4402      	add	r2, r0
 80098aa:	4603      	mov	r3, r0
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d100      	bne.n	80098b2 <memset+0xa>
 80098b0:	4770      	bx	lr
 80098b2:	f803 1b01 	strb.w	r1, [r3], #1
 80098b6:	e7f9      	b.n	80098ac <memset+0x4>

080098b8 <strncpy>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	3901      	subs	r1, #1
 80098bc:	4603      	mov	r3, r0
 80098be:	b132      	cbz	r2, 80098ce <strncpy+0x16>
 80098c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80098c4:	f803 4b01 	strb.w	r4, [r3], #1
 80098c8:	3a01      	subs	r2, #1
 80098ca:	2c00      	cmp	r4, #0
 80098cc:	d1f7      	bne.n	80098be <strncpy+0x6>
 80098ce:	441a      	add	r2, r3
 80098d0:	2100      	movs	r1, #0
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d100      	bne.n	80098d8 <strncpy+0x20>
 80098d6:	bd10      	pop	{r4, pc}
 80098d8:	f803 1b01 	strb.w	r1, [r3], #1
 80098dc:	e7f9      	b.n	80098d2 <strncpy+0x1a>
	...

080098e0 <__errno>:
 80098e0:	4b01      	ldr	r3, [pc, #4]	@ (80098e8 <__errno+0x8>)
 80098e2:	6818      	ldr	r0, [r3, #0]
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	20000088 	.word	0x20000088

080098ec <__libc_init_array>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009924 <__libc_init_array+0x38>)
 80098f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009928 <__libc_init_array+0x3c>)
 80098f2:	1b64      	subs	r4, r4, r5
 80098f4:	10a4      	asrs	r4, r4, #2
 80098f6:	2600      	movs	r6, #0
 80098f8:	42a6      	cmp	r6, r4
 80098fa:	d109      	bne.n	8009910 <__libc_init_array+0x24>
 80098fc:	4d0b      	ldr	r5, [pc, #44]	@ (800992c <__libc_init_array+0x40>)
 80098fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009930 <__libc_init_array+0x44>)
 8009900:	f001 fc8a 	bl	800b218 <_init>
 8009904:	1b64      	subs	r4, r4, r5
 8009906:	10a4      	asrs	r4, r4, #2
 8009908:	2600      	movs	r6, #0
 800990a:	42a6      	cmp	r6, r4
 800990c:	d105      	bne.n	800991a <__libc_init_array+0x2e>
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	f855 3b04 	ldr.w	r3, [r5], #4
 8009914:	4798      	blx	r3
 8009916:	3601      	adds	r6, #1
 8009918:	e7ee      	b.n	80098f8 <__libc_init_array+0xc>
 800991a:	f855 3b04 	ldr.w	r3, [r5], #4
 800991e:	4798      	blx	r3
 8009920:	3601      	adds	r6, #1
 8009922:	e7f2      	b.n	800990a <__libc_init_array+0x1e>
 8009924:	0800dee0 	.word	0x0800dee0
 8009928:	0800dee0 	.word	0x0800dee0
 800992c:	0800dee0 	.word	0x0800dee0
 8009930:	0800dee4 	.word	0x0800dee4

08009934 <__retarget_lock_acquire_recursive>:
 8009934:	4770      	bx	lr

08009936 <__retarget_lock_release_recursive>:
 8009936:	4770      	bx	lr

08009938 <_free_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4605      	mov	r5, r0
 800993c:	2900      	cmp	r1, #0
 800993e:	d041      	beq.n	80099c4 <_free_r+0x8c>
 8009940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009944:	1f0c      	subs	r4, r1, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	bfb8      	it	lt
 800994a:	18e4      	addlt	r4, r4, r3
 800994c:	f000 f8e0 	bl	8009b10 <__malloc_lock>
 8009950:	4a1d      	ldr	r2, [pc, #116]	@ (80099c8 <_free_r+0x90>)
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	b933      	cbnz	r3, 8009964 <_free_r+0x2c>
 8009956:	6063      	str	r3, [r4, #4]
 8009958:	6014      	str	r4, [r2, #0]
 800995a:	4628      	mov	r0, r5
 800995c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009960:	f000 b8dc 	b.w	8009b1c <__malloc_unlock>
 8009964:	42a3      	cmp	r3, r4
 8009966:	d908      	bls.n	800997a <_free_r+0x42>
 8009968:	6820      	ldr	r0, [r4, #0]
 800996a:	1821      	adds	r1, r4, r0
 800996c:	428b      	cmp	r3, r1
 800996e:	bf01      	itttt	eq
 8009970:	6819      	ldreq	r1, [r3, #0]
 8009972:	685b      	ldreq	r3, [r3, #4]
 8009974:	1809      	addeq	r1, r1, r0
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	e7ed      	b.n	8009956 <_free_r+0x1e>
 800997a:	461a      	mov	r2, r3
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	b10b      	cbz	r3, 8009984 <_free_r+0x4c>
 8009980:	42a3      	cmp	r3, r4
 8009982:	d9fa      	bls.n	800997a <_free_r+0x42>
 8009984:	6811      	ldr	r1, [r2, #0]
 8009986:	1850      	adds	r0, r2, r1
 8009988:	42a0      	cmp	r0, r4
 800998a:	d10b      	bne.n	80099a4 <_free_r+0x6c>
 800998c:	6820      	ldr	r0, [r4, #0]
 800998e:	4401      	add	r1, r0
 8009990:	1850      	adds	r0, r2, r1
 8009992:	4283      	cmp	r3, r0
 8009994:	6011      	str	r1, [r2, #0]
 8009996:	d1e0      	bne.n	800995a <_free_r+0x22>
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	6053      	str	r3, [r2, #4]
 800999e:	4408      	add	r0, r1
 80099a0:	6010      	str	r0, [r2, #0]
 80099a2:	e7da      	b.n	800995a <_free_r+0x22>
 80099a4:	d902      	bls.n	80099ac <_free_r+0x74>
 80099a6:	230c      	movs	r3, #12
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	e7d6      	b.n	800995a <_free_r+0x22>
 80099ac:	6820      	ldr	r0, [r4, #0]
 80099ae:	1821      	adds	r1, r4, r0
 80099b0:	428b      	cmp	r3, r1
 80099b2:	bf04      	itt	eq
 80099b4:	6819      	ldreq	r1, [r3, #0]
 80099b6:	685b      	ldreq	r3, [r3, #4]
 80099b8:	6063      	str	r3, [r4, #4]
 80099ba:	bf04      	itt	eq
 80099bc:	1809      	addeq	r1, r1, r0
 80099be:	6021      	streq	r1, [r4, #0]
 80099c0:	6054      	str	r4, [r2, #4]
 80099c2:	e7ca      	b.n	800995a <_free_r+0x22>
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	20004b78 	.word	0x20004b78

080099cc <sbrk_aligned>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	4e0f      	ldr	r6, [pc, #60]	@ (8009a0c <sbrk_aligned+0x40>)
 80099d0:	460c      	mov	r4, r1
 80099d2:	6831      	ldr	r1, [r6, #0]
 80099d4:	4605      	mov	r5, r0
 80099d6:	b911      	cbnz	r1, 80099de <sbrk_aligned+0x12>
 80099d8:	f000 fba4 	bl	800a124 <_sbrk_r>
 80099dc:	6030      	str	r0, [r6, #0]
 80099de:	4621      	mov	r1, r4
 80099e0:	4628      	mov	r0, r5
 80099e2:	f000 fb9f 	bl	800a124 <_sbrk_r>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	d103      	bne.n	80099f2 <sbrk_aligned+0x26>
 80099ea:	f04f 34ff 	mov.w	r4, #4294967295
 80099ee:	4620      	mov	r0, r4
 80099f0:	bd70      	pop	{r4, r5, r6, pc}
 80099f2:	1cc4      	adds	r4, r0, #3
 80099f4:	f024 0403 	bic.w	r4, r4, #3
 80099f8:	42a0      	cmp	r0, r4
 80099fa:	d0f8      	beq.n	80099ee <sbrk_aligned+0x22>
 80099fc:	1a21      	subs	r1, r4, r0
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 fb90 	bl	800a124 <_sbrk_r>
 8009a04:	3001      	adds	r0, #1
 8009a06:	d1f2      	bne.n	80099ee <sbrk_aligned+0x22>
 8009a08:	e7ef      	b.n	80099ea <sbrk_aligned+0x1e>
 8009a0a:	bf00      	nop
 8009a0c:	20004b74 	.word	0x20004b74

08009a10 <_malloc_r>:
 8009a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a14:	1ccd      	adds	r5, r1, #3
 8009a16:	f025 0503 	bic.w	r5, r5, #3
 8009a1a:	3508      	adds	r5, #8
 8009a1c:	2d0c      	cmp	r5, #12
 8009a1e:	bf38      	it	cc
 8009a20:	250c      	movcc	r5, #12
 8009a22:	2d00      	cmp	r5, #0
 8009a24:	4606      	mov	r6, r0
 8009a26:	db01      	blt.n	8009a2c <_malloc_r+0x1c>
 8009a28:	42a9      	cmp	r1, r5
 8009a2a:	d904      	bls.n	8009a36 <_malloc_r+0x26>
 8009a2c:	230c      	movs	r3, #12
 8009a2e:	6033      	str	r3, [r6, #0]
 8009a30:	2000      	movs	r0, #0
 8009a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b0c <_malloc_r+0xfc>
 8009a3a:	f000 f869 	bl	8009b10 <__malloc_lock>
 8009a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a42:	461c      	mov	r4, r3
 8009a44:	bb44      	cbnz	r4, 8009a98 <_malloc_r+0x88>
 8009a46:	4629      	mov	r1, r5
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f7ff ffbf 	bl	80099cc <sbrk_aligned>
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	4604      	mov	r4, r0
 8009a52:	d158      	bne.n	8009b06 <_malloc_r+0xf6>
 8009a54:	f8d8 4000 	ldr.w	r4, [r8]
 8009a58:	4627      	mov	r7, r4
 8009a5a:	2f00      	cmp	r7, #0
 8009a5c:	d143      	bne.n	8009ae6 <_malloc_r+0xd6>
 8009a5e:	2c00      	cmp	r4, #0
 8009a60:	d04b      	beq.n	8009afa <_malloc_r+0xea>
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	4639      	mov	r1, r7
 8009a66:	4630      	mov	r0, r6
 8009a68:	eb04 0903 	add.w	r9, r4, r3
 8009a6c:	f000 fb5a 	bl	800a124 <_sbrk_r>
 8009a70:	4581      	cmp	r9, r0
 8009a72:	d142      	bne.n	8009afa <_malloc_r+0xea>
 8009a74:	6821      	ldr	r1, [r4, #0]
 8009a76:	1a6d      	subs	r5, r5, r1
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ffa6 	bl	80099cc <sbrk_aligned>
 8009a80:	3001      	adds	r0, #1
 8009a82:	d03a      	beq.n	8009afa <_malloc_r+0xea>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	442b      	add	r3, r5
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	bb62      	cbnz	r2, 8009aec <_malloc_r+0xdc>
 8009a92:	f8c8 7000 	str.w	r7, [r8]
 8009a96:	e00f      	b.n	8009ab8 <_malloc_r+0xa8>
 8009a98:	6822      	ldr	r2, [r4, #0]
 8009a9a:	1b52      	subs	r2, r2, r5
 8009a9c:	d420      	bmi.n	8009ae0 <_malloc_r+0xd0>
 8009a9e:	2a0b      	cmp	r2, #11
 8009aa0:	d917      	bls.n	8009ad2 <_malloc_r+0xc2>
 8009aa2:	1961      	adds	r1, r4, r5
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	6025      	str	r5, [r4, #0]
 8009aa8:	bf18      	it	ne
 8009aaa:	6059      	strne	r1, [r3, #4]
 8009aac:	6863      	ldr	r3, [r4, #4]
 8009aae:	bf08      	it	eq
 8009ab0:	f8c8 1000 	streq.w	r1, [r8]
 8009ab4:	5162      	str	r2, [r4, r5]
 8009ab6:	604b      	str	r3, [r1, #4]
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f000 f82f 	bl	8009b1c <__malloc_unlock>
 8009abe:	f104 000b 	add.w	r0, r4, #11
 8009ac2:	1d23      	adds	r3, r4, #4
 8009ac4:	f020 0007 	bic.w	r0, r0, #7
 8009ac8:	1ac2      	subs	r2, r0, r3
 8009aca:	bf1c      	itt	ne
 8009acc:	1a1b      	subne	r3, r3, r0
 8009ace:	50a3      	strne	r3, [r4, r2]
 8009ad0:	e7af      	b.n	8009a32 <_malloc_r+0x22>
 8009ad2:	6862      	ldr	r2, [r4, #4]
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	bf0c      	ite	eq
 8009ad8:	f8c8 2000 	streq.w	r2, [r8]
 8009adc:	605a      	strne	r2, [r3, #4]
 8009ade:	e7eb      	b.n	8009ab8 <_malloc_r+0xa8>
 8009ae0:	4623      	mov	r3, r4
 8009ae2:	6864      	ldr	r4, [r4, #4]
 8009ae4:	e7ae      	b.n	8009a44 <_malloc_r+0x34>
 8009ae6:	463c      	mov	r4, r7
 8009ae8:	687f      	ldr	r7, [r7, #4]
 8009aea:	e7b6      	b.n	8009a5a <_malloc_r+0x4a>
 8009aec:	461a      	mov	r2, r3
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d1fb      	bne.n	8009aec <_malloc_r+0xdc>
 8009af4:	2300      	movs	r3, #0
 8009af6:	6053      	str	r3, [r2, #4]
 8009af8:	e7de      	b.n	8009ab8 <_malloc_r+0xa8>
 8009afa:	230c      	movs	r3, #12
 8009afc:	6033      	str	r3, [r6, #0]
 8009afe:	4630      	mov	r0, r6
 8009b00:	f000 f80c 	bl	8009b1c <__malloc_unlock>
 8009b04:	e794      	b.n	8009a30 <_malloc_r+0x20>
 8009b06:	6005      	str	r5, [r0, #0]
 8009b08:	e7d6      	b.n	8009ab8 <_malloc_r+0xa8>
 8009b0a:	bf00      	nop
 8009b0c:	20004b78 	.word	0x20004b78

08009b10 <__malloc_lock>:
 8009b10:	4801      	ldr	r0, [pc, #4]	@ (8009b18 <__malloc_lock+0x8>)
 8009b12:	f7ff bf0f 	b.w	8009934 <__retarget_lock_acquire_recursive>
 8009b16:	bf00      	nop
 8009b18:	20004b70 	.word	0x20004b70

08009b1c <__malloc_unlock>:
 8009b1c:	4801      	ldr	r0, [pc, #4]	@ (8009b24 <__malloc_unlock+0x8>)
 8009b1e:	f7ff bf0a 	b.w	8009936 <__retarget_lock_release_recursive>
 8009b22:	bf00      	nop
 8009b24:	20004b70 	.word	0x20004b70

08009b28 <__ssputs_r>:
 8009b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	688e      	ldr	r6, [r1, #8]
 8009b2e:	461f      	mov	r7, r3
 8009b30:	42be      	cmp	r6, r7
 8009b32:	680b      	ldr	r3, [r1, #0]
 8009b34:	4682      	mov	sl, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	4690      	mov	r8, r2
 8009b3a:	d82d      	bhi.n	8009b98 <__ssputs_r+0x70>
 8009b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b44:	d026      	beq.n	8009b94 <__ssputs_r+0x6c>
 8009b46:	6965      	ldr	r5, [r4, #20]
 8009b48:	6909      	ldr	r1, [r1, #16]
 8009b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b4e:	eba3 0901 	sub.w	r9, r3, r1
 8009b52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b56:	1c7b      	adds	r3, r7, #1
 8009b58:	444b      	add	r3, r9
 8009b5a:	106d      	asrs	r5, r5, #1
 8009b5c:	429d      	cmp	r5, r3
 8009b5e:	bf38      	it	cc
 8009b60:	461d      	movcc	r5, r3
 8009b62:	0553      	lsls	r3, r2, #21
 8009b64:	d527      	bpl.n	8009bb6 <__ssputs_r+0x8e>
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7ff ff52 	bl	8009a10 <_malloc_r>
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	b360      	cbz	r0, 8009bca <__ssputs_r+0xa2>
 8009b70:	6921      	ldr	r1, [r4, #16]
 8009b72:	464a      	mov	r2, r9
 8009b74:	f000 fae6 	bl	800a144 <memcpy>
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b82:	81a3      	strh	r3, [r4, #12]
 8009b84:	6126      	str	r6, [r4, #16]
 8009b86:	6165      	str	r5, [r4, #20]
 8009b88:	444e      	add	r6, r9
 8009b8a:	eba5 0509 	sub.w	r5, r5, r9
 8009b8e:	6026      	str	r6, [r4, #0]
 8009b90:	60a5      	str	r5, [r4, #8]
 8009b92:	463e      	mov	r6, r7
 8009b94:	42be      	cmp	r6, r7
 8009b96:	d900      	bls.n	8009b9a <__ssputs_r+0x72>
 8009b98:	463e      	mov	r6, r7
 8009b9a:	6820      	ldr	r0, [r4, #0]
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	4641      	mov	r1, r8
 8009ba0:	f000 faa6 	bl	800a0f0 <memmove>
 8009ba4:	68a3      	ldr	r3, [r4, #8]
 8009ba6:	1b9b      	subs	r3, r3, r6
 8009ba8:	60a3      	str	r3, [r4, #8]
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	4433      	add	r3, r6
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	f000 fad2 	bl	800a160 <_realloc_r>
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d1e0      	bne.n	8009b84 <__ssputs_r+0x5c>
 8009bc2:	6921      	ldr	r1, [r4, #16]
 8009bc4:	4650      	mov	r0, sl
 8009bc6:	f7ff feb7 	bl	8009938 <_free_r>
 8009bca:	230c      	movs	r3, #12
 8009bcc:	f8ca 3000 	str.w	r3, [sl]
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bd6:	81a3      	strh	r3, [r4, #12]
 8009bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bdc:	e7e9      	b.n	8009bb2 <__ssputs_r+0x8a>
	...

08009be0 <_svfiprintf_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	4698      	mov	r8, r3
 8009be6:	898b      	ldrh	r3, [r1, #12]
 8009be8:	061b      	lsls	r3, r3, #24
 8009bea:	b09d      	sub	sp, #116	@ 0x74
 8009bec:	4607      	mov	r7, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	d510      	bpl.n	8009c16 <_svfiprintf_r+0x36>
 8009bf4:	690b      	ldr	r3, [r1, #16]
 8009bf6:	b973      	cbnz	r3, 8009c16 <_svfiprintf_r+0x36>
 8009bf8:	2140      	movs	r1, #64	@ 0x40
 8009bfa:	f7ff ff09 	bl	8009a10 <_malloc_r>
 8009bfe:	6028      	str	r0, [r5, #0]
 8009c00:	6128      	str	r0, [r5, #16]
 8009c02:	b930      	cbnz	r0, 8009c12 <_svfiprintf_r+0x32>
 8009c04:	230c      	movs	r3, #12
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	b01d      	add	sp, #116	@ 0x74
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c12:	2340      	movs	r3, #64	@ 0x40
 8009c14:	616b      	str	r3, [r5, #20]
 8009c16:	2300      	movs	r3, #0
 8009c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c1a:	2320      	movs	r3, #32
 8009c1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c24:	2330      	movs	r3, #48	@ 0x30
 8009c26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009dc4 <_svfiprintf_r+0x1e4>
 8009c2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c2e:	f04f 0901 	mov.w	r9, #1
 8009c32:	4623      	mov	r3, r4
 8009c34:	469a      	mov	sl, r3
 8009c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c3a:	b10a      	cbz	r2, 8009c40 <_svfiprintf_r+0x60>
 8009c3c:	2a25      	cmp	r2, #37	@ 0x25
 8009c3e:	d1f9      	bne.n	8009c34 <_svfiprintf_r+0x54>
 8009c40:	ebba 0b04 	subs.w	fp, sl, r4
 8009c44:	d00b      	beq.n	8009c5e <_svfiprintf_r+0x7e>
 8009c46:	465b      	mov	r3, fp
 8009c48:	4622      	mov	r2, r4
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	f7ff ff6b 	bl	8009b28 <__ssputs_r>
 8009c52:	3001      	adds	r0, #1
 8009c54:	f000 80a7 	beq.w	8009da6 <_svfiprintf_r+0x1c6>
 8009c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c5a:	445a      	add	r2, fp
 8009c5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 809f 	beq.w	8009da6 <_svfiprintf_r+0x1c6>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c72:	f10a 0a01 	add.w	sl, sl, #1
 8009c76:	9304      	str	r3, [sp, #16]
 8009c78:	9307      	str	r3, [sp, #28]
 8009c7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c80:	4654      	mov	r4, sl
 8009c82:	2205      	movs	r2, #5
 8009c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c88:	484e      	ldr	r0, [pc, #312]	@ (8009dc4 <_svfiprintf_r+0x1e4>)
 8009c8a:	f7f6 faa1 	bl	80001d0 <memchr>
 8009c8e:	9a04      	ldr	r2, [sp, #16]
 8009c90:	b9d8      	cbnz	r0, 8009cca <_svfiprintf_r+0xea>
 8009c92:	06d0      	lsls	r0, r2, #27
 8009c94:	bf44      	itt	mi
 8009c96:	2320      	movmi	r3, #32
 8009c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c9c:	0711      	lsls	r1, r2, #28
 8009c9e:	bf44      	itt	mi
 8009ca0:	232b      	movmi	r3, #43	@ 0x2b
 8009ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8009caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cac:	d015      	beq.n	8009cda <_svfiprintf_r+0xfa>
 8009cae:	9a07      	ldr	r2, [sp, #28]
 8009cb0:	4654      	mov	r4, sl
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	f04f 0c0a 	mov.w	ip, #10
 8009cb8:	4621      	mov	r1, r4
 8009cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cbe:	3b30      	subs	r3, #48	@ 0x30
 8009cc0:	2b09      	cmp	r3, #9
 8009cc2:	d94b      	bls.n	8009d5c <_svfiprintf_r+0x17c>
 8009cc4:	b1b0      	cbz	r0, 8009cf4 <_svfiprintf_r+0x114>
 8009cc6:	9207      	str	r2, [sp, #28]
 8009cc8:	e014      	b.n	8009cf4 <_svfiprintf_r+0x114>
 8009cca:	eba0 0308 	sub.w	r3, r0, r8
 8009cce:	fa09 f303 	lsl.w	r3, r9, r3
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	46a2      	mov	sl, r4
 8009cd8:	e7d2      	b.n	8009c80 <_svfiprintf_r+0xa0>
 8009cda:	9b03      	ldr	r3, [sp, #12]
 8009cdc:	1d19      	adds	r1, r3, #4
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	9103      	str	r1, [sp, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bfbb      	ittet	lt
 8009ce6:	425b      	neglt	r3, r3
 8009ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8009cec:	9307      	strge	r3, [sp, #28]
 8009cee:	9307      	strlt	r3, [sp, #28]
 8009cf0:	bfb8      	it	lt
 8009cf2:	9204      	strlt	r2, [sp, #16]
 8009cf4:	7823      	ldrb	r3, [r4, #0]
 8009cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cf8:	d10a      	bne.n	8009d10 <_svfiprintf_r+0x130>
 8009cfa:	7863      	ldrb	r3, [r4, #1]
 8009cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cfe:	d132      	bne.n	8009d66 <_svfiprintf_r+0x186>
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	1d1a      	adds	r2, r3, #4
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	9203      	str	r2, [sp, #12]
 8009d08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d0c:	3402      	adds	r4, #2
 8009d0e:	9305      	str	r3, [sp, #20]
 8009d10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009dd4 <_svfiprintf_r+0x1f4>
 8009d14:	7821      	ldrb	r1, [r4, #0]
 8009d16:	2203      	movs	r2, #3
 8009d18:	4650      	mov	r0, sl
 8009d1a:	f7f6 fa59 	bl	80001d0 <memchr>
 8009d1e:	b138      	cbz	r0, 8009d30 <_svfiprintf_r+0x150>
 8009d20:	9b04      	ldr	r3, [sp, #16]
 8009d22:	eba0 000a 	sub.w	r0, r0, sl
 8009d26:	2240      	movs	r2, #64	@ 0x40
 8009d28:	4082      	lsls	r2, r0
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	3401      	adds	r4, #1
 8009d2e:	9304      	str	r3, [sp, #16]
 8009d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d34:	4824      	ldr	r0, [pc, #144]	@ (8009dc8 <_svfiprintf_r+0x1e8>)
 8009d36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d3a:	2206      	movs	r2, #6
 8009d3c:	f7f6 fa48 	bl	80001d0 <memchr>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d036      	beq.n	8009db2 <_svfiprintf_r+0x1d2>
 8009d44:	4b21      	ldr	r3, [pc, #132]	@ (8009dcc <_svfiprintf_r+0x1ec>)
 8009d46:	bb1b      	cbnz	r3, 8009d90 <_svfiprintf_r+0x1b0>
 8009d48:	9b03      	ldr	r3, [sp, #12]
 8009d4a:	3307      	adds	r3, #7
 8009d4c:	f023 0307 	bic.w	r3, r3, #7
 8009d50:	3308      	adds	r3, #8
 8009d52:	9303      	str	r3, [sp, #12]
 8009d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d56:	4433      	add	r3, r6
 8009d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d5a:	e76a      	b.n	8009c32 <_svfiprintf_r+0x52>
 8009d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d60:	460c      	mov	r4, r1
 8009d62:	2001      	movs	r0, #1
 8009d64:	e7a8      	b.n	8009cb8 <_svfiprintf_r+0xd8>
 8009d66:	2300      	movs	r3, #0
 8009d68:	3401      	adds	r4, #1
 8009d6a:	9305      	str	r3, [sp, #20]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	f04f 0c0a 	mov.w	ip, #10
 8009d72:	4620      	mov	r0, r4
 8009d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d78:	3a30      	subs	r2, #48	@ 0x30
 8009d7a:	2a09      	cmp	r2, #9
 8009d7c:	d903      	bls.n	8009d86 <_svfiprintf_r+0x1a6>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0c6      	beq.n	8009d10 <_svfiprintf_r+0x130>
 8009d82:	9105      	str	r1, [sp, #20]
 8009d84:	e7c4      	b.n	8009d10 <_svfiprintf_r+0x130>
 8009d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e7f0      	b.n	8009d72 <_svfiprintf_r+0x192>
 8009d90:	ab03      	add	r3, sp, #12
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	462a      	mov	r2, r5
 8009d96:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd0 <_svfiprintf_r+0x1f0>)
 8009d98:	a904      	add	r1, sp, #16
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	f3af 8000 	nop.w
 8009da0:	1c42      	adds	r2, r0, #1
 8009da2:	4606      	mov	r6, r0
 8009da4:	d1d6      	bne.n	8009d54 <_svfiprintf_r+0x174>
 8009da6:	89ab      	ldrh	r3, [r5, #12]
 8009da8:	065b      	lsls	r3, r3, #25
 8009daa:	f53f af2d 	bmi.w	8009c08 <_svfiprintf_r+0x28>
 8009dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009db0:	e72c      	b.n	8009c0c <_svfiprintf_r+0x2c>
 8009db2:	ab03      	add	r3, sp, #12
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	462a      	mov	r2, r5
 8009db8:	4b05      	ldr	r3, [pc, #20]	@ (8009dd0 <_svfiprintf_r+0x1f0>)
 8009dba:	a904      	add	r1, sp, #16
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f000 f879 	bl	8009eb4 <_printf_i>
 8009dc2:	e7ed      	b.n	8009da0 <_svfiprintf_r+0x1c0>
 8009dc4:	0800dcc8 	.word	0x0800dcc8
 8009dc8:	0800dcd2 	.word	0x0800dcd2
 8009dcc:	00000000 	.word	0x00000000
 8009dd0:	08009b29 	.word	0x08009b29
 8009dd4:	0800dcce 	.word	0x0800dcce

08009dd8 <_printf_common>:
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	4616      	mov	r6, r2
 8009dde:	4698      	mov	r8, r3
 8009de0:	688a      	ldr	r2, [r1, #8]
 8009de2:	690b      	ldr	r3, [r1, #16]
 8009de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	bfb8      	it	lt
 8009dec:	4613      	movlt	r3, r2
 8009dee:	6033      	str	r3, [r6, #0]
 8009df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009df4:	4607      	mov	r7, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b10a      	cbz	r2, 8009dfe <_printf_common+0x26>
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	6033      	str	r3, [r6, #0]
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	0699      	lsls	r1, r3, #26
 8009e02:	bf42      	ittt	mi
 8009e04:	6833      	ldrmi	r3, [r6, #0]
 8009e06:	3302      	addmi	r3, #2
 8009e08:	6033      	strmi	r3, [r6, #0]
 8009e0a:	6825      	ldr	r5, [r4, #0]
 8009e0c:	f015 0506 	ands.w	r5, r5, #6
 8009e10:	d106      	bne.n	8009e20 <_printf_common+0x48>
 8009e12:	f104 0a19 	add.w	sl, r4, #25
 8009e16:	68e3      	ldr	r3, [r4, #12]
 8009e18:	6832      	ldr	r2, [r6, #0]
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	42ab      	cmp	r3, r5
 8009e1e:	dc26      	bgt.n	8009e6e <_printf_common+0x96>
 8009e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	3b00      	subs	r3, #0
 8009e28:	bf18      	it	ne
 8009e2a:	2301      	movne	r3, #1
 8009e2c:	0692      	lsls	r2, r2, #26
 8009e2e:	d42b      	bmi.n	8009e88 <_printf_common+0xb0>
 8009e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e34:	4641      	mov	r1, r8
 8009e36:	4638      	mov	r0, r7
 8009e38:	47c8      	blx	r9
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d01e      	beq.n	8009e7c <_printf_common+0xa4>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	6922      	ldr	r2, [r4, #16]
 8009e42:	f003 0306 	and.w	r3, r3, #6
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	bf02      	ittt	eq
 8009e4a:	68e5      	ldreq	r5, [r4, #12]
 8009e4c:	6833      	ldreq	r3, [r6, #0]
 8009e4e:	1aed      	subeq	r5, r5, r3
 8009e50:	68a3      	ldr	r3, [r4, #8]
 8009e52:	bf0c      	ite	eq
 8009e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e58:	2500      	movne	r5, #0
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	bfc4      	itt	gt
 8009e5e:	1a9b      	subgt	r3, r3, r2
 8009e60:	18ed      	addgt	r5, r5, r3
 8009e62:	2600      	movs	r6, #0
 8009e64:	341a      	adds	r4, #26
 8009e66:	42b5      	cmp	r5, r6
 8009e68:	d11a      	bne.n	8009ea0 <_printf_common+0xc8>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e008      	b.n	8009e80 <_printf_common+0xa8>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4652      	mov	r2, sl
 8009e72:	4641      	mov	r1, r8
 8009e74:	4638      	mov	r0, r7
 8009e76:	47c8      	blx	r9
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d103      	bne.n	8009e84 <_printf_common+0xac>
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	3501      	adds	r5, #1
 8009e86:	e7c6      	b.n	8009e16 <_printf_common+0x3e>
 8009e88:	18e1      	adds	r1, r4, r3
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	2030      	movs	r0, #48	@ 0x30
 8009e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e92:	4422      	add	r2, r4
 8009e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e9c:	3302      	adds	r3, #2
 8009e9e:	e7c7      	b.n	8009e30 <_printf_common+0x58>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4641      	mov	r1, r8
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	47c8      	blx	r9
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d0e6      	beq.n	8009e7c <_printf_common+0xa4>
 8009eae:	3601      	adds	r6, #1
 8009eb0:	e7d9      	b.n	8009e66 <_printf_common+0x8e>
	...

08009eb4 <_printf_i>:
 8009eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	7e0f      	ldrb	r7, [r1, #24]
 8009eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ebc:	2f78      	cmp	r7, #120	@ 0x78
 8009ebe:	4691      	mov	r9, r2
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	469a      	mov	sl, r3
 8009ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009eca:	d807      	bhi.n	8009edc <_printf_i+0x28>
 8009ecc:	2f62      	cmp	r7, #98	@ 0x62
 8009ece:	d80a      	bhi.n	8009ee6 <_printf_i+0x32>
 8009ed0:	2f00      	cmp	r7, #0
 8009ed2:	f000 80d1 	beq.w	800a078 <_printf_i+0x1c4>
 8009ed6:	2f58      	cmp	r7, #88	@ 0x58
 8009ed8:	f000 80b8 	beq.w	800a04c <_printf_i+0x198>
 8009edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ee4:	e03a      	b.n	8009f5c <_printf_i+0xa8>
 8009ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009eea:	2b15      	cmp	r3, #21
 8009eec:	d8f6      	bhi.n	8009edc <_printf_i+0x28>
 8009eee:	a101      	add	r1, pc, #4	@ (adr r1, 8009ef4 <_printf_i+0x40>)
 8009ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ef4:	08009f4d 	.word	0x08009f4d
 8009ef8:	08009f61 	.word	0x08009f61
 8009efc:	08009edd 	.word	0x08009edd
 8009f00:	08009edd 	.word	0x08009edd
 8009f04:	08009edd 	.word	0x08009edd
 8009f08:	08009edd 	.word	0x08009edd
 8009f0c:	08009f61 	.word	0x08009f61
 8009f10:	08009edd 	.word	0x08009edd
 8009f14:	08009edd 	.word	0x08009edd
 8009f18:	08009edd 	.word	0x08009edd
 8009f1c:	08009edd 	.word	0x08009edd
 8009f20:	0800a05f 	.word	0x0800a05f
 8009f24:	08009f8b 	.word	0x08009f8b
 8009f28:	0800a019 	.word	0x0800a019
 8009f2c:	08009edd 	.word	0x08009edd
 8009f30:	08009edd 	.word	0x08009edd
 8009f34:	0800a081 	.word	0x0800a081
 8009f38:	08009edd 	.word	0x08009edd
 8009f3c:	08009f8b 	.word	0x08009f8b
 8009f40:	08009edd 	.word	0x08009edd
 8009f44:	08009edd 	.word	0x08009edd
 8009f48:	0800a021 	.word	0x0800a021
 8009f4c:	6833      	ldr	r3, [r6, #0]
 8009f4e:	1d1a      	adds	r2, r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6032      	str	r2, [r6, #0]
 8009f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e09c      	b.n	800a09a <_printf_i+0x1e6>
 8009f60:	6833      	ldr	r3, [r6, #0]
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	1d19      	adds	r1, r3, #4
 8009f66:	6031      	str	r1, [r6, #0]
 8009f68:	0606      	lsls	r6, r0, #24
 8009f6a:	d501      	bpl.n	8009f70 <_printf_i+0xbc>
 8009f6c:	681d      	ldr	r5, [r3, #0]
 8009f6e:	e003      	b.n	8009f78 <_printf_i+0xc4>
 8009f70:	0645      	lsls	r5, r0, #25
 8009f72:	d5fb      	bpl.n	8009f6c <_printf_i+0xb8>
 8009f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f78:	2d00      	cmp	r5, #0
 8009f7a:	da03      	bge.n	8009f84 <_printf_i+0xd0>
 8009f7c:	232d      	movs	r3, #45	@ 0x2d
 8009f7e:	426d      	negs	r5, r5
 8009f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f84:	4858      	ldr	r0, [pc, #352]	@ (800a0e8 <_printf_i+0x234>)
 8009f86:	230a      	movs	r3, #10
 8009f88:	e011      	b.n	8009fae <_printf_i+0xfa>
 8009f8a:	6821      	ldr	r1, [r4, #0]
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	0608      	lsls	r0, r1, #24
 8009f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f94:	d402      	bmi.n	8009f9c <_printf_i+0xe8>
 8009f96:	0649      	lsls	r1, r1, #25
 8009f98:	bf48      	it	mi
 8009f9a:	b2ad      	uxthmi	r5, r5
 8009f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f9e:	4852      	ldr	r0, [pc, #328]	@ (800a0e8 <_printf_i+0x234>)
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	bf14      	ite	ne
 8009fa4:	230a      	movne	r3, #10
 8009fa6:	2308      	moveq	r3, #8
 8009fa8:	2100      	movs	r1, #0
 8009faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fae:	6866      	ldr	r6, [r4, #4]
 8009fb0:	60a6      	str	r6, [r4, #8]
 8009fb2:	2e00      	cmp	r6, #0
 8009fb4:	db05      	blt.n	8009fc2 <_printf_i+0x10e>
 8009fb6:	6821      	ldr	r1, [r4, #0]
 8009fb8:	432e      	orrs	r6, r5
 8009fba:	f021 0104 	bic.w	r1, r1, #4
 8009fbe:	6021      	str	r1, [r4, #0]
 8009fc0:	d04b      	beq.n	800a05a <_printf_i+0x1a6>
 8009fc2:	4616      	mov	r6, r2
 8009fc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fc8:	fb03 5711 	mls	r7, r3, r1, r5
 8009fcc:	5dc7      	ldrb	r7, [r0, r7]
 8009fce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fd2:	462f      	mov	r7, r5
 8009fd4:	42bb      	cmp	r3, r7
 8009fd6:	460d      	mov	r5, r1
 8009fd8:	d9f4      	bls.n	8009fc4 <_printf_i+0x110>
 8009fda:	2b08      	cmp	r3, #8
 8009fdc:	d10b      	bne.n	8009ff6 <_printf_i+0x142>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	07df      	lsls	r7, r3, #31
 8009fe2:	d508      	bpl.n	8009ff6 <_printf_i+0x142>
 8009fe4:	6923      	ldr	r3, [r4, #16]
 8009fe6:	6861      	ldr	r1, [r4, #4]
 8009fe8:	4299      	cmp	r1, r3
 8009fea:	bfde      	ittt	le
 8009fec:	2330      	movle	r3, #48	@ 0x30
 8009fee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ff2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ff6:	1b92      	subs	r2, r2, r6
 8009ff8:	6122      	str	r2, [r4, #16]
 8009ffa:	f8cd a000 	str.w	sl, [sp]
 8009ffe:	464b      	mov	r3, r9
 800a000:	aa03      	add	r2, sp, #12
 800a002:	4621      	mov	r1, r4
 800a004:	4640      	mov	r0, r8
 800a006:	f7ff fee7 	bl	8009dd8 <_printf_common>
 800a00a:	3001      	adds	r0, #1
 800a00c:	d14a      	bne.n	800a0a4 <_printf_i+0x1f0>
 800a00e:	f04f 30ff 	mov.w	r0, #4294967295
 800a012:	b004      	add	sp, #16
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	f043 0320 	orr.w	r3, r3, #32
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	4832      	ldr	r0, [pc, #200]	@ (800a0ec <_printf_i+0x238>)
 800a022:	2778      	movs	r7, #120	@ 0x78
 800a024:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	6831      	ldr	r1, [r6, #0]
 800a02c:	061f      	lsls	r7, r3, #24
 800a02e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a032:	d402      	bmi.n	800a03a <_printf_i+0x186>
 800a034:	065f      	lsls	r7, r3, #25
 800a036:	bf48      	it	mi
 800a038:	b2ad      	uxthmi	r5, r5
 800a03a:	6031      	str	r1, [r6, #0]
 800a03c:	07d9      	lsls	r1, r3, #31
 800a03e:	bf44      	itt	mi
 800a040:	f043 0320 	orrmi.w	r3, r3, #32
 800a044:	6023      	strmi	r3, [r4, #0]
 800a046:	b11d      	cbz	r5, 800a050 <_printf_i+0x19c>
 800a048:	2310      	movs	r3, #16
 800a04a:	e7ad      	b.n	8009fa8 <_printf_i+0xf4>
 800a04c:	4826      	ldr	r0, [pc, #152]	@ (800a0e8 <_printf_i+0x234>)
 800a04e:	e7e9      	b.n	800a024 <_printf_i+0x170>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	f023 0320 	bic.w	r3, r3, #32
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	e7f6      	b.n	800a048 <_printf_i+0x194>
 800a05a:	4616      	mov	r6, r2
 800a05c:	e7bd      	b.n	8009fda <_printf_i+0x126>
 800a05e:	6833      	ldr	r3, [r6, #0]
 800a060:	6825      	ldr	r5, [r4, #0]
 800a062:	6961      	ldr	r1, [r4, #20]
 800a064:	1d18      	adds	r0, r3, #4
 800a066:	6030      	str	r0, [r6, #0]
 800a068:	062e      	lsls	r6, r5, #24
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	d501      	bpl.n	800a072 <_printf_i+0x1be>
 800a06e:	6019      	str	r1, [r3, #0]
 800a070:	e002      	b.n	800a078 <_printf_i+0x1c4>
 800a072:	0668      	lsls	r0, r5, #25
 800a074:	d5fb      	bpl.n	800a06e <_printf_i+0x1ba>
 800a076:	8019      	strh	r1, [r3, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	6123      	str	r3, [r4, #16]
 800a07c:	4616      	mov	r6, r2
 800a07e:	e7bc      	b.n	8009ffa <_printf_i+0x146>
 800a080:	6833      	ldr	r3, [r6, #0]
 800a082:	1d1a      	adds	r2, r3, #4
 800a084:	6032      	str	r2, [r6, #0]
 800a086:	681e      	ldr	r6, [r3, #0]
 800a088:	6862      	ldr	r2, [r4, #4]
 800a08a:	2100      	movs	r1, #0
 800a08c:	4630      	mov	r0, r6
 800a08e:	f7f6 f89f 	bl	80001d0 <memchr>
 800a092:	b108      	cbz	r0, 800a098 <_printf_i+0x1e4>
 800a094:	1b80      	subs	r0, r0, r6
 800a096:	6060      	str	r0, [r4, #4]
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	6123      	str	r3, [r4, #16]
 800a09c:	2300      	movs	r3, #0
 800a09e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0a2:	e7aa      	b.n	8009ffa <_printf_i+0x146>
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	47d0      	blx	sl
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	d0ad      	beq.n	800a00e <_printf_i+0x15a>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	079b      	lsls	r3, r3, #30
 800a0b6:	d413      	bmi.n	800a0e0 <_printf_i+0x22c>
 800a0b8:	68e0      	ldr	r0, [r4, #12]
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	4298      	cmp	r0, r3
 800a0be:	bfb8      	it	lt
 800a0c0:	4618      	movlt	r0, r3
 800a0c2:	e7a6      	b.n	800a012 <_printf_i+0x15e>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	47d0      	blx	sl
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d09d      	beq.n	800a00e <_printf_i+0x15a>
 800a0d2:	3501      	adds	r5, #1
 800a0d4:	68e3      	ldr	r3, [r4, #12]
 800a0d6:	9903      	ldr	r1, [sp, #12]
 800a0d8:	1a5b      	subs	r3, r3, r1
 800a0da:	42ab      	cmp	r3, r5
 800a0dc:	dcf2      	bgt.n	800a0c4 <_printf_i+0x210>
 800a0de:	e7eb      	b.n	800a0b8 <_printf_i+0x204>
 800a0e0:	2500      	movs	r5, #0
 800a0e2:	f104 0619 	add.w	r6, r4, #25
 800a0e6:	e7f5      	b.n	800a0d4 <_printf_i+0x220>
 800a0e8:	0800dcd9 	.word	0x0800dcd9
 800a0ec:	0800dcea 	.word	0x0800dcea

0800a0f0 <memmove>:
 800a0f0:	4288      	cmp	r0, r1
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	eb01 0402 	add.w	r4, r1, r2
 800a0f8:	d902      	bls.n	800a100 <memmove+0x10>
 800a0fa:	4284      	cmp	r4, r0
 800a0fc:	4623      	mov	r3, r4
 800a0fe:	d807      	bhi.n	800a110 <memmove+0x20>
 800a100:	1e43      	subs	r3, r0, #1
 800a102:	42a1      	cmp	r1, r4
 800a104:	d008      	beq.n	800a118 <memmove+0x28>
 800a106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a10a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a10e:	e7f8      	b.n	800a102 <memmove+0x12>
 800a110:	4402      	add	r2, r0
 800a112:	4601      	mov	r1, r0
 800a114:	428a      	cmp	r2, r1
 800a116:	d100      	bne.n	800a11a <memmove+0x2a>
 800a118:	bd10      	pop	{r4, pc}
 800a11a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a11e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a122:	e7f7      	b.n	800a114 <memmove+0x24>

0800a124 <_sbrk_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4d06      	ldr	r5, [pc, #24]	@ (800a140 <_sbrk_r+0x1c>)
 800a128:	2300      	movs	r3, #0
 800a12a:	4604      	mov	r4, r0
 800a12c:	4608      	mov	r0, r1
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	f7f9 f820 	bl	8003174 <_sbrk>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_sbrk_r+0x1a>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_sbrk_r+0x1a>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	20004b6c 	.word	0x20004b6c

0800a144 <memcpy>:
 800a144:	440a      	add	r2, r1
 800a146:	4291      	cmp	r1, r2
 800a148:	f100 33ff 	add.w	r3, r0, #4294967295
 800a14c:	d100      	bne.n	800a150 <memcpy+0xc>
 800a14e:	4770      	bx	lr
 800a150:	b510      	push	{r4, lr}
 800a152:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a15a:	4291      	cmp	r1, r2
 800a15c:	d1f9      	bne.n	800a152 <memcpy+0xe>
 800a15e:	bd10      	pop	{r4, pc}

0800a160 <_realloc_r>:
 800a160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a164:	4607      	mov	r7, r0
 800a166:	4614      	mov	r4, r2
 800a168:	460d      	mov	r5, r1
 800a16a:	b921      	cbnz	r1, 800a176 <_realloc_r+0x16>
 800a16c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a170:	4611      	mov	r1, r2
 800a172:	f7ff bc4d 	b.w	8009a10 <_malloc_r>
 800a176:	b92a      	cbnz	r2, 800a184 <_realloc_r+0x24>
 800a178:	f7ff fbde 	bl	8009938 <_free_r>
 800a17c:	4625      	mov	r5, r4
 800a17e:	4628      	mov	r0, r5
 800a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a184:	f000 f81a 	bl	800a1bc <_malloc_usable_size_r>
 800a188:	4284      	cmp	r4, r0
 800a18a:	4606      	mov	r6, r0
 800a18c:	d802      	bhi.n	800a194 <_realloc_r+0x34>
 800a18e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a192:	d8f4      	bhi.n	800a17e <_realloc_r+0x1e>
 800a194:	4621      	mov	r1, r4
 800a196:	4638      	mov	r0, r7
 800a198:	f7ff fc3a 	bl	8009a10 <_malloc_r>
 800a19c:	4680      	mov	r8, r0
 800a19e:	b908      	cbnz	r0, 800a1a4 <_realloc_r+0x44>
 800a1a0:	4645      	mov	r5, r8
 800a1a2:	e7ec      	b.n	800a17e <_realloc_r+0x1e>
 800a1a4:	42b4      	cmp	r4, r6
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	bf28      	it	cs
 800a1ac:	4632      	movcs	r2, r6
 800a1ae:	f7ff ffc9 	bl	800a144 <memcpy>
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff fbbf 	bl	8009938 <_free_r>
 800a1ba:	e7f1      	b.n	800a1a0 <_realloc_r+0x40>

0800a1bc <_malloc_usable_size_r>:
 800a1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c0:	1f18      	subs	r0, r3, #4
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	bfbc      	itt	lt
 800a1c6:	580b      	ldrlt	r3, [r1, r0]
 800a1c8:	18c0      	addlt	r0, r0, r3
 800a1ca:	4770      	bx	lr
 800a1cc:	0000      	movs	r0, r0
	...

0800a1d0 <sin>:
 800a1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1d2:	ec53 2b10 	vmov	r2, r3, d0
 800a1d6:	4826      	ldr	r0, [pc, #152]	@ (800a270 <sin+0xa0>)
 800a1d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a1dc:	4281      	cmp	r1, r0
 800a1de:	d807      	bhi.n	800a1f0 <sin+0x20>
 800a1e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a268 <sin+0x98>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	b005      	add	sp, #20
 800a1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ec:	f000 b90c 	b.w	800a408 <__kernel_sin>
 800a1f0:	4820      	ldr	r0, [pc, #128]	@ (800a274 <sin+0xa4>)
 800a1f2:	4281      	cmp	r1, r0
 800a1f4:	d908      	bls.n	800a208 <sin+0x38>
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f7f6 f83d 	bl	8000278 <__aeabi_dsub>
 800a1fe:	ec41 0b10 	vmov	d0, r0, r1
 800a202:	b005      	add	sp, #20
 800a204:	f85d fb04 	ldr.w	pc, [sp], #4
 800a208:	4668      	mov	r0, sp
 800a20a:	f000 f9b9 	bl	800a580 <__ieee754_rem_pio2>
 800a20e:	f000 0003 	and.w	r0, r0, #3
 800a212:	2801      	cmp	r0, #1
 800a214:	d00c      	beq.n	800a230 <sin+0x60>
 800a216:	2802      	cmp	r0, #2
 800a218:	d011      	beq.n	800a23e <sin+0x6e>
 800a21a:	b9e8      	cbnz	r0, 800a258 <sin+0x88>
 800a21c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a220:	ed9d 0b00 	vldr	d0, [sp]
 800a224:	2001      	movs	r0, #1
 800a226:	f000 f8ef 	bl	800a408 <__kernel_sin>
 800a22a:	ec51 0b10 	vmov	r0, r1, d0
 800a22e:	e7e6      	b.n	800a1fe <sin+0x2e>
 800a230:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a234:	ed9d 0b00 	vldr	d0, [sp]
 800a238:	f000 f81e 	bl	800a278 <__kernel_cos>
 800a23c:	e7f5      	b.n	800a22a <sin+0x5a>
 800a23e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a242:	ed9d 0b00 	vldr	d0, [sp]
 800a246:	2001      	movs	r0, #1
 800a248:	f000 f8de 	bl	800a408 <__kernel_sin>
 800a24c:	ec53 2b10 	vmov	r2, r3, d0
 800a250:	4610      	mov	r0, r2
 800a252:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a256:	e7d2      	b.n	800a1fe <sin+0x2e>
 800a258:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a25c:	ed9d 0b00 	vldr	d0, [sp]
 800a260:	f000 f80a 	bl	800a278 <__kernel_cos>
 800a264:	e7f2      	b.n	800a24c <sin+0x7c>
 800a266:	bf00      	nop
	...
 800a270:	3fe921fb 	.word	0x3fe921fb
 800a274:	7fefffff 	.word	0x7fefffff

0800a278 <__kernel_cos>:
 800a278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	ec57 6b10 	vmov	r6, r7, d0
 800a280:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a284:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a288:	ed8d 1b00 	vstr	d1, [sp]
 800a28c:	d206      	bcs.n	800a29c <__kernel_cos+0x24>
 800a28e:	4630      	mov	r0, r6
 800a290:	4639      	mov	r1, r7
 800a292:	f7f6 fc43 	bl	8000b1c <__aeabi_d2iz>
 800a296:	2800      	cmp	r0, #0
 800a298:	f000 8088 	beq.w	800a3ac <__kernel_cos+0x134>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	f7f6 f9a0 	bl	80005e8 <__aeabi_dmul>
 800a2a8:	4b51      	ldr	r3, [pc, #324]	@ (800a3f0 <__kernel_cos+0x178>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	f7f6 f99a 	bl	80005e8 <__aeabi_dmul>
 800a2b4:	a340      	add	r3, pc, #256	@ (adr r3, 800a3b8 <__kernel_cos+0x140>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	4682      	mov	sl, r0
 800a2bc:	468b      	mov	fp, r1
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7f6 f991 	bl	80005e8 <__aeabi_dmul>
 800a2c6:	a33e      	add	r3, pc, #248	@ (adr r3, 800a3c0 <__kernel_cos+0x148>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f5 ffd6 	bl	800027c <__adddf3>
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	f7f6 f988 	bl	80005e8 <__aeabi_dmul>
 800a2d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a3c8 <__kernel_cos+0x150>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f5 ffcb 	bl	8000278 <__aeabi_dsub>
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	462b      	mov	r3, r5
 800a2e6:	f7f6 f97f 	bl	80005e8 <__aeabi_dmul>
 800a2ea:	a339      	add	r3, pc, #228	@ (adr r3, 800a3d0 <__kernel_cos+0x158>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7f5 ffc4 	bl	800027c <__adddf3>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 f976 	bl	80005e8 <__aeabi_dmul>
 800a2fc:	a336      	add	r3, pc, #216	@ (adr r3, 800a3d8 <__kernel_cos+0x160>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f5 ffb9 	bl	8000278 <__aeabi_dsub>
 800a306:	4622      	mov	r2, r4
 800a308:	462b      	mov	r3, r5
 800a30a:	f7f6 f96d 	bl	80005e8 <__aeabi_dmul>
 800a30e:	a334      	add	r3, pc, #208	@ (adr r3, 800a3e0 <__kernel_cos+0x168>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f5 ffb2 	bl	800027c <__adddf3>
 800a318:	4622      	mov	r2, r4
 800a31a:	462b      	mov	r3, r5
 800a31c:	f7f6 f964 	bl	80005e8 <__aeabi_dmul>
 800a320:	4622      	mov	r2, r4
 800a322:	462b      	mov	r3, r5
 800a324:	f7f6 f960 	bl	80005e8 <__aeabi_dmul>
 800a328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f6 f958 	bl	80005e8 <__aeabi_dmul>
 800a338:	460b      	mov	r3, r1
 800a33a:	4602      	mov	r2, r0
 800a33c:	4629      	mov	r1, r5
 800a33e:	4620      	mov	r0, r4
 800a340:	f7f5 ff9a 	bl	8000278 <__aeabi_dsub>
 800a344:	4b2b      	ldr	r3, [pc, #172]	@ (800a3f4 <__kernel_cos+0x17c>)
 800a346:	4598      	cmp	r8, r3
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	d810      	bhi.n	800a370 <__kernel_cos+0xf8>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4650      	mov	r0, sl
 800a354:	4659      	mov	r1, fp
 800a356:	f7f5 ff8f 	bl	8000278 <__aeabi_dsub>
 800a35a:	460b      	mov	r3, r1
 800a35c:	4926      	ldr	r1, [pc, #152]	@ (800a3f8 <__kernel_cos+0x180>)
 800a35e:	4602      	mov	r2, r0
 800a360:	2000      	movs	r0, #0
 800a362:	f7f5 ff89 	bl	8000278 <__aeabi_dsub>
 800a366:	ec41 0b10 	vmov	d0, r0, r1
 800a36a:	b003      	add	sp, #12
 800a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a370:	4b22      	ldr	r3, [pc, #136]	@ (800a3fc <__kernel_cos+0x184>)
 800a372:	4921      	ldr	r1, [pc, #132]	@ (800a3f8 <__kernel_cos+0x180>)
 800a374:	4598      	cmp	r8, r3
 800a376:	bf8c      	ite	hi
 800a378:	4d21      	ldrhi	r5, [pc, #132]	@ (800a400 <__kernel_cos+0x188>)
 800a37a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a37e:	2400      	movs	r4, #0
 800a380:	4622      	mov	r2, r4
 800a382:	462b      	mov	r3, r5
 800a384:	2000      	movs	r0, #0
 800a386:	f7f5 ff77 	bl	8000278 <__aeabi_dsub>
 800a38a:	4622      	mov	r2, r4
 800a38c:	4680      	mov	r8, r0
 800a38e:	4689      	mov	r9, r1
 800a390:	462b      	mov	r3, r5
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f5 ff6f 	bl	8000278 <__aeabi_dsub>
 800a39a:	4632      	mov	r2, r6
 800a39c:	463b      	mov	r3, r7
 800a39e:	f7f5 ff6b 	bl	8000278 <__aeabi_dsub>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	e7da      	b.n	800a362 <__kernel_cos+0xea>
 800a3ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a3e8 <__kernel_cos+0x170>
 800a3b0:	e7db      	b.n	800a36a <__kernel_cos+0xf2>
 800a3b2:	bf00      	nop
 800a3b4:	f3af 8000 	nop.w
 800a3b8:	be8838d4 	.word	0xbe8838d4
 800a3bc:	bda8fae9 	.word	0xbda8fae9
 800a3c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a3c4:	3e21ee9e 	.word	0x3e21ee9e
 800a3c8:	809c52ad 	.word	0x809c52ad
 800a3cc:	3e927e4f 	.word	0x3e927e4f
 800a3d0:	19cb1590 	.word	0x19cb1590
 800a3d4:	3efa01a0 	.word	0x3efa01a0
 800a3d8:	16c15177 	.word	0x16c15177
 800a3dc:	3f56c16c 	.word	0x3f56c16c
 800a3e0:	5555554c 	.word	0x5555554c
 800a3e4:	3fa55555 	.word	0x3fa55555
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	3ff00000 	.word	0x3ff00000
 800a3f0:	3fe00000 	.word	0x3fe00000
 800a3f4:	3fd33332 	.word	0x3fd33332
 800a3f8:	3ff00000 	.word	0x3ff00000
 800a3fc:	3fe90000 	.word	0x3fe90000
 800a400:	3fd20000 	.word	0x3fd20000
 800a404:	00000000 	.word	0x00000000

0800a408 <__kernel_sin>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	ec55 4b10 	vmov	r4, r5, d0
 800a410:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a414:	b085      	sub	sp, #20
 800a416:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a41a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a41e:	4680      	mov	r8, r0
 800a420:	d205      	bcs.n	800a42e <__kernel_sin+0x26>
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	f7f6 fb79 	bl	8000b1c <__aeabi_d2iz>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d052      	beq.n	800a4d4 <__kernel_sin+0xcc>
 800a42e:	4622      	mov	r2, r4
 800a430:	462b      	mov	r3, r5
 800a432:	4620      	mov	r0, r4
 800a434:	4629      	mov	r1, r5
 800a436:	f7f6 f8d7 	bl	80005e8 <__aeabi_dmul>
 800a43a:	4682      	mov	sl, r0
 800a43c:	468b      	mov	fp, r1
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4620      	mov	r0, r4
 800a444:	4629      	mov	r1, r5
 800a446:	f7f6 f8cf 	bl	80005e8 <__aeabi_dmul>
 800a44a:	a342      	add	r3, pc, #264	@ (adr r3, 800a554 <__kernel_sin+0x14c>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	e9cd 0100 	strd	r0, r1, [sp]
 800a454:	4650      	mov	r0, sl
 800a456:	4659      	mov	r1, fp
 800a458:	f7f6 f8c6 	bl	80005e8 <__aeabi_dmul>
 800a45c:	a33f      	add	r3, pc, #252	@ (adr r3, 800a55c <__kernel_sin+0x154>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f7f5 ff09 	bl	8000278 <__aeabi_dsub>
 800a466:	4652      	mov	r2, sl
 800a468:	465b      	mov	r3, fp
 800a46a:	f7f6 f8bd 	bl	80005e8 <__aeabi_dmul>
 800a46e:	a33d      	add	r3, pc, #244	@ (adr r3, 800a564 <__kernel_sin+0x15c>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f7f5 ff02 	bl	800027c <__adddf3>
 800a478:	4652      	mov	r2, sl
 800a47a:	465b      	mov	r3, fp
 800a47c:	f7f6 f8b4 	bl	80005e8 <__aeabi_dmul>
 800a480:	a33a      	add	r3, pc, #232	@ (adr r3, 800a56c <__kernel_sin+0x164>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f5 fef7 	bl	8000278 <__aeabi_dsub>
 800a48a:	4652      	mov	r2, sl
 800a48c:	465b      	mov	r3, fp
 800a48e:	f7f6 f8ab 	bl	80005e8 <__aeabi_dmul>
 800a492:	a338      	add	r3, pc, #224	@ (adr r3, 800a574 <__kernel_sin+0x16c>)
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f5 fef0 	bl	800027c <__adddf3>
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	f1b8 0f00 	cmp.w	r8, #0
 800a4a4:	d11b      	bne.n	800a4de <__kernel_sin+0xd6>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	4650      	mov	r0, sl
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	f7f6 f89b 	bl	80005e8 <__aeabi_dmul>
 800a4b2:	a325      	add	r3, pc, #148	@ (adr r3, 800a548 <__kernel_sin+0x140>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f7f5 fede 	bl	8000278 <__aeabi_dsub>
 800a4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4c0:	f7f6 f892 	bl	80005e8 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7f5 fed6 	bl	800027c <__adddf3>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	ec45 4b10 	vmov	d0, r4, r5
 800a4d8:	b005      	add	sp, #20
 800a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a550 <__kernel_sin+0x148>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f7f6 f87f 	bl	80005e8 <__aeabi_dmul>
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	4689      	mov	r9, r1
 800a4f0:	463b      	mov	r3, r7
 800a4f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4f6:	f7f6 f877 	bl	80005e8 <__aeabi_dmul>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	4640      	mov	r0, r8
 800a500:	4649      	mov	r1, r9
 800a502:	f7f5 feb9 	bl	8000278 <__aeabi_dsub>
 800a506:	4652      	mov	r2, sl
 800a508:	465b      	mov	r3, fp
 800a50a:	f7f6 f86d 	bl	80005e8 <__aeabi_dmul>
 800a50e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a512:	f7f5 feb1 	bl	8000278 <__aeabi_dsub>
 800a516:	a30c      	add	r3, pc, #48	@ (adr r3, 800a548 <__kernel_sin+0x140>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	4606      	mov	r6, r0
 800a51e:	460f      	mov	r7, r1
 800a520:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a524:	f7f6 f860 	bl	80005e8 <__aeabi_dmul>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f5 fea4 	bl	800027c <__adddf3>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4620      	mov	r0, r4
 800a53a:	4629      	mov	r1, r5
 800a53c:	f7f5 fe9c 	bl	8000278 <__aeabi_dsub>
 800a540:	e7c6      	b.n	800a4d0 <__kernel_sin+0xc8>
 800a542:	bf00      	nop
 800a544:	f3af 8000 	nop.w
 800a548:	55555549 	.word	0x55555549
 800a54c:	3fc55555 	.word	0x3fc55555
 800a550:	3fe00000 	.word	0x3fe00000
 800a554:	5acfd57c 	.word	0x5acfd57c
 800a558:	3de5d93a 	.word	0x3de5d93a
 800a55c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a560:	3e5ae5e6 	.word	0x3e5ae5e6
 800a564:	57b1fe7d 	.word	0x57b1fe7d
 800a568:	3ec71de3 	.word	0x3ec71de3
 800a56c:	19c161d5 	.word	0x19c161d5
 800a570:	3f2a01a0 	.word	0x3f2a01a0
 800a574:	1110f8a6 	.word	0x1110f8a6
 800a578:	3f811111 	.word	0x3f811111
 800a57c:	00000000 	.word	0x00000000

0800a580 <__ieee754_rem_pio2>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	ec57 6b10 	vmov	r6, r7, d0
 800a588:	4bc5      	ldr	r3, [pc, #788]	@ (800a8a0 <__ieee754_rem_pio2+0x320>)
 800a58a:	b08d      	sub	sp, #52	@ 0x34
 800a58c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a590:	4598      	cmp	r8, r3
 800a592:	4604      	mov	r4, r0
 800a594:	9704      	str	r7, [sp, #16]
 800a596:	d807      	bhi.n	800a5a8 <__ieee754_rem_pio2+0x28>
 800a598:	2200      	movs	r2, #0
 800a59a:	2300      	movs	r3, #0
 800a59c:	ed80 0b00 	vstr	d0, [r0]
 800a5a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a5a4:	2500      	movs	r5, #0
 800a5a6:	e028      	b.n	800a5fa <__ieee754_rem_pio2+0x7a>
 800a5a8:	4bbe      	ldr	r3, [pc, #760]	@ (800a8a4 <__ieee754_rem_pio2+0x324>)
 800a5aa:	4598      	cmp	r8, r3
 800a5ac:	d878      	bhi.n	800a6a0 <__ieee754_rem_pio2+0x120>
 800a5ae:	9b04      	ldr	r3, [sp, #16]
 800a5b0:	4dbd      	ldr	r5, [pc, #756]	@ (800a8a8 <__ieee754_rem_pio2+0x328>)
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a868 <__ieee754_rem_pio2+0x2e8>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	4639      	mov	r1, r7
 800a5be:	dd38      	ble.n	800a632 <__ieee754_rem_pio2+0xb2>
 800a5c0:	f7f5 fe5a 	bl	8000278 <__aeabi_dsub>
 800a5c4:	45a8      	cmp	r8, r5
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	d01a      	beq.n	800a602 <__ieee754_rem_pio2+0x82>
 800a5cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a870 <__ieee754_rem_pio2+0x2f0>)
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	f7f5 fe51 	bl	8000278 <__aeabi_dsub>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4680      	mov	r8, r0
 800a5dc:	4689      	mov	r9, r1
 800a5de:	4630      	mov	r0, r6
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	f7f5 fe49 	bl	8000278 <__aeabi_dsub>
 800a5e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a870 <__ieee754_rem_pio2+0x2f0>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f5 fe44 	bl	8000278 <__aeabi_dsub>
 800a5f0:	e9c4 8900 	strd	r8, r9, [r4]
 800a5f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5f8:	2501      	movs	r5, #1
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	b00d      	add	sp, #52	@ 0x34
 800a5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a602:	a39d      	add	r3, pc, #628	@ (adr r3, 800a878 <__ieee754_rem_pio2+0x2f8>)
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	f7f5 fe36 	bl	8000278 <__aeabi_dsub>
 800a60c:	a39c      	add	r3, pc, #624	@ (adr r3, 800a880 <__ieee754_rem_pio2+0x300>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	4606      	mov	r6, r0
 800a614:	460f      	mov	r7, r1
 800a616:	f7f5 fe2f 	bl	8000278 <__aeabi_dsub>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4680      	mov	r8, r0
 800a620:	4689      	mov	r9, r1
 800a622:	4630      	mov	r0, r6
 800a624:	4639      	mov	r1, r7
 800a626:	f7f5 fe27 	bl	8000278 <__aeabi_dsub>
 800a62a:	a395      	add	r3, pc, #596	@ (adr r3, 800a880 <__ieee754_rem_pio2+0x300>)
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	e7dc      	b.n	800a5ec <__ieee754_rem_pio2+0x6c>
 800a632:	f7f5 fe23 	bl	800027c <__adddf3>
 800a636:	45a8      	cmp	r8, r5
 800a638:	4606      	mov	r6, r0
 800a63a:	460f      	mov	r7, r1
 800a63c:	d018      	beq.n	800a670 <__ieee754_rem_pio2+0xf0>
 800a63e:	a38c      	add	r3, pc, #560	@ (adr r3, 800a870 <__ieee754_rem_pio2+0x2f0>)
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	f7f5 fe1a 	bl	800027c <__adddf3>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4680      	mov	r8, r0
 800a64e:	4689      	mov	r9, r1
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f5 fe10 	bl	8000278 <__aeabi_dsub>
 800a658:	a385      	add	r3, pc, #532	@ (adr r3, 800a870 <__ieee754_rem_pio2+0x2f0>)
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	f7f5 fe0d 	bl	800027c <__adddf3>
 800a662:	f04f 35ff 	mov.w	r5, #4294967295
 800a666:	e9c4 8900 	strd	r8, r9, [r4]
 800a66a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a66e:	e7c4      	b.n	800a5fa <__ieee754_rem_pio2+0x7a>
 800a670:	a381      	add	r3, pc, #516	@ (adr r3, 800a878 <__ieee754_rem_pio2+0x2f8>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f7f5 fe01 	bl	800027c <__adddf3>
 800a67a:	a381      	add	r3, pc, #516	@ (adr r3, 800a880 <__ieee754_rem_pio2+0x300>)
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	4606      	mov	r6, r0
 800a682:	460f      	mov	r7, r1
 800a684:	f7f5 fdfa 	bl	800027c <__adddf3>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4680      	mov	r8, r0
 800a68e:	4689      	mov	r9, r1
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	f7f5 fdf0 	bl	8000278 <__aeabi_dsub>
 800a698:	a379      	add	r3, pc, #484	@ (adr r3, 800a880 <__ieee754_rem_pio2+0x300>)
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	e7de      	b.n	800a65e <__ieee754_rem_pio2+0xde>
 800a6a0:	4b82      	ldr	r3, [pc, #520]	@ (800a8ac <__ieee754_rem_pio2+0x32c>)
 800a6a2:	4598      	cmp	r8, r3
 800a6a4:	f200 80d1 	bhi.w	800a84a <__ieee754_rem_pio2+0x2ca>
 800a6a8:	f000 f966 	bl	800a978 <fabs>
 800a6ac:	ec57 6b10 	vmov	r6, r7, d0
 800a6b0:	a375      	add	r3, pc, #468	@ (adr r3, 800a888 <__ieee754_rem_pio2+0x308>)
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	f7f5 ff95 	bl	80005e8 <__aeabi_dmul>
 800a6be:	4b7c      	ldr	r3, [pc, #496]	@ (800a8b0 <__ieee754_rem_pio2+0x330>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f7f5 fddb 	bl	800027c <__adddf3>
 800a6c6:	f7f6 fa29 	bl	8000b1c <__aeabi_d2iz>
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	f7f5 ff22 	bl	8000514 <__aeabi_i2d>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6d8:	a363      	add	r3, pc, #396	@ (adr r3, 800a868 <__ieee754_rem_pio2+0x2e8>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 ff83 	bl	80005e8 <__aeabi_dmul>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	f7f5 fdc5 	bl	8000278 <__aeabi_dsub>
 800a6ee:	a360      	add	r3, pc, #384	@ (adr r3, 800a870 <__ieee754_rem_pio2+0x2f0>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	4682      	mov	sl, r0
 800a6f6:	468b      	mov	fp, r1
 800a6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fc:	f7f5 ff74 	bl	80005e8 <__aeabi_dmul>
 800a700:	2d1f      	cmp	r5, #31
 800a702:	4606      	mov	r6, r0
 800a704:	460f      	mov	r7, r1
 800a706:	dc0c      	bgt.n	800a722 <__ieee754_rem_pio2+0x1a2>
 800a708:	4b6a      	ldr	r3, [pc, #424]	@ (800a8b4 <__ieee754_rem_pio2+0x334>)
 800a70a:	1e6a      	subs	r2, r5, #1
 800a70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a710:	4543      	cmp	r3, r8
 800a712:	d006      	beq.n	800a722 <__ieee754_rem_pio2+0x1a2>
 800a714:	4632      	mov	r2, r6
 800a716:	463b      	mov	r3, r7
 800a718:	4650      	mov	r0, sl
 800a71a:	4659      	mov	r1, fp
 800a71c:	f7f5 fdac 	bl	8000278 <__aeabi_dsub>
 800a720:	e00e      	b.n	800a740 <__ieee754_rem_pio2+0x1c0>
 800a722:	463b      	mov	r3, r7
 800a724:	4632      	mov	r2, r6
 800a726:	4650      	mov	r0, sl
 800a728:	4659      	mov	r1, fp
 800a72a:	f7f5 fda5 	bl	8000278 <__aeabi_dsub>
 800a72e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a732:	9305      	str	r3, [sp, #20]
 800a734:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a738:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a73c:	2b10      	cmp	r3, #16
 800a73e:	dc02      	bgt.n	800a746 <__ieee754_rem_pio2+0x1c6>
 800a740:	e9c4 0100 	strd	r0, r1, [r4]
 800a744:	e039      	b.n	800a7ba <__ieee754_rem_pio2+0x23a>
 800a746:	a34c      	add	r3, pc, #304	@ (adr r3, 800a878 <__ieee754_rem_pio2+0x2f8>)
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a750:	f7f5 ff4a 	bl	80005e8 <__aeabi_dmul>
 800a754:	4606      	mov	r6, r0
 800a756:	460f      	mov	r7, r1
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4650      	mov	r0, sl
 800a75e:	4659      	mov	r1, fp
 800a760:	f7f5 fd8a 	bl	8000278 <__aeabi_dsub>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4680      	mov	r8, r0
 800a76a:	4689      	mov	r9, r1
 800a76c:	4650      	mov	r0, sl
 800a76e:	4659      	mov	r1, fp
 800a770:	f7f5 fd82 	bl	8000278 <__aeabi_dsub>
 800a774:	4632      	mov	r2, r6
 800a776:	463b      	mov	r3, r7
 800a778:	f7f5 fd7e 	bl	8000278 <__aeabi_dsub>
 800a77c:	a340      	add	r3, pc, #256	@ (adr r3, 800a880 <__ieee754_rem_pio2+0x300>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	4606      	mov	r6, r0
 800a784:	460f      	mov	r7, r1
 800a786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78a:	f7f5 ff2d 	bl	80005e8 <__aeabi_dmul>
 800a78e:	4632      	mov	r2, r6
 800a790:	463b      	mov	r3, r7
 800a792:	f7f5 fd71 	bl	8000278 <__aeabi_dsub>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	4606      	mov	r6, r0
 800a79c:	460f      	mov	r7, r1
 800a79e:	4640      	mov	r0, r8
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	f7f5 fd69 	bl	8000278 <__aeabi_dsub>
 800a7a6:	9a05      	ldr	r2, [sp, #20]
 800a7a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	2b31      	cmp	r3, #49	@ 0x31
 800a7b0:	dc20      	bgt.n	800a7f4 <__ieee754_rem_pio2+0x274>
 800a7b2:	e9c4 0100 	strd	r0, r1, [r4]
 800a7b6:	46c2      	mov	sl, r8
 800a7b8:	46cb      	mov	fp, r9
 800a7ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a7be:	4650      	mov	r0, sl
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	f7f5 fd57 	bl	8000278 <__aeabi_dsub>
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	f7f5 fd53 	bl	8000278 <__aeabi_dsub>
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7da:	f6bf af0e 	bge.w	800a5fa <__ieee754_rem_pio2+0x7a>
 800a7de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a7e2:	6063      	str	r3, [r4, #4]
 800a7e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7e8:	f8c4 8000 	str.w	r8, [r4]
 800a7ec:	60a0      	str	r0, [r4, #8]
 800a7ee:	60e3      	str	r3, [r4, #12]
 800a7f0:	426d      	negs	r5, r5
 800a7f2:	e702      	b.n	800a5fa <__ieee754_rem_pio2+0x7a>
 800a7f4:	a326      	add	r3, pc, #152	@ (adr r3, 800a890 <__ieee754_rem_pio2+0x310>)
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7fe:	f7f5 fef3 	bl	80005e8 <__aeabi_dmul>
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	4640      	mov	r0, r8
 800a80c:	4649      	mov	r1, r9
 800a80e:	f7f5 fd33 	bl	8000278 <__aeabi_dsub>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4682      	mov	sl, r0
 800a818:	468b      	mov	fp, r1
 800a81a:	4640      	mov	r0, r8
 800a81c:	4649      	mov	r1, r9
 800a81e:	f7f5 fd2b 	bl	8000278 <__aeabi_dsub>
 800a822:	4632      	mov	r2, r6
 800a824:	463b      	mov	r3, r7
 800a826:	f7f5 fd27 	bl	8000278 <__aeabi_dsub>
 800a82a:	a31b      	add	r3, pc, #108	@ (adr r3, 800a898 <__ieee754_rem_pio2+0x318>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	4606      	mov	r6, r0
 800a832:	460f      	mov	r7, r1
 800a834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a838:	f7f5 fed6 	bl	80005e8 <__aeabi_dmul>
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	f7f5 fd1a 	bl	8000278 <__aeabi_dsub>
 800a844:	4606      	mov	r6, r0
 800a846:	460f      	mov	r7, r1
 800a848:	e764      	b.n	800a714 <__ieee754_rem_pio2+0x194>
 800a84a:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b8 <__ieee754_rem_pio2+0x338>)
 800a84c:	4598      	cmp	r8, r3
 800a84e:	d935      	bls.n	800a8bc <__ieee754_rem_pio2+0x33c>
 800a850:	4632      	mov	r2, r6
 800a852:	463b      	mov	r3, r7
 800a854:	4630      	mov	r0, r6
 800a856:	4639      	mov	r1, r7
 800a858:	f7f5 fd0e 	bl	8000278 <__aeabi_dsub>
 800a85c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a860:	e9c4 0100 	strd	r0, r1, [r4]
 800a864:	e69e      	b.n	800a5a4 <__ieee754_rem_pio2+0x24>
 800a866:	bf00      	nop
 800a868:	54400000 	.word	0x54400000
 800a86c:	3ff921fb 	.word	0x3ff921fb
 800a870:	1a626331 	.word	0x1a626331
 800a874:	3dd0b461 	.word	0x3dd0b461
 800a878:	1a600000 	.word	0x1a600000
 800a87c:	3dd0b461 	.word	0x3dd0b461
 800a880:	2e037073 	.word	0x2e037073
 800a884:	3ba3198a 	.word	0x3ba3198a
 800a888:	6dc9c883 	.word	0x6dc9c883
 800a88c:	3fe45f30 	.word	0x3fe45f30
 800a890:	2e000000 	.word	0x2e000000
 800a894:	3ba3198a 	.word	0x3ba3198a
 800a898:	252049c1 	.word	0x252049c1
 800a89c:	397b839a 	.word	0x397b839a
 800a8a0:	3fe921fb 	.word	0x3fe921fb
 800a8a4:	4002d97b 	.word	0x4002d97b
 800a8a8:	3ff921fb 	.word	0x3ff921fb
 800a8ac:	413921fb 	.word	0x413921fb
 800a8b0:	3fe00000 	.word	0x3fe00000
 800a8b4:	0800dcfc 	.word	0x0800dcfc
 800a8b8:	7fefffff 	.word	0x7fefffff
 800a8bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a8c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a8c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	460f      	mov	r7, r1
 800a8cc:	f7f6 f926 	bl	8000b1c <__aeabi_d2iz>
 800a8d0:	f7f5 fe20 	bl	8000514 <__aeabi_i2d>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4630      	mov	r0, r6
 800a8da:	4639      	mov	r1, r7
 800a8dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8e0:	f7f5 fcca 	bl	8000278 <__aeabi_dsub>
 800a8e4:	4b22      	ldr	r3, [pc, #136]	@ (800a970 <__ieee754_rem_pio2+0x3f0>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f7f5 fe7e 	bl	80005e8 <__aeabi_dmul>
 800a8ec:	460f      	mov	r7, r1
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	f7f6 f914 	bl	8000b1c <__aeabi_d2iz>
 800a8f4:	f7f5 fe0e 	bl	8000514 <__aeabi_i2d>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	4639      	mov	r1, r7
 800a900:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a904:	f7f5 fcb8 	bl	8000278 <__aeabi_dsub>
 800a908:	4b19      	ldr	r3, [pc, #100]	@ (800a970 <__ieee754_rem_pio2+0x3f0>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	f7f5 fe6c 	bl	80005e8 <__aeabi_dmul>
 800a910:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a914:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a918:	f04f 0803 	mov.w	r8, #3
 800a91c:	2600      	movs	r6, #0
 800a91e:	2700      	movs	r7, #0
 800a920:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a924:	4632      	mov	r2, r6
 800a926:	463b      	mov	r3, r7
 800a928:	46c2      	mov	sl, r8
 800a92a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a92e:	f7f6 f8c3 	bl	8000ab8 <__aeabi_dcmpeq>
 800a932:	2800      	cmp	r0, #0
 800a934:	d1f4      	bne.n	800a920 <__ieee754_rem_pio2+0x3a0>
 800a936:	4b0f      	ldr	r3, [pc, #60]	@ (800a974 <__ieee754_rem_pio2+0x3f4>)
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	2302      	movs	r3, #2
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	462a      	mov	r2, r5
 800a940:	4653      	mov	r3, sl
 800a942:	4621      	mov	r1, r4
 800a944:	a806      	add	r0, sp, #24
 800a946:	f000 f81f 	bl	800a988 <__kernel_rem_pio2>
 800a94a:	9b04      	ldr	r3, [sp, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	4605      	mov	r5, r0
 800a950:	f6bf ae53 	bge.w	800a5fa <__ieee754_rem_pio2+0x7a>
 800a954:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a958:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a95c:	e9c4 2300 	strd	r2, r3, [r4]
 800a960:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a968:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a96c:	e740      	b.n	800a7f0 <__ieee754_rem_pio2+0x270>
 800a96e:	bf00      	nop
 800a970:	41700000 	.word	0x41700000
 800a974:	0800dd7c 	.word	0x0800dd7c

0800a978 <fabs>:
 800a978:	ec51 0b10 	vmov	r0, r1, d0
 800a97c:	4602      	mov	r2, r0
 800a97e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a982:	ec43 2b10 	vmov	d0, r2, r3
 800a986:	4770      	bx	lr

0800a988 <__kernel_rem_pio2>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	ed2d 8b02 	vpush	{d8}
 800a990:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a994:	f112 0f14 	cmn.w	r2, #20
 800a998:	9306      	str	r3, [sp, #24]
 800a99a:	9104      	str	r1, [sp, #16]
 800a99c:	4bc2      	ldr	r3, [pc, #776]	@ (800aca8 <__kernel_rem_pio2+0x320>)
 800a99e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a9a0:	9008      	str	r0, [sp, #32]
 800a9a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	9b06      	ldr	r3, [sp, #24]
 800a9aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9ae:	bfa8      	it	ge
 800a9b0:	1ed4      	subge	r4, r2, #3
 800a9b2:	9305      	str	r3, [sp, #20]
 800a9b4:	bfb2      	itee	lt
 800a9b6:	2400      	movlt	r4, #0
 800a9b8:	2318      	movge	r3, #24
 800a9ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800a9be:	f06f 0317 	mvn.w	r3, #23
 800a9c2:	fb04 3303 	mla	r3, r4, r3, r3
 800a9c6:	eb03 0b02 	add.w	fp, r3, r2
 800a9ca:	9b00      	ldr	r3, [sp, #0]
 800a9cc:	9a05      	ldr	r2, [sp, #20]
 800a9ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800ac98 <__kernel_rem_pio2+0x310>
 800a9d2:	eb03 0802 	add.w	r8, r3, r2
 800a9d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a9d8:	1aa7      	subs	r7, r4, r2
 800a9da:	ae20      	add	r6, sp, #128	@ 0x80
 800a9dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a9e0:	2500      	movs	r5, #0
 800a9e2:	4545      	cmp	r5, r8
 800a9e4:	dd12      	ble.n	800aa0c <__kernel_rem_pio2+0x84>
 800a9e6:	9b06      	ldr	r3, [sp, #24]
 800a9e8:	aa20      	add	r2, sp, #128	@ 0x80
 800a9ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a9ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a9f2:	2700      	movs	r7, #0
 800a9f4:	9b00      	ldr	r3, [sp, #0]
 800a9f6:	429f      	cmp	r7, r3
 800a9f8:	dc2e      	bgt.n	800aa58 <__kernel_rem_pio2+0xd0>
 800a9fa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800ac98 <__kernel_rem_pio2+0x310>
 800a9fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa02:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa06:	46a8      	mov	r8, r5
 800aa08:	2600      	movs	r6, #0
 800aa0a:	e01b      	b.n	800aa44 <__kernel_rem_pio2+0xbc>
 800aa0c:	42ef      	cmn	r7, r5
 800aa0e:	d407      	bmi.n	800aa20 <__kernel_rem_pio2+0x98>
 800aa10:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aa14:	f7f5 fd7e 	bl	8000514 <__aeabi_i2d>
 800aa18:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	e7e0      	b.n	800a9e2 <__kernel_rem_pio2+0x5a>
 800aa20:	ec51 0b18 	vmov	r0, r1, d8
 800aa24:	e7f8      	b.n	800aa18 <__kernel_rem_pio2+0x90>
 800aa26:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800aa2a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aa2e:	f7f5 fddb 	bl	80005e8 <__aeabi_dmul>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa3a:	f7f5 fc1f 	bl	800027c <__adddf3>
 800aa3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa42:	3601      	adds	r6, #1
 800aa44:	9b05      	ldr	r3, [sp, #20]
 800aa46:	429e      	cmp	r6, r3
 800aa48:	dded      	ble.n	800aa26 <__kernel_rem_pio2+0x9e>
 800aa4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa4e:	3701      	adds	r7, #1
 800aa50:	ecaa 7b02 	vstmia	sl!, {d7}
 800aa54:	3508      	adds	r5, #8
 800aa56:	e7cd      	b.n	800a9f4 <__kernel_rem_pio2+0x6c>
 800aa58:	9b00      	ldr	r3, [sp, #0]
 800aa5a:	f8dd 8000 	ldr.w	r8, [sp]
 800aa5e:	aa0c      	add	r2, sp, #48	@ 0x30
 800aa60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa64:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800aa68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800aa72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa74:	ab98      	add	r3, sp, #608	@ 0x260
 800aa76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa7a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800aa7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa82:	ac0c      	add	r4, sp, #48	@ 0x30
 800aa84:	ab70      	add	r3, sp, #448	@ 0x1c0
 800aa86:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800aa8a:	46a1      	mov	r9, r4
 800aa8c:	46c2      	mov	sl, r8
 800aa8e:	f1ba 0f00 	cmp.w	sl, #0
 800aa92:	dc77      	bgt.n	800ab84 <__kernel_rem_pio2+0x1fc>
 800aa94:	4658      	mov	r0, fp
 800aa96:	ed9d 0b02 	vldr	d0, [sp, #8]
 800aa9a:	f000 fac5 	bl	800b028 <scalbn>
 800aa9e:	ec57 6b10 	vmov	r6, r7, d0
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	4639      	mov	r1, r7
 800aaac:	f7f5 fd9c 	bl	80005e8 <__aeabi_dmul>
 800aab0:	ec41 0b10 	vmov	d0, r0, r1
 800aab4:	f000 fb34 	bl	800b120 <floor>
 800aab8:	4b7c      	ldr	r3, [pc, #496]	@ (800acac <__kernel_rem_pio2+0x324>)
 800aaba:	ec51 0b10 	vmov	r0, r1, d0
 800aabe:	2200      	movs	r2, #0
 800aac0:	f7f5 fd92 	bl	80005e8 <__aeabi_dmul>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f5 fbd4 	bl	8000278 <__aeabi_dsub>
 800aad0:	460f      	mov	r7, r1
 800aad2:	4606      	mov	r6, r0
 800aad4:	f7f6 f822 	bl	8000b1c <__aeabi_d2iz>
 800aad8:	9002      	str	r0, [sp, #8]
 800aada:	f7f5 fd1b 	bl	8000514 <__aeabi_i2d>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4630      	mov	r0, r6
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f5 fbc7 	bl	8000278 <__aeabi_dsub>
 800aaea:	f1bb 0f00 	cmp.w	fp, #0
 800aaee:	4606      	mov	r6, r0
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	dd6c      	ble.n	800abce <__kernel_rem_pio2+0x246>
 800aaf4:	f108 31ff 	add.w	r1, r8, #4294967295
 800aaf8:	ab0c      	add	r3, sp, #48	@ 0x30
 800aafa:	9d02      	ldr	r5, [sp, #8]
 800aafc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab00:	f1cb 0018 	rsb	r0, fp, #24
 800ab04:	fa43 f200 	asr.w	r2, r3, r0
 800ab08:	4415      	add	r5, r2
 800ab0a:	4082      	lsls	r2, r0
 800ab0c:	1a9b      	subs	r3, r3, r2
 800ab0e:	aa0c      	add	r2, sp, #48	@ 0x30
 800ab10:	9502      	str	r5, [sp, #8]
 800ab12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ab16:	f1cb 0217 	rsb	r2, fp, #23
 800ab1a:	fa43 f902 	asr.w	r9, r3, r2
 800ab1e:	f1b9 0f00 	cmp.w	r9, #0
 800ab22:	dd64      	ble.n	800abee <__kernel_rem_pio2+0x266>
 800ab24:	9b02      	ldr	r3, [sp, #8]
 800ab26:	2200      	movs	r2, #0
 800ab28:	3301      	adds	r3, #1
 800ab2a:	9302      	str	r3, [sp, #8]
 800ab2c:	4615      	mov	r5, r2
 800ab2e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ab32:	4590      	cmp	r8, r2
 800ab34:	f300 80a1 	bgt.w	800ac7a <__kernel_rem_pio2+0x2f2>
 800ab38:	f1bb 0f00 	cmp.w	fp, #0
 800ab3c:	dd07      	ble.n	800ab4e <__kernel_rem_pio2+0x1c6>
 800ab3e:	f1bb 0f01 	cmp.w	fp, #1
 800ab42:	f000 80c1 	beq.w	800acc8 <__kernel_rem_pio2+0x340>
 800ab46:	f1bb 0f02 	cmp.w	fp, #2
 800ab4a:	f000 80c8 	beq.w	800acde <__kernel_rem_pio2+0x356>
 800ab4e:	f1b9 0f02 	cmp.w	r9, #2
 800ab52:	d14c      	bne.n	800abee <__kernel_rem_pio2+0x266>
 800ab54:	4632      	mov	r2, r6
 800ab56:	463b      	mov	r3, r7
 800ab58:	4955      	ldr	r1, [pc, #340]	@ (800acb0 <__kernel_rem_pio2+0x328>)
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	f7f5 fb8c 	bl	8000278 <__aeabi_dsub>
 800ab60:	4606      	mov	r6, r0
 800ab62:	460f      	mov	r7, r1
 800ab64:	2d00      	cmp	r5, #0
 800ab66:	d042      	beq.n	800abee <__kernel_rem_pio2+0x266>
 800ab68:	4658      	mov	r0, fp
 800ab6a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800aca0 <__kernel_rem_pio2+0x318>
 800ab6e:	f000 fa5b 	bl	800b028 <scalbn>
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	ec53 2b10 	vmov	r2, r3, d0
 800ab7a:	f7f5 fb7d 	bl	8000278 <__aeabi_dsub>
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	e034      	b.n	800abee <__kernel_rem_pio2+0x266>
 800ab84:	4b4b      	ldr	r3, [pc, #300]	@ (800acb4 <__kernel_rem_pio2+0x32c>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab8c:	f7f5 fd2c 	bl	80005e8 <__aeabi_dmul>
 800ab90:	f7f5 ffc4 	bl	8000b1c <__aeabi_d2iz>
 800ab94:	f7f5 fcbe 	bl	8000514 <__aeabi_i2d>
 800ab98:	4b47      	ldr	r3, [pc, #284]	@ (800acb8 <__kernel_rem_pio2+0x330>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	4606      	mov	r6, r0
 800ab9e:	460f      	mov	r7, r1
 800aba0:	f7f5 fd22 	bl	80005e8 <__aeabi_dmul>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abac:	f7f5 fb64 	bl	8000278 <__aeabi_dsub>
 800abb0:	f7f5 ffb4 	bl	8000b1c <__aeabi_d2iz>
 800abb4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800abb8:	f849 0b04 	str.w	r0, [r9], #4
 800abbc:	4639      	mov	r1, r7
 800abbe:	4630      	mov	r0, r6
 800abc0:	f7f5 fb5c 	bl	800027c <__adddf3>
 800abc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abcc:	e75f      	b.n	800aa8e <__kernel_rem_pio2+0x106>
 800abce:	d107      	bne.n	800abe0 <__kernel_rem_pio2+0x258>
 800abd0:	f108 33ff 	add.w	r3, r8, #4294967295
 800abd4:	aa0c      	add	r2, sp, #48	@ 0x30
 800abd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abda:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800abde:	e79e      	b.n	800ab1e <__kernel_rem_pio2+0x196>
 800abe0:	4b36      	ldr	r3, [pc, #216]	@ (800acbc <__kernel_rem_pio2+0x334>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	f7f5 ff86 	bl	8000af4 <__aeabi_dcmpge>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d143      	bne.n	800ac74 <__kernel_rem_pio2+0x2ec>
 800abec:	4681      	mov	r9, r0
 800abee:	2200      	movs	r2, #0
 800abf0:	2300      	movs	r3, #0
 800abf2:	4630      	mov	r0, r6
 800abf4:	4639      	mov	r1, r7
 800abf6:	f7f5 ff5f 	bl	8000ab8 <__aeabi_dcmpeq>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	f000 80c1 	beq.w	800ad82 <__kernel_rem_pio2+0x3fa>
 800ac00:	f108 33ff 	add.w	r3, r8, #4294967295
 800ac04:	2200      	movs	r2, #0
 800ac06:	9900      	ldr	r1, [sp, #0]
 800ac08:	428b      	cmp	r3, r1
 800ac0a:	da70      	bge.n	800acee <__kernel_rem_pio2+0x366>
 800ac0c:	2a00      	cmp	r2, #0
 800ac0e:	f000 808b 	beq.w	800ad28 <__kernel_rem_pio2+0x3a0>
 800ac12:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac16:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac18:	f1ab 0b18 	sub.w	fp, fp, #24
 800ac1c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0f6      	beq.n	800ac12 <__kernel_rem_pio2+0x28a>
 800ac24:	4658      	mov	r0, fp
 800ac26:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800aca0 <__kernel_rem_pio2+0x318>
 800ac2a:	f000 f9fd 	bl	800b028 <scalbn>
 800ac2e:	f108 0301 	add.w	r3, r8, #1
 800ac32:	00da      	lsls	r2, r3, #3
 800ac34:	9205      	str	r2, [sp, #20]
 800ac36:	ec55 4b10 	vmov	r4, r5, d0
 800ac3a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ac3c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800acb4 <__kernel_rem_pio2+0x32c>
 800ac40:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ac44:	4646      	mov	r6, r8
 800ac46:	f04f 0a00 	mov.w	sl, #0
 800ac4a:	2e00      	cmp	r6, #0
 800ac4c:	f280 80d1 	bge.w	800adf2 <__kernel_rem_pio2+0x46a>
 800ac50:	4644      	mov	r4, r8
 800ac52:	2c00      	cmp	r4, #0
 800ac54:	f2c0 80ff 	blt.w	800ae56 <__kernel_rem_pio2+0x4ce>
 800ac58:	4b19      	ldr	r3, [pc, #100]	@ (800acc0 <__kernel_rem_pio2+0x338>)
 800ac5a:	461f      	mov	r7, r3
 800ac5c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ac5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac62:	9306      	str	r3, [sp, #24]
 800ac64:	f04f 0a00 	mov.w	sl, #0
 800ac68:	f04f 0b00 	mov.w	fp, #0
 800ac6c:	2600      	movs	r6, #0
 800ac6e:	eba8 0504 	sub.w	r5, r8, r4
 800ac72:	e0e4      	b.n	800ae3e <__kernel_rem_pio2+0x4b6>
 800ac74:	f04f 0902 	mov.w	r9, #2
 800ac78:	e754      	b.n	800ab24 <__kernel_rem_pio2+0x19c>
 800ac7a:	f854 3b04 	ldr.w	r3, [r4], #4
 800ac7e:	bb0d      	cbnz	r5, 800acc4 <__kernel_rem_pio2+0x33c>
 800ac80:	b123      	cbz	r3, 800ac8c <__kernel_rem_pio2+0x304>
 800ac82:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ac86:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	3201      	adds	r2, #1
 800ac8e:	461d      	mov	r5, r3
 800ac90:	e74f      	b.n	800ab32 <__kernel_rem_pio2+0x1aa>
 800ac92:	bf00      	nop
 800ac94:	f3af 8000 	nop.w
	...
 800aca4:	3ff00000 	.word	0x3ff00000
 800aca8:	0800dec8 	.word	0x0800dec8
 800acac:	40200000 	.word	0x40200000
 800acb0:	3ff00000 	.word	0x3ff00000
 800acb4:	3e700000 	.word	0x3e700000
 800acb8:	41700000 	.word	0x41700000
 800acbc:	3fe00000 	.word	0x3fe00000
 800acc0:	0800de88 	.word	0x0800de88
 800acc4:	1acb      	subs	r3, r1, r3
 800acc6:	e7de      	b.n	800ac86 <__kernel_rem_pio2+0x2fe>
 800acc8:	f108 32ff 	add.w	r2, r8, #4294967295
 800accc:	ab0c      	add	r3, sp, #48	@ 0x30
 800acce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800acd6:	a90c      	add	r1, sp, #48	@ 0x30
 800acd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800acdc:	e737      	b.n	800ab4e <__kernel_rem_pio2+0x1c6>
 800acde:	f108 32ff 	add.w	r2, r8, #4294967295
 800ace2:	ab0c      	add	r3, sp, #48	@ 0x30
 800ace4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800acec:	e7f3      	b.n	800acd6 <__kernel_rem_pio2+0x34e>
 800acee:	a90c      	add	r1, sp, #48	@ 0x30
 800acf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	430a      	orrs	r2, r1
 800acf8:	e785      	b.n	800ac06 <__kernel_rem_pio2+0x27e>
 800acfa:	3401      	adds	r4, #1
 800acfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ad00:	2a00      	cmp	r2, #0
 800ad02:	d0fa      	beq.n	800acfa <__kernel_rem_pio2+0x372>
 800ad04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ad0a:	eb0d 0503 	add.w	r5, sp, r3
 800ad0e:	9b06      	ldr	r3, [sp, #24]
 800ad10:	aa20      	add	r2, sp, #128	@ 0x80
 800ad12:	4443      	add	r3, r8
 800ad14:	f108 0701 	add.w	r7, r8, #1
 800ad18:	3d98      	subs	r5, #152	@ 0x98
 800ad1a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ad1e:	4444      	add	r4, r8
 800ad20:	42bc      	cmp	r4, r7
 800ad22:	da04      	bge.n	800ad2e <__kernel_rem_pio2+0x3a6>
 800ad24:	46a0      	mov	r8, r4
 800ad26:	e6a2      	b.n	800aa6e <__kernel_rem_pio2+0xe6>
 800ad28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad2a:	2401      	movs	r4, #1
 800ad2c:	e7e6      	b.n	800acfc <__kernel_rem_pio2+0x374>
 800ad2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad30:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ad34:	f7f5 fbee 	bl	8000514 <__aeabi_i2d>
 800ad38:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800aff8 <__kernel_rem_pio2+0x670>
 800ad3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad48:	46b2      	mov	sl, r6
 800ad4a:	f04f 0800 	mov.w	r8, #0
 800ad4e:	9b05      	ldr	r3, [sp, #20]
 800ad50:	4598      	cmp	r8, r3
 800ad52:	dd05      	ble.n	800ad60 <__kernel_rem_pio2+0x3d8>
 800ad54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad58:	3701      	adds	r7, #1
 800ad5a:	eca5 7b02 	vstmia	r5!, {d7}
 800ad5e:	e7df      	b.n	800ad20 <__kernel_rem_pio2+0x398>
 800ad60:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ad64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ad68:	f7f5 fc3e 	bl	80005e8 <__aeabi_dmul>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad74:	f7f5 fa82 	bl	800027c <__adddf3>
 800ad78:	f108 0801 	add.w	r8, r8, #1
 800ad7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad80:	e7e5      	b.n	800ad4e <__kernel_rem_pio2+0x3c6>
 800ad82:	f1cb 0000 	rsb	r0, fp, #0
 800ad86:	ec47 6b10 	vmov	d0, r6, r7
 800ad8a:	f000 f94d 	bl	800b028 <scalbn>
 800ad8e:	ec55 4b10 	vmov	r4, r5, d0
 800ad92:	4b9b      	ldr	r3, [pc, #620]	@ (800b000 <__kernel_rem_pio2+0x678>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	4620      	mov	r0, r4
 800ad98:	4629      	mov	r1, r5
 800ad9a:	f7f5 feab 	bl	8000af4 <__aeabi_dcmpge>
 800ad9e:	b300      	cbz	r0, 800ade2 <__kernel_rem_pio2+0x45a>
 800ada0:	4b98      	ldr	r3, [pc, #608]	@ (800b004 <__kernel_rem_pio2+0x67c>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	4620      	mov	r0, r4
 800ada6:	4629      	mov	r1, r5
 800ada8:	f7f5 fc1e 	bl	80005e8 <__aeabi_dmul>
 800adac:	f7f5 feb6 	bl	8000b1c <__aeabi_d2iz>
 800adb0:	4606      	mov	r6, r0
 800adb2:	f7f5 fbaf 	bl	8000514 <__aeabi_i2d>
 800adb6:	4b92      	ldr	r3, [pc, #584]	@ (800b000 <__kernel_rem_pio2+0x678>)
 800adb8:	2200      	movs	r2, #0
 800adba:	f7f5 fc15 	bl	80005e8 <__aeabi_dmul>
 800adbe:	460b      	mov	r3, r1
 800adc0:	4602      	mov	r2, r0
 800adc2:	4629      	mov	r1, r5
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7f5 fa57 	bl	8000278 <__aeabi_dsub>
 800adca:	f7f5 fea7 	bl	8000b1c <__aeabi_d2iz>
 800adce:	ab0c      	add	r3, sp, #48	@ 0x30
 800add0:	f10b 0b18 	add.w	fp, fp, #24
 800add4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800add8:	f108 0801 	add.w	r8, r8, #1
 800addc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ade0:	e720      	b.n	800ac24 <__kernel_rem_pio2+0x29c>
 800ade2:	4620      	mov	r0, r4
 800ade4:	4629      	mov	r1, r5
 800ade6:	f7f5 fe99 	bl	8000b1c <__aeabi_d2iz>
 800adea:	ab0c      	add	r3, sp, #48	@ 0x30
 800adec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800adf0:	e718      	b.n	800ac24 <__kernel_rem_pio2+0x29c>
 800adf2:	ab0c      	add	r3, sp, #48	@ 0x30
 800adf4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800adf8:	f7f5 fb8c 	bl	8000514 <__aeabi_i2d>
 800adfc:	4622      	mov	r2, r4
 800adfe:	462b      	mov	r3, r5
 800ae00:	f7f5 fbf2 	bl	80005e8 <__aeabi_dmul>
 800ae04:	4652      	mov	r2, sl
 800ae06:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ae0a:	465b      	mov	r3, fp
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	4629      	mov	r1, r5
 800ae10:	f7f5 fbea 	bl	80005e8 <__aeabi_dmul>
 800ae14:	3e01      	subs	r6, #1
 800ae16:	4604      	mov	r4, r0
 800ae18:	460d      	mov	r5, r1
 800ae1a:	e716      	b.n	800ac4a <__kernel_rem_pio2+0x2c2>
 800ae1c:	9906      	ldr	r1, [sp, #24]
 800ae1e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ae22:	9106      	str	r1, [sp, #24]
 800ae24:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ae28:	f7f5 fbde 	bl	80005e8 <__aeabi_dmul>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	4650      	mov	r0, sl
 800ae32:	4659      	mov	r1, fp
 800ae34:	f7f5 fa22 	bl	800027c <__adddf3>
 800ae38:	3601      	adds	r6, #1
 800ae3a:	4682      	mov	sl, r0
 800ae3c:	468b      	mov	fp, r1
 800ae3e:	9b00      	ldr	r3, [sp, #0]
 800ae40:	429e      	cmp	r6, r3
 800ae42:	dc01      	bgt.n	800ae48 <__kernel_rem_pio2+0x4c0>
 800ae44:	42ae      	cmp	r6, r5
 800ae46:	dde9      	ble.n	800ae1c <__kernel_rem_pio2+0x494>
 800ae48:	ab48      	add	r3, sp, #288	@ 0x120
 800ae4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ae4e:	e9c5 ab00 	strd	sl, fp, [r5]
 800ae52:	3c01      	subs	r4, #1
 800ae54:	e6fd      	b.n	800ac52 <__kernel_rem_pio2+0x2ca>
 800ae56:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	dc0b      	bgt.n	800ae74 <__kernel_rem_pio2+0x4ec>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dc35      	bgt.n	800aecc <__kernel_rem_pio2+0x544>
 800ae60:	d059      	beq.n	800af16 <__kernel_rem_pio2+0x58e>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	f003 0007 	and.w	r0, r3, #7
 800ae68:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ae6c:	ecbd 8b02 	vpop	{d8}
 800ae70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae74:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ae76:	2b03      	cmp	r3, #3
 800ae78:	d1f3      	bne.n	800ae62 <__kernel_rem_pio2+0x4da>
 800ae7a:	9b05      	ldr	r3, [sp, #20]
 800ae7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ae80:	eb0d 0403 	add.w	r4, sp, r3
 800ae84:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ae88:	4625      	mov	r5, r4
 800ae8a:	46c2      	mov	sl, r8
 800ae8c:	f1ba 0f00 	cmp.w	sl, #0
 800ae90:	dc69      	bgt.n	800af66 <__kernel_rem_pio2+0x5de>
 800ae92:	4645      	mov	r5, r8
 800ae94:	2d01      	cmp	r5, #1
 800ae96:	f300 8087 	bgt.w	800afa8 <__kernel_rem_pio2+0x620>
 800ae9a:	9c05      	ldr	r4, [sp, #20]
 800ae9c:	ab48      	add	r3, sp, #288	@ 0x120
 800ae9e:	441c      	add	r4, r3
 800aea0:	2000      	movs	r0, #0
 800aea2:	2100      	movs	r1, #0
 800aea4:	f1b8 0f01 	cmp.w	r8, #1
 800aea8:	f300 809c 	bgt.w	800afe4 <__kernel_rem_pio2+0x65c>
 800aeac:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800aeb0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800aeb4:	f1b9 0f00 	cmp.w	r9, #0
 800aeb8:	f040 80a6 	bne.w	800b008 <__kernel_rem_pio2+0x680>
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	e9c3 5600 	strd	r5, r6, [r3]
 800aec2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800aec6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800aeca:	e7ca      	b.n	800ae62 <__kernel_rem_pio2+0x4da>
 800aecc:	9d05      	ldr	r5, [sp, #20]
 800aece:	ab48      	add	r3, sp, #288	@ 0x120
 800aed0:	441d      	add	r5, r3
 800aed2:	4644      	mov	r4, r8
 800aed4:	2000      	movs	r0, #0
 800aed6:	2100      	movs	r1, #0
 800aed8:	2c00      	cmp	r4, #0
 800aeda:	da35      	bge.n	800af48 <__kernel_rem_pio2+0x5c0>
 800aedc:	f1b9 0f00 	cmp.w	r9, #0
 800aee0:	d038      	beq.n	800af54 <__kernel_rem_pio2+0x5cc>
 800aee2:	4602      	mov	r2, r0
 800aee4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aee8:	9c04      	ldr	r4, [sp, #16]
 800aeea:	e9c4 2300 	strd	r2, r3, [r4]
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800aef6:	f7f5 f9bf 	bl	8000278 <__aeabi_dsub>
 800aefa:	ad4a      	add	r5, sp, #296	@ 0x128
 800aefc:	2401      	movs	r4, #1
 800aefe:	45a0      	cmp	r8, r4
 800af00:	da2b      	bge.n	800af5a <__kernel_rem_pio2+0x5d2>
 800af02:	f1b9 0f00 	cmp.w	r9, #0
 800af06:	d002      	beq.n	800af0e <__kernel_rem_pio2+0x586>
 800af08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af0c:	4619      	mov	r1, r3
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800af14:	e7a5      	b.n	800ae62 <__kernel_rem_pio2+0x4da>
 800af16:	9c05      	ldr	r4, [sp, #20]
 800af18:	ab48      	add	r3, sp, #288	@ 0x120
 800af1a:	441c      	add	r4, r3
 800af1c:	2000      	movs	r0, #0
 800af1e:	2100      	movs	r1, #0
 800af20:	f1b8 0f00 	cmp.w	r8, #0
 800af24:	da09      	bge.n	800af3a <__kernel_rem_pio2+0x5b2>
 800af26:	f1b9 0f00 	cmp.w	r9, #0
 800af2a:	d002      	beq.n	800af32 <__kernel_rem_pio2+0x5aa>
 800af2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af30:	4619      	mov	r1, r3
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	e9c3 0100 	strd	r0, r1, [r3]
 800af38:	e793      	b.n	800ae62 <__kernel_rem_pio2+0x4da>
 800af3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af3e:	f7f5 f99d 	bl	800027c <__adddf3>
 800af42:	f108 38ff 	add.w	r8, r8, #4294967295
 800af46:	e7eb      	b.n	800af20 <__kernel_rem_pio2+0x598>
 800af48:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800af4c:	f7f5 f996 	bl	800027c <__adddf3>
 800af50:	3c01      	subs	r4, #1
 800af52:	e7c1      	b.n	800aed8 <__kernel_rem_pio2+0x550>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	e7c6      	b.n	800aee8 <__kernel_rem_pio2+0x560>
 800af5a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800af5e:	f7f5 f98d 	bl	800027c <__adddf3>
 800af62:	3401      	adds	r4, #1
 800af64:	e7cb      	b.n	800aefe <__kernel_rem_pio2+0x576>
 800af66:	ed35 7b02 	vldmdb	r5!, {d7}
 800af6a:	ed8d 7b00 	vstr	d7, [sp]
 800af6e:	ed95 7b02 	vldr	d7, [r5, #8]
 800af72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af76:	ec53 2b17 	vmov	r2, r3, d7
 800af7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af7e:	f7f5 f97d 	bl	800027c <__adddf3>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4606      	mov	r6, r0
 800af88:	460f      	mov	r7, r1
 800af8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af8e:	f7f5 f973 	bl	8000278 <__aeabi_dsub>
 800af92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af96:	f7f5 f971 	bl	800027c <__adddf3>
 800af9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af9e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800afa2:	e9c5 6700 	strd	r6, r7, [r5]
 800afa6:	e771      	b.n	800ae8c <__kernel_rem_pio2+0x504>
 800afa8:	ed34 7b02 	vldmdb	r4!, {d7}
 800afac:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800afb0:	ec51 0b17 	vmov	r0, r1, d7
 800afb4:	4652      	mov	r2, sl
 800afb6:	465b      	mov	r3, fp
 800afb8:	ed8d 7b00 	vstr	d7, [sp]
 800afbc:	f7f5 f95e 	bl	800027c <__adddf3>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	4606      	mov	r6, r0
 800afc6:	460f      	mov	r7, r1
 800afc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afcc:	f7f5 f954 	bl	8000278 <__aeabi_dsub>
 800afd0:	4652      	mov	r2, sl
 800afd2:	465b      	mov	r3, fp
 800afd4:	f7f5 f952 	bl	800027c <__adddf3>
 800afd8:	3d01      	subs	r5, #1
 800afda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800afde:	e9c4 6700 	strd	r6, r7, [r4]
 800afe2:	e757      	b.n	800ae94 <__kernel_rem_pio2+0x50c>
 800afe4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800afe8:	f7f5 f948 	bl	800027c <__adddf3>
 800afec:	f108 38ff 	add.w	r8, r8, #4294967295
 800aff0:	e758      	b.n	800aea4 <__kernel_rem_pio2+0x51c>
 800aff2:	bf00      	nop
 800aff4:	f3af 8000 	nop.w
	...
 800b000:	41700000 	.word	0x41700000
 800b004:	3e700000 	.word	0x3e700000
 800b008:	9b04      	ldr	r3, [sp, #16]
 800b00a:	9a04      	ldr	r2, [sp, #16]
 800b00c:	601d      	str	r5, [r3, #0]
 800b00e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800b012:	605c      	str	r4, [r3, #4]
 800b014:	609f      	str	r7, [r3, #8]
 800b016:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800b01a:	60d3      	str	r3, [r2, #12]
 800b01c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b020:	6110      	str	r0, [r2, #16]
 800b022:	6153      	str	r3, [r2, #20]
 800b024:	e71d      	b.n	800ae62 <__kernel_rem_pio2+0x4da>
 800b026:	bf00      	nop

0800b028 <scalbn>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	ec55 4b10 	vmov	r4, r5, d0
 800b02e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b032:	4606      	mov	r6, r0
 800b034:	462b      	mov	r3, r5
 800b036:	b991      	cbnz	r1, 800b05e <scalbn+0x36>
 800b038:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b03c:	4323      	orrs	r3, r4
 800b03e:	d03b      	beq.n	800b0b8 <scalbn+0x90>
 800b040:	4b33      	ldr	r3, [pc, #204]	@ (800b110 <scalbn+0xe8>)
 800b042:	4620      	mov	r0, r4
 800b044:	4629      	mov	r1, r5
 800b046:	2200      	movs	r2, #0
 800b048:	f7f5 face 	bl	80005e8 <__aeabi_dmul>
 800b04c:	4b31      	ldr	r3, [pc, #196]	@ (800b114 <scalbn+0xec>)
 800b04e:	429e      	cmp	r6, r3
 800b050:	4604      	mov	r4, r0
 800b052:	460d      	mov	r5, r1
 800b054:	da0f      	bge.n	800b076 <scalbn+0x4e>
 800b056:	a326      	add	r3, pc, #152	@ (adr r3, 800b0f0 <scalbn+0xc8>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	e01e      	b.n	800b09c <scalbn+0x74>
 800b05e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b062:	4291      	cmp	r1, r2
 800b064:	d10b      	bne.n	800b07e <scalbn+0x56>
 800b066:	4622      	mov	r2, r4
 800b068:	4620      	mov	r0, r4
 800b06a:	4629      	mov	r1, r5
 800b06c:	f7f5 f906 	bl	800027c <__adddf3>
 800b070:	4604      	mov	r4, r0
 800b072:	460d      	mov	r5, r1
 800b074:	e020      	b.n	800b0b8 <scalbn+0x90>
 800b076:	460b      	mov	r3, r1
 800b078:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b07c:	3936      	subs	r1, #54	@ 0x36
 800b07e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b082:	4296      	cmp	r6, r2
 800b084:	dd0d      	ble.n	800b0a2 <scalbn+0x7a>
 800b086:	2d00      	cmp	r5, #0
 800b088:	a11b      	add	r1, pc, #108	@ (adr r1, 800b0f8 <scalbn+0xd0>)
 800b08a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08e:	da02      	bge.n	800b096 <scalbn+0x6e>
 800b090:	a11b      	add	r1, pc, #108	@ (adr r1, 800b100 <scalbn+0xd8>)
 800b092:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b096:	a318      	add	r3, pc, #96	@ (adr r3, 800b0f8 <scalbn+0xd0>)
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	f7f5 faa4 	bl	80005e8 <__aeabi_dmul>
 800b0a0:	e7e6      	b.n	800b070 <scalbn+0x48>
 800b0a2:	1872      	adds	r2, r6, r1
 800b0a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b0a8:	428a      	cmp	r2, r1
 800b0aa:	dcec      	bgt.n	800b086 <scalbn+0x5e>
 800b0ac:	2a00      	cmp	r2, #0
 800b0ae:	dd06      	ble.n	800b0be <scalbn+0x96>
 800b0b0:	f36f 531e 	bfc	r3, #20, #11
 800b0b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b0b8:	ec45 4b10 	vmov	d0, r4, r5
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
 800b0be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b0c2:	da08      	bge.n	800b0d6 <scalbn+0xae>
 800b0c4:	2d00      	cmp	r5, #0
 800b0c6:	a10a      	add	r1, pc, #40	@ (adr r1, 800b0f0 <scalbn+0xc8>)
 800b0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0cc:	dac3      	bge.n	800b056 <scalbn+0x2e>
 800b0ce:	a10e      	add	r1, pc, #56	@ (adr r1, 800b108 <scalbn+0xe0>)
 800b0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d4:	e7bf      	b.n	800b056 <scalbn+0x2e>
 800b0d6:	3236      	adds	r2, #54	@ 0x36
 800b0d8:	f36f 531e 	bfc	r3, #20, #11
 800b0dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b118 <scalbn+0xf0>)
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	e7d8      	b.n	800b09c <scalbn+0x74>
 800b0ea:	bf00      	nop
 800b0ec:	f3af 8000 	nop.w
 800b0f0:	c2f8f359 	.word	0xc2f8f359
 800b0f4:	01a56e1f 	.word	0x01a56e1f
 800b0f8:	8800759c 	.word	0x8800759c
 800b0fc:	7e37e43c 	.word	0x7e37e43c
 800b100:	8800759c 	.word	0x8800759c
 800b104:	fe37e43c 	.word	0xfe37e43c
 800b108:	c2f8f359 	.word	0xc2f8f359
 800b10c:	81a56e1f 	.word	0x81a56e1f
 800b110:	43500000 	.word	0x43500000
 800b114:	ffff3cb0 	.word	0xffff3cb0
 800b118:	3c900000 	.word	0x3c900000
 800b11c:	00000000 	.word	0x00000000

0800b120 <floor>:
 800b120:	ec51 0b10 	vmov	r0, r1, d0
 800b124:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b130:	2e13      	cmp	r6, #19
 800b132:	460c      	mov	r4, r1
 800b134:	4605      	mov	r5, r0
 800b136:	4680      	mov	r8, r0
 800b138:	dc34      	bgt.n	800b1a4 <floor+0x84>
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	da17      	bge.n	800b16e <floor+0x4e>
 800b13e:	a332      	add	r3, pc, #200	@ (adr r3, 800b208 <floor+0xe8>)
 800b140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b144:	f7f5 f89a 	bl	800027c <__adddf3>
 800b148:	2200      	movs	r2, #0
 800b14a:	2300      	movs	r3, #0
 800b14c:	f7f5 fcdc 	bl	8000b08 <__aeabi_dcmpgt>
 800b150:	b150      	cbz	r0, 800b168 <floor+0x48>
 800b152:	2c00      	cmp	r4, #0
 800b154:	da55      	bge.n	800b202 <floor+0xe2>
 800b156:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b15a:	432c      	orrs	r4, r5
 800b15c:	2500      	movs	r5, #0
 800b15e:	42ac      	cmp	r4, r5
 800b160:	4c2b      	ldr	r4, [pc, #172]	@ (800b210 <floor+0xf0>)
 800b162:	bf08      	it	eq
 800b164:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b168:	4621      	mov	r1, r4
 800b16a:	4628      	mov	r0, r5
 800b16c:	e023      	b.n	800b1b6 <floor+0x96>
 800b16e:	4f29      	ldr	r7, [pc, #164]	@ (800b214 <floor+0xf4>)
 800b170:	4137      	asrs	r7, r6
 800b172:	ea01 0307 	and.w	r3, r1, r7
 800b176:	4303      	orrs	r3, r0
 800b178:	d01d      	beq.n	800b1b6 <floor+0x96>
 800b17a:	a323      	add	r3, pc, #140	@ (adr r3, 800b208 <floor+0xe8>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f7f5 f87c 	bl	800027c <__adddf3>
 800b184:	2200      	movs	r2, #0
 800b186:	2300      	movs	r3, #0
 800b188:	f7f5 fcbe 	bl	8000b08 <__aeabi_dcmpgt>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d0eb      	beq.n	800b168 <floor+0x48>
 800b190:	2c00      	cmp	r4, #0
 800b192:	bfbe      	ittt	lt
 800b194:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b198:	4133      	asrlt	r3, r6
 800b19a:	18e4      	addlt	r4, r4, r3
 800b19c:	ea24 0407 	bic.w	r4, r4, r7
 800b1a0:	2500      	movs	r5, #0
 800b1a2:	e7e1      	b.n	800b168 <floor+0x48>
 800b1a4:	2e33      	cmp	r6, #51	@ 0x33
 800b1a6:	dd0a      	ble.n	800b1be <floor+0x9e>
 800b1a8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b1ac:	d103      	bne.n	800b1b6 <floor+0x96>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	f7f5 f863 	bl	800027c <__adddf3>
 800b1b6:	ec41 0b10 	vmov	d0, r0, r1
 800b1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1be:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b1c2:	f04f 37ff 	mov.w	r7, #4294967295
 800b1c6:	40df      	lsrs	r7, r3
 800b1c8:	4207      	tst	r7, r0
 800b1ca:	d0f4      	beq.n	800b1b6 <floor+0x96>
 800b1cc:	a30e      	add	r3, pc, #56	@ (adr r3, 800b208 <floor+0xe8>)
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	f7f5 f853 	bl	800027c <__adddf3>
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f7f5 fc95 	bl	8000b08 <__aeabi_dcmpgt>
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d0c2      	beq.n	800b168 <floor+0x48>
 800b1e2:	2c00      	cmp	r4, #0
 800b1e4:	da0a      	bge.n	800b1fc <floor+0xdc>
 800b1e6:	2e14      	cmp	r6, #20
 800b1e8:	d101      	bne.n	800b1ee <floor+0xce>
 800b1ea:	3401      	adds	r4, #1
 800b1ec:	e006      	b.n	800b1fc <floor+0xdc>
 800b1ee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	40b3      	lsls	r3, r6
 800b1f6:	441d      	add	r5, r3
 800b1f8:	4545      	cmp	r5, r8
 800b1fa:	d3f6      	bcc.n	800b1ea <floor+0xca>
 800b1fc:	ea25 0507 	bic.w	r5, r5, r7
 800b200:	e7b2      	b.n	800b168 <floor+0x48>
 800b202:	2500      	movs	r5, #0
 800b204:	462c      	mov	r4, r5
 800b206:	e7af      	b.n	800b168 <floor+0x48>
 800b208:	8800759c 	.word	0x8800759c
 800b20c:	7e37e43c 	.word	0x7e37e43c
 800b210:	bff00000 	.word	0xbff00000
 800b214:	000fffff 	.word	0x000fffff

0800b218 <_init>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	bf00      	nop
 800b21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21e:	bc08      	pop	{r3}
 800b220:	469e      	mov	lr, r3
 800b222:	4770      	bx	lr

0800b224 <_fini>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr
